<snippet>
    <content><![CDATA[
# FOR THE LOVE OF GOD, USE: https://regex101.com to figure out regex

# \$RegexURL comes from: http://daringfireball.net/2010/07/improved_regex_for_matching_urls
# Distill one or more strings that are valid paths from unknown object
\$RegexLocalOrUNCPath = '^(([a-zA-Z]:\\\\)|(\\\\\\\\))(((?![<>:"\\/\\\\|?*]).)+((?<![ .])\\\\)?)*\$'
\$RegexURL = "(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'`".,<>?«»“”‘’]))"

\$RegexDirectoryPath = '^(([a-zA-Z]:\\\\)|(\\\\\\\\))((?![.<>:"\\/\\\\|?*]).)+((?![.<>:"\\/|?*]).)+\$'
\$RegexFilePath = '^(([a-zA-Z]:\\\\)|(\\\\\\\\))((?![.<>:"\\/\\\\|?*]).)+((?![<>:"\\/|?*]).)+((.*?\\.)|(.*?\\.[\w]+))+\$'

# Finding potential Local or UNC in a block of text
\$TextBlock = Get-Content \$HOME\textblock.txt
\$PotentialPathsArray = \$(\$TextBlock | Select-String -Pattern \$RegexLocalOrUNCPath -AllMatches).Matches.Value
\$UpdatedPotentialPathsArray = foreach (\$potentialpath in \$PotentialPathsArray) {
    if (\$([uri]\$potentialpath).IsAbsoluteURI -and \$(\$([uri]\$potentialpath).IsLoopBack -or \$([uri]\$potentialpath).IsUnc)) {
        \$potentialpath
    }
}

# Validating a string that is supposed to be a Local or UNC Path
if ( !\$(\$([uri]\$TargetDir).IsAbsoluteURI -and \$(\$([uri]\$TargetDir).IsLoopBack -or \$([uri]\$TargetDir).IsUnc)) ) {
    Write-Verbose "\$TargetDir is not a valid directory path! Halting!"
    Write-Error "\$TargetDir is not a valid directory path! Halting!"
    \$global:FunctionResult = "1"
    return
}

# Determine if string is a URL, a local path, or a UNC path
if ([uri]\$TargetString.Scheme -match "http") {
	Write-Host "\$TargetSring is a URL"
}
if ([uri]\$TargetString.Scheme -eq "file" -and [uri]\$TargetString.Host -ne \$null) {
	Write-Host "\$TargetString is a UNC path"
}
if ([uri]\$TargetString.Scheme -eq "file" -and [uri]\$TargetString.Host -eq \$null) {
	Write-Host "\$TargetString is a local path"
}

$0]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>validatepath</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.powershell</scope>
</snippet>
