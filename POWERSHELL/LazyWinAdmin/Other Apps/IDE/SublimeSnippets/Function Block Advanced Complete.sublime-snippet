<!-- See http://www.sublimetext.com/docs/snippets for more information -->
<snippet>
    <content><![CDATA[
<#
.SYNOPSIS
    Short description
.DESCRIPTION
    Long description
.NOTES
    DEPENDENCIES
        Helper scripts/functions and/or binaries needed for the function to work.
.PARAMETER
    N parameter
.PARAMETER
    N+1 parameter
.EXAMPLE
    Example of how to use this cmdlet
.EXAMPLE
    Another example of how to use this cmdlet
.INPUTS
    Inputs to this cmdlet (if any)
.OUTPUTS
    Output from this cmdlet (if any)
.COMPONENT
    The component this cmdlet belongs to
.ROLE
    The role this cmdlet belongs to
.FUNCTIONALITY
    The functionality that best describes this cmdlet
#>
function Verb-Noun {
    [CmdletBinding(
        DefaultParameterSetName='Parameter Set 1', 
        SupportsShouldProcess=\$true, 
        PositionalBinding=\$false,
        HelpUri = 'http://www.microsoft.com/',
        SupportsPaging = \$false,
        ConfirmImpact='Medium'
    )]
    [Alias('vn','verbn','vnoun')]
    [OutputType([String])]

    <#
    All PS 5.1 Parameter Arguments and Attributes are as follows:
    (See: https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_functions_advanced_parameters)
    
    	Arguments:
    	Syntax is, for example -
    	[parameter(Mandatory=\$true,Position=1)])

    	Mandatory, Position, ParameterSetName, ValueFromPipeline, ValueFromPipelineByPropertyName,
    	ValueFromRemainingArguments, HelpMessage
    	
    	Attributes:
    	Syntax is somewhere immediately before the parameter name, for example -
    	[Alias("CN","MachineName")]
		\$ComputerName

		Alias, AllowNull, AllowEmptyString, AllowEmptyCollection, ValidateCount, ValidateLength,
		ValidatePattern, ValidateRange, ValidateScript, ValidateSet, ValidateNotNull,
		ValidateNotNullOrEmpty
    #>

    Param
    (
        # \$HelperFunctionSourceDirectory help description
        [Parameter(
            Mandatory=\$true, 
            ValueFromPipeline=\$true,
            ValueFromPipelineByPropertyName=\$true, 
            ValueFromRemainingArguments=\$false, 
            Position=0,
            ParameterSetName='Parameter Set 1'
        )]
        [ValidateNotNull()]
        [ValidateNotNullOrEmpty()]
        [ValidateCount(0,5)]
        [ValidateSet("sun", "moon", "earth")]
        [Alias("hfsd")] 
        [string]\$HelperFunctionSourceDirectory = \$(Read-Host -Prompt "Please enter the full path to the directory that contains the [HELPER] script(s)/function(s)"),

        # \$Number help description
        [Parameter(
            Position=1,
            ParameterSetName='Parameter Set 1'
        )]
        [AllowNull()]
        [AllowEmptyCollection()]
        [AllowEmptyString()]
        [ValidateScript({\$true})]
        [ValidateRange(0,5)]
        [int]\$Number,

        [Parameter(
            Position=2,
            ParameterSetName='Another Parameter Set'
        )]
        [ValidatePattern("[a-z]*")]
        [ValidateLength(0,15)]
        [string]\$OutputDirectory = \$(Read-Host -Prompt "Please enter the full path to the directory where all output files will be written")

        # \$IPAddress help description
        [Parameter(
            Position=3,
            ParameterSetName='Another Parameter Set'
        )]
        [ValidateScript({
            \$_ -match [IPAddress]$_
        })]
        \$IPAddress
    )

    # Adding the Dynamic Parameter "dp1" that is revealed via tab completion if \$OutputDirectory matches "C:\\\\boop"
    DynamicParam {
        if (\$OutputDirectory -match "C:\\\\boop") {
            \$attributes = New-Object System.Management.Automation.ParameterAttribute
            \$attributes.ParameterSetName = "__AllParameterSets"
            \$attributes.Mandatory = \$false

            \$attributeCollection = New-Object -Type System.Collections.ObjectModel.Collection
            [System.Attribute]\$attributeCollection.Add(\$attributes)

            \$dynParam1 = New-Object -Type System.Management.Automation.RuntimeDefinedParameter("dp1", [Int32], \$attributeCollection)

            \$paramDictionary = New-Object -Type System.Management.Automation.RuntimeDefinedParameterDictionary
            \$paramDictionary.Add("dp1", \$dynParam1)
            return \$paramDictionary
        }
    }

    Begin {
    ##### REGION Helper Functions and Libraries #####

    ## BEGIN Sourced Helper Functions ##

    ## END Sourced Helper Functions ##

    ## BEGIN Native Helper Functions ##

    ## END Native Helper Functions ##

    ##### REGION END Helper Functions and Libraries #####


    ##### BEGIN Variable/Parameter Transforms and PreRun Prep #####

    ##### END Variable/Parameter Transforms and PreRun Prep #####


    ##### BEGIN Parameter Validation #####

    ##### END Parameter Validation #####
    }

    Process {
        if (\$pscmdlet.ShouldProcess("Target")) {
        ##### BEGIN Main Body #####

        ##### END Main Body #####
        }
    }

    End {
        ##### BEGIN Cleanup #####

        ##### END Cleanup #####
    }
}

$0]]></content>
    <!-- Optional: Tab trigger to activate the snippet -->
    <tabTrigger>funadvcom</tabTrigger>
    <!-- Optional: Scope the tab trigger will be active in -->
    <scope>source.powershell</scope>
</snippet>
