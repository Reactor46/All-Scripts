using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.Diagnostics;
using Microsoft.Exchange.Data.Transport;
using Microsoft.Exchange.Data.Mime;
using Microsoft.Exchange.Data.ContentTypes.Tnef;
using Microsoft.Exchange.Data.Transport.Email;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Data.Common;
using System.IO;
using Microsoft.Win32;
using System.Reflection;

namespace ExchangeRoutingAgents
{
    public class MapiPropAgentFactory : RoutingAgentFactory
    {
        public override RoutingAgent CreateAgent(SmtpServer server)
        {
            RoutingAgent mpAgent = new MapiPropAgent();
            return mpAgent;
        }
    }
}

public class MapiPropAgent : RoutingAgent
{
    public MapiPropAgent()
    {
        this.OnRoutedMessage += new RoutedMessageEventHandler(MapiPropAgent_OnRoutedMessage);
    }
    void MapiPropAgent_OnRoutedMessage(RoutedMessageEventSource esEvtsource, QueuedMessageEventArgs qmQueuedMessage)
    {
        String myPropString = "myExtraInfo";
        MimePart tnefPart = qmQueuedMessage.MailItem.Message.TnefPart;
        if (tnefPart != null)
        {
            //Check the Mimeheader to see if the X-header exists
            MimeDocument mdMimeDoc = qmQueuedMessage.MailItem.Message.MimeDocument;
            HeaderList hlHeaderlist = mdMimeDoc.RootPart.Headers;
            Header myPropHeader = hlHeaderlist.FindFirst(myPropString);
            TnefReader reader = new TnefReader(tnefPart.GetContentReadStream(), 0, TnefComplianceMode.Loose);
            while (reader.ReadNextAttribute())
            {
                //Find Message Level TNEF attributes
                if (reader.AttributeTag == TnefAttributeTag.MapiProperties)
                {

                    while (reader.PropertyReader.ReadNextProperty())
                    {
                        if (reader.PropertyReader.IsNamedProperty)
                        {
                            if (reader.PropertyReader.PropertyNameId.Name == myPropString)
                            {

                                String myPropStringValue = reader.PropertyReader.ReadValueAsString();
                                if (myPropHeader == null)
                                {
                                    MimeNode lhLasterHeader = hlHeaderlist.LastChild;
                                    TextHeader nhNewHeader = new TextHeader(myPropString, myPropStringValue);
                                    hlHeaderlist.InsertBefore(nhNewHeader, lhLasterHeader);
                                    lhLasterHeader = null;
                                    nhNewHeader = null;
                                }
                            }
                        }

                    }

                }
            }
            reader.Dispose();
        }


    }

    
}


