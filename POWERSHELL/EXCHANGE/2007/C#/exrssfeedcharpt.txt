using System;
using System.Web;
using System.Web.Services;
using System.Net;
using System.Xml;
using System.Web.Services.Protocols;
using System.IO;
using System.Text;
using mgne12v2;


[WebService(Namespace = "http://msgdev.mvps.org/InboxRssFeed/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
public class Service : System.Web.Services.WebService
{
    public Service()
    {

        //Uncomment the following line if using designed components 
        //InitializeComponent(); 
    }

    public XmlDocument GetInboxItems(string rtype, string mbMailboxToAgregate)
    {
        String snServerName = "servername";
        String unUserName = "username";
        String psPassword = "password";
        String dnDomainName = "domain";
        XmlDocument rsRssFeed = new XmlDocument();
        StringWriter xsXmlString = new StringWriter();
        XmlWriter xrXmlWritter = new XmlTextWriter(xsXmlString);
        // write Div
        xrXmlWritter.WriteStartDocument();
        switch (rtype)
        {
            case "rss":
                xrXmlWritter.WriteStartElement("rss");
                xrXmlWritter.WriteAttributeString("version", "2.0");
                xrXmlWritter.WriteStartElement("channel");
                xrXmlWritter.WriteElementString("title", "RSS Inbox feed for " + mbMailboxToAgregate);
                xrXmlWritter.WriteElementString("link", "https://" + snServerName + "/owa/");
                xrXmlWritter.WriteElementString("description", "Exchange Inbox Feed For " + mbMailboxToAgregate);
                break;
        }
        ExchangeServiceBinding ewsServiceBinding = new ExchangeServiceBinding();
        ewsServiceBinding.Credentials = new NetworkCredential(unUserName, psPassword ,dnDomainName );
        ewsServiceBinding.Url = @"https://" + snServerName + "/EWS/exchange.asmx";
        ExchangeImpersonationType exExchangeImpersonation = new ExchangeImpersonationType();
        ConnectingSIDType csConnectingSid = new ConnectingSIDType();
        csConnectingSid.PrimarySmtpAddress = mbMailboxToAgregate;
        exExchangeImpersonation.ConnectingSID = csConnectingSid;
        ewsServiceBinding.ExchangeImpersonation = exExchangeImpersonation;
        FindItemType fiFindItemRequest = new FindItemType();
        fiFindItemRequest.Traversal = ItemQueryTraversalType.Shallow;
        ItemResponseShapeType ipItemProperties = new ItemResponseShapeType();
        ipItemProperties.BaseShape = DefaultShapeNamesType.AllProperties;
        fiFindItemRequest.ItemShape = ipItemProperties;

        PathToExtendedFieldType ptItemURI = new PathToExtendedFieldType();
        ptItemURI.PropertyTag = "0x10F3";
        ptItemURI.PropertyType = MapiPropertyTypeType.String;

        PathToExtendedFieldType ptFromEmailDisplay = new PathToExtendedFieldType();
        ptFromEmailDisplay.PropertyTag = "0x0C1A";
        ptFromEmailDisplay.PropertyType = MapiPropertyTypeType.String;

        PathToExtendedFieldType ptBodySum = new PathToExtendedFieldType();
        ptBodySum.PropertyTag = "0x3FD9";
        ptBodySum.PropertyType = MapiPropertyTypeType.String;

        DistinguishedFolderIdType[] faFolderIDArray = new DistinguishedFolderIdType[2];
        faFolderIDArray[0] = new DistinguishedFolderIdType();
        faFolderIDArray[0].Id = DistinguishedFolderIdNameType.inbox;
        fiFindItemRequest.ItemShape.AdditionalProperties = new BasePathToElementType[3];
        fiFindItemRequest.ItemShape.AdditionalProperties[0] = ptBodySum;
        fiFindItemRequest.ItemShape.AdditionalProperties[1] = ptItemURI;
        fiFindItemRequest.ItemShape.AdditionalProperties[2] = ptFromEmailDisplay;
        fiFindItemRequest.ParentFolderIds = faFolderIDArray;
        FindItemResponseType frFindItemResponse = ewsServiceBinding.FindItem(fiFindItemRequest);
        foreach (FindItemResponseMessageType firmtMessage in frFindItemResponse.ResponseMessages.Items)
        {
            if (firmtMessage.RootFolder.TotalItemsInView > 0)
            {
                foreach (ItemType miMailboxItem in ((ArrayOfRealItemsType)firmtMessage.RootFolder.Item).Items)
                {
                    if (miMailboxItem.ExtendedProperty != null)
                    {
                        if (miMailboxItem.ExtendedProperty.Length == 3)
                        {
                            xrXmlWritter.WriteStartElement("item");
                            xrXmlWritter.WriteElementString("title", miMailboxItem.Subject.ToString());
                            xrXmlWritter.WriteElementString("link", "https://" + snServerName + "/owa/?ae=Item&t=IPM.Note&id=Rg" + Server.UrlEncode(miMailboxItem.ItemId.Id.ToString()).Substring(58).Replace("%3d", "J"));
                            xrXmlWritter.WriteElementString("author", miMailboxItem.ExtendedProperty[2].Item.ToString());
                            xrXmlWritter.WriteStartElement("description");
                            xrXmlWritter.WriteRaw("<![CDATA[");

                            GetItemType giRequest = new GetItemType();
                            ItemIdType iiItemId = new ItemIdType();
                            iiItemId.Id = miMailboxItem.ItemId.Id;
                            iiItemId.ChangeKey = miMailboxItem.ItemId.ChangeKey;
                            ItemResponseShapeType giResponseShape = new ItemResponseShapeType();
                            giResponseShape.BaseShape = DefaultShapeNamesType.Default;
                            giResponseShape.IncludeMimeContent = true;
                            giRequest.ItemShape = giResponseShape;

                            giRequest.ItemIds = new ItemIdType[1];
                            giRequest.ItemIds[0] = iiItemId;
                            giRequest.ItemShape.BaseShape = DefaultShapeNamesType.Default;
                            giRequest.ItemShape.IncludeMimeContent = true;
                            GetItemResponseType giResponse = ewsServiceBinding.GetItem(giRequest);
                            if (giResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Error)
                            {
                                Console.WriteLine("Error Occured");
                                Console.WriteLine(giResponse.ResponseMessages.Items[0].MessageText);
                            }
                            else
                            {
                                ItemInfoResponseMessageType rmResponseMessage = giResponse.ResponseMessages.Items[0] as ItemInfoResponseMessageType;
                                xrXmlWritter.WriteRaw(rmResponseMessage.Items.Items[0].Body.Value.ToString());
                            }                          
                            xrXmlWritter.WriteRaw("]]>");
                            xrXmlWritter.WriteEndElement();
                            xrXmlWritter.WriteElementString("pubDate", miMailboxItem.DateTimeCreated.ToString("r"));
                            xrXmlWritter.WriteElementString("guid", miMailboxItem.ItemId.Id.ToString());
                            xrXmlWritter.WriteEndElement();
                        }
                    }
                }
            }
        }
        xrXmlWritter.WriteEndElement();
        xrXmlWritter.WriteEndElement();
        xrXmlWritter.WriteEndDocument();
        // Load and Return a XML Document
        rsRssFeed.LoadXml(xsXmlString.ToString());
        return rsRssFeed;
    }
    [WebMethod]
    public XmlDocument GenRSSFeed()
    {
        XmlDocument xrXmldocresult;
        try
        {
            xrXmldocresult = this.GetInboxItems("rss", "user@smtpdomain.com");
        }
        catch (Exception e)
        {
            xrXmldocresult = new XmlDocument();
            XmlElement xeFirstDivElement = xrXmldocresult.CreateElement("ErrorOccured");
            xeFirstDivElement.InnerText = e.Message.ToString();
            xrXmldocresult.AppendChild(xeFirstDivElement);
            XmlElement xeFirstDivElement1 = xrXmldocresult.CreateElement("ErrorLineNumber");
            xeFirstDivElement1.InnerText = e.Source.ToString();
        }
        return xrXmldocresult;
        ;

    }