            PermissionSetType fbPermissionSet = new PermissionSetType();
            BaseFolderIdType[] bfBaseFolderArray = new BaseFolderIdType[1];
            DistinguishedFolderIdType dfRootFolderID = new DistinguishedFolderIdType();
            if (intebExchangeServiceBinding.ExchangeImpersonation == null)
            {
                EmailAddressType mbMailbox = new EmailAddressType();
                mbMailbox.EmailAddress = emEmailAddress;
                dfRootFolderID.Mailbox = mbMailbox;
            }
            dfRootFolderID.Id = DistinguishedFolderIdNameType.msgfolderroot;
            bfBaseFolderArray[0] = dfRootFolderID;
            List<BaseFolderType>rfRootFolder = GetFolder(bfBaseFolderArray);
            BaseFolderIdType[] bfIdArray = new BaseFolderIdType[1];
            bfIdArray[0] = rfRootFolder[0].ParentFolderId;
            List<BaseFolderType> fbFolder = FindFolder(bfIdArray, "Freebusy Data");
            FolderResponseShapeType frFolderRShape = new FolderResponseShapeType();
            frFolderRShape.BaseShape = DefaultShapeNamesType.AllProperties;
            GetFolderType gfRequest = new GetFolderType();
            gfRequest.FolderIds = new BaseFolderIdType[1] { fbFolder[0].FolderId };
            intFreeBusyFolderID = fbFolder[0].FolderId;
            gfRequest.FolderShape = frFolderRShape;
            GetFolderResponseType gfGetFolderResponse = intebExchangeServiceBinding.GetFolder(gfRequest);
            FolderType cfCurrentFolder = null;


            if (gfGetFolderResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Success)
            {
                cfCurrentFolder = (FolderType)((FolderInfoResponseMessageType)gfGetFolderResponse.ResponseMessages.Items[0]).Folders[0];
                fbPermissionSet = cfCurrentFolder.PermissionSet;
            }

        public List<BaseFolderType> GetFolder(BaseFolderIdType[] biArray)
        {
            try
            {
                List<BaseFolderType> rtReturnList = new List<BaseFolderType>();
                GetFolderType gfGetfolder = new GetFolderType();
                FolderResponseShapeType fsFoldershape = new FolderResponseShapeType();
                fsFoldershape.BaseShape = DefaultShapeNamesType.AllProperties;
                DistinguishedFolderIdType rfRootFolder = new DistinguishedFolderIdType();
                gfGetfolder.FolderIds = biArray;
                gfGetfolder.FolderShape = fsFoldershape;
                GetFolderResponseType fldResponse = intebExchangeServiceBinding.GetFolder(gfGetfolder);
                ArrayOfResponseMessagesType aormt = fldResponse.ResponseMessages;
                ResponseMessageType[] rmta = aormt.Items;
                foreach (ResponseMessageType rmt in rmta)
                {
                    if (rmt.ResponseClass == ResponseClassType.Success)
                    {
                        FolderInfoResponseMessageType firmt;
                        firmt = (rmt as FolderInfoResponseMessageType);
                        BaseFolderType[] rfFolders = firmt.Folders;
                        rtReturnList.Add(rfFolders[0]);
                    }
                    else
                    {
                        //Deal with Error
                    }

                }
                return rtReturnList;
            }
            catch (Exception exException)
            {
                Console.WriteLine(exException.ToString());
                throw new GetFolderException("Get Folder Exception");
            }
            
         }
        public List<BaseFolderType> FindFolder(BaseFolderIdType[] biArray, String fnFolderName)
        {
            try
            {
                List<BaseFolderType> rtReturnList = new List<BaseFolderType>();
                FindFolderType fiFindFolder = new FindFolderType();
                fiFindFolder.Traversal = FolderQueryTraversalType.Shallow;
                FolderResponseShapeType rsResponseShape = new FolderResponseShapeType();
                rsResponseShape.BaseShape = DefaultShapeNamesType.AllProperties;
                fiFindFolder.FolderShape = rsResponseShape;
                fiFindFolder.ParentFolderIds = biArray;
                RestrictionType ffRestriction = new RestrictionType();
                IsEqualToType ieToType = new IsEqualToType();
                PathToUnindexedFieldType fnFolderNameField = new PathToUnindexedFieldType();
                fnFolderNameField.FieldURI = UnindexedFieldURIType.folderDisplayName;

                FieldURIOrConstantType ciConstantType = new FieldURIOrConstantType();
                ConstantValueType cvConstantValueType = new ConstantValueType();
                cvConstantValueType.Value = fnFolderName;
                ciConstantType.Item = cvConstantValueType;
                ieToType.Item = fnFolderNameField;
                ieToType.FieldURIOrConstant = ciConstantType;
                ffRestriction.Item = ieToType;
                fiFindFolder.Restriction = ffRestriction;

                FindFolderResponseType findFolderResponse = intebExchangeServiceBinding.FindFolder(fiFindFolder);
                ResponseMessageType[] rmta = findFolderResponse.ResponseMessages.Items;
                foreach (ResponseMessageType rmt in rmta)
                {
                    if (((FindFolderResponseMessageType)rmt).ResponseClass == ResponseClassType.Success)
                    {
                        FindFolderResponseMessageType ffResponse = (FindFolderResponseMessageType)rmt;
                        if (ffResponse.RootFolder.TotalItemsInView > 0)
                        {
                            foreach (BaseFolderType suSubFolder in ffResponse.RootFolder.Folders)
                            {
                                rtReturnList.Add(suSubFolder);
                            }

                        }
                        else
                        {
                            throw new FindFolderException("Find Folder Exception No Folder");
                        }
                    }
                    else
                    {
                        throw new FindFolderException("Find Folder Exception Seach Error");
                    }

                }

                return rtReturnList;
            }
            catch (Exception exException)
            {
                Console.WriteLine(exException.ToString());
                throw new FindFolderException("Get Folder Exception");
            }
        }