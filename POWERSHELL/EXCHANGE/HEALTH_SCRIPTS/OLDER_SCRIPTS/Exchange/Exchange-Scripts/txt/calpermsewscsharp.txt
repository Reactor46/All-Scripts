using System;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using testprod1.WebReference;

namespace SetDefaultCalPerms
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create the binding and set the credentials
            ExchangeServiceBinding esb = new ExchangeServiceBinding();
            esb.RequestServerVersionValue = new RequestServerVersion();
            esb.RequestServerVersionValue.Version = ExchangeVersionType.Exchange2007_SP1;
            ServicePointManager.ServerCertificateValidationCallback =
            delegate(Object obj, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors)
            {
                //   Replace this line with code to validate server certificate.
                return true;
            };

            esb.Credentials = new NetworkCredential("username", "password", "domain");
            esb.Url = @"https://servername/EWS/Exchange.asmx";
            setcalperm(esb);

        }
        static void setcalperm(ExchangeServiceBinding esb)
        {

            DistinguishedFolderIdType cfCurrentCalendar = new DistinguishedFolderIdType();
            cfCurrentCalendar.Id = DistinguishedFolderIdNameType.calendar;

            FolderResponseShapeType frFolderRShape = new FolderResponseShapeType();
            frFolderRShape.BaseShape = DefaultShapeNamesType.AllProperties;

            GetFolderType gfRequest = new GetFolderType();
            gfRequest.FolderIds = new BaseFolderIdType[1] { cfCurrentCalendar };
            gfRequest.FolderShape = frFolderRShape;


            GetFolderResponseType gfGetFolderResponse = esb.GetFolder(gfRequest);
            CalendarFolderType cfCurrentFolder = null;
            if (gfGetFolderResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Success)
            {

                cfCurrentFolder = (CalendarFolderType)((FolderInfoResponseMessageType)gfGetFolderResponse.ResponseMessages.Items[0]).Folders[0];

            }
            else
            {//handle error 
            }

           UserIdType auAceUser = new UserIdType();
           auAceUser.DistinguishedUserSpecified = true;
           auAceUser.DistinguishedUser = DistinguishedUserType.Default;

           CalendarPermissionSetType cfCurrentCalPermsionsSet = cfCurrentFolder.PermissionSet;
           CalendarPermissionSetType cfNewCalPermsionsSet = new CalendarPermissionSetType();
           cfNewCalPermsionsSet.CalendarPermissions = new CalendarPermissionType[cfCurrentCalPermsionsSet.CalendarPermissions.Length] ;
            for(int cpint=0;cpint < cfCurrentCalPermsionsSet.CalendarPermissions.Length;cpint++){
                if (cfCurrentCalPermsionsSet.CalendarPermissions[cpint].UserId.SID == auAceUser.SID)
                {
                    cfNewCalPermsionsSet.CalendarPermissions[cpint] = new CalendarPermissionType();
                    cfNewCalPermsionsSet.CalendarPermissions[cpint].UserId = cfCurrentCalPermsionsSet.CalendarPermissions[cpint].UserId;
                    cfNewCalPermsionsSet.CalendarPermissions[cpint].CalendarPermissionLevel = CalendarPermissionLevelType.Reviewer;
                }
                else
                {
                    //Copy old ACE
                    if (cfCurrentCalPermsionsSet.CalendarPermissions[cpint].CalendarPermissionLevel == CalendarPermissionLevelType.Custom)
                    {
                        cfNewCalPermsionsSet.CalendarPermissions[cpint] = cfCurrentCalPermsionsSet.CalendarPermissions[cpint];
                    }
                    else
                    {
                        cfNewCalPermsionsSet.CalendarPermissions[cpint] = new CalendarPermissionType();
                        {
                            cfNewCalPermsionsSet.CalendarPermissions[cpint].UserId = cfCurrentCalPermsionsSet.CalendarPermissions[cpint].UserId;
                            cfNewCalPermsionsSet.CalendarPermissions[cpint].CalendarPermissionLevel = cfCurrentCalPermsionsSet.CalendarPermissions[cpint].CalendarPermissionLevel;
                        }
                    }
                }
                
            }


            CalendarFolderType cfUpdateCalFolder = new CalendarFolderType();
            cfUpdateCalFolder.PermissionSet = cfNewCalPermsionsSet;

            UpdateFolderType upUpdateFolderRequest = new UpdateFolderType();

            FolderChangeType fcFolderchanges = new FolderChangeType();

            FolderIdType cfFolderid = new FolderIdType();
            cfFolderid.Id = cfCurrentFolder.FolderId.Id;
            cfFolderid.ChangeKey = cfCurrentFolder.FolderId.ChangeKey;

            fcFolderchanges.Item = cfFolderid;

            SetFolderFieldType cpCalPerms = new SetFolderFieldType();
            PathToUnindexedFieldType cpFieldURI = new PathToUnindexedFieldType();
            cpFieldURI.FieldURI = UnindexedFieldURIType.folderPermissionSet;
            cpCalPerms.Item = cpFieldURI;
            cpCalPerms.Item1 = cfUpdateCalFolder;

            fcFolderchanges.Updates = new FolderChangeDescriptionType[1] { cpCalPerms };
            upUpdateFolderRequest.FolderChanges = new FolderChangeType[1] { fcFolderchanges };

            UpdateFolderResponseType ufUpdateFolderResponse = esb.UpdateFolder(upUpdateFolderRequest);
            if (ufUpdateFolderResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Success)
            {
                Console.WriteLine("Permissions Updated sucessfully");
            }
            else
            {
                // Handle Error

            }

        }
    }
}
