using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Security;
using System.Net;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using EWSNDRDigest.ews;

namespace EWSNDRDigest
{
    class Program
    {
        static void Main(string[] args)
        {
            ServicePointManager.ServerCertificateValidationCallback = delegate(Object obj, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors)
            {
                     return true;
            };
            ExchangeServiceBinding esb = new ExchangeServiceBinding();
            esb.RequestServerVersionValue = new RequestServerVersion();
            esb.RequestServerVersionValue.Version = ExchangeVersionType.Exchange2007_SP1;
            esb.Credentials = new NetworkCredential("userName", "password", "domain");
            esb.Url = @"https://servername/EWS/Exchange.asmx";
            String emMailboxEmailAddress = "user@domain.com.au";
            DistinguishedFolderIdType parentFolder = new DistinguishedFolderIdType();
            parentFolder.Id = DistinguishedFolderIdNameType.inbox;
            BaseFolderIdType[] biArray = new BaseFolderIdType[1] { parentFolder };
            List<ItemType> ndrs = GetNDRs(esb, biArray);
            String HtmlDigestTable = BuildDisgest(esb, emMailboxEmailAddress, ndrs);
            EmailAddressType[] emDigestRecp = new EmailAddressType[1];
            emDigestRecp[0] = new EmailAddressType();
            emDigestRecp[0].EmailAddress = "recipeint@mdomain.com.au";
            CheckOrigattachments(esb, ndrs);
            Console.WriteLine(SendMessage(esb, emDigestRecp, "NDR Digest", HtmlDigestTable));

 
        }
        static List<ItemType> GetNDRs(ExchangeServiceBinding esb, BaseFolderIdType[] biArray)
        {

            List<ItemType> intFiFolderItems = new List<ItemType>();
            try
            {

                BasePathToElementType[] beAdditionproperties = new BasePathToElementType[5];

                PathToExtendedFieldType osOriginalSenderEmail = new PathToExtendedFieldType();
                osOriginalSenderEmail.PropertyTag = "0x0067";
                osOriginalSenderEmail.PropertyType = MapiPropertyTypeType.String;

                PathToExtendedFieldType osOriginalSenderAdrType = new PathToExtendedFieldType();
                osOriginalSenderAdrType.PropertyTag = "0x0066";
                osOriginalSenderAdrType.PropertyType = MapiPropertyTypeType.String;

                PathToExtendedFieldType osOriginalSenderName = new PathToExtendedFieldType();
                osOriginalSenderName.PropertyTag = "0x005A";
                osOriginalSenderName.PropertyType = MapiPropertyTypeType.String;

                PathToExtendedFieldType osOriginalSubject = new PathToExtendedFieldType();
                osOriginalSubject.PropertyTag = "0x0049";
                osOriginalSubject.PropertyType = MapiPropertyTypeType.String;

                PathToExtendedFieldType osOriginalRecp = new PathToExtendedFieldType();
                osOriginalRecp.PropertyTag = "0x0074";
                osOriginalRecp.PropertyType = MapiPropertyTypeType.String;


                beAdditionproperties[0] = osOriginalSenderAdrType;
                beAdditionproperties[1] = osOriginalSenderEmail;
                beAdditionproperties[2] = osOriginalSenderName;
                beAdditionproperties[3] = osOriginalRecp;
                beAdditionproperties[4] = osOriginalSubject;

                try
                {
                    FindItemType fiFindItemRequest = new FindItemType();
                    fiFindItemRequest.ParentFolderIds = biArray;
                    fiFindItemRequest.Traversal = ItemQueryTraversalType.Shallow;
                    ItemResponseShapeType ipItemProperties = new ItemResponseShapeType();
                    ipItemProperties.BaseShape = DefaultShapeNamesType.AllProperties;
                    ipItemProperties.AdditionalProperties = beAdditionproperties;
                    fiFindItemRequest.ItemShape = ipItemProperties;
                    RestrictionType ffRestriction = new RestrictionType();

                    IsEqualToType ieToTypeClass = new IsEqualToType();
                    PathToUnindexedFieldType itItemType = new PathToUnindexedFieldType();
                    itItemType.FieldURI = UnindexedFieldURIType.itemItemClass;
                    ieToTypeClass.Item = itItemType;
                    FieldURIOrConstantType constantType = new FieldURIOrConstantType();
                    ConstantValueType constantValueType = new ConstantValueType();
                    constantValueType.Value = "REPORT.IPM.Note.NDR";
                    constantType.Item = constantValueType;
                    ieToTypeClass.Item = itItemType;
                    ieToTypeClass.FieldURIOrConstant = constantType;

                    IsEqualToType ieToTypeRead = new IsEqualToType();
                    PathToUnindexedFieldType rsReadStatus = new PathToUnindexedFieldType();
                    rsReadStatus.FieldURI = UnindexedFieldURIType.messageIsRead;
                    ieToTypeRead.Item = rsReadStatus;
                    FieldURIOrConstantType constantType1 = new FieldURIOrConstantType();
                    ConstantValueType constantValueType1 = new ConstantValueType();
                    constantValueType1.Value = "0";
                    constantType1.Item = constantValueType1;
                    ieToTypeRead.Item = rsReadStatus;
                    ieToTypeRead.FieldURIOrConstant = constantType1;

                    AndType raRestictionAnd = new AndType();
                    raRestictionAnd.Items = new SearchExpressionType[2];
                    raRestictionAnd.Items[0] = ieToTypeClass;
                    raRestictionAnd.Items[1] = ieToTypeRead;

                    ffRestriction.Item = raRestictionAnd;
                    fiFindItemRequest.Restriction = ffRestriction;

                    FindItemResponseType frFindItemResponse = esb.FindItem(fiFindItemRequest);
                    if (frFindItemResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Success)
                    {
                        foreach (FindItemResponseMessageType firmtMessage in frFindItemResponse.ResponseMessages.Items)
                        {
                            Console.WriteLine("Number of Items Found : " + firmtMessage.RootFolder.TotalItemsInView);
                            if (firmtMessage.RootFolder.TotalItemsInView > 0)
                            {
                                foreach (ItemType miMailboxItem in ((ArrayOfRealItemsType)firmtMessage.RootFolder.Item).Items)
                                {
                                    GetItemType giGetItem = new GetItemType();
                                    giGetItem.ItemIds = new BaseItemIdType[1] { miMailboxItem.ItemId };
                                    giGetItem.ItemShape = new ItemResponseShapeType();
                                    giGetItem.ItemShape.AdditionalProperties = beAdditionproperties;
                                    giGetItem.ItemShape.BaseShape = DefaultShapeNamesType.Default;
                                    giGetItem.ItemShape.BodyType = BodyTypeResponseType.Text;
                                    giGetItem.ItemShape.BodyTypeSpecified = true;
                                    GetItemResponseType giResponse = esb.GetItem(giGetItem);
                                    if (giResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Error)
                                    {
                                        Console.WriteLine("Error Occured");
                                        Console.WriteLine(giResponse.ResponseMessages.Items[0].MessageText);
                                    }
                                    else
                                    {
                                        ItemInfoResponseMessageType rmResponseMessage = giResponse.ResponseMessages.Items[0] as ItemInfoResponseMessageType;
                                        intFiFolderItems.Add(rmResponseMessage.Items.Items[0]);
                                        // Create an object of update item type
                                        UpdateItemType updateItemType = new UpdateItemType();
                                        updateItemType.ConflictResolution = ConflictResolutionType.AlwaysOverwrite;
                                        updateItemType.MessageDisposition = MessageDispositionType.SaveOnly;
                                        updateItemType.MessageDispositionSpecified = true;
                                        updateItemType.ItemChanges = new ItemChangeType[1];
                                        ItemChangeType changeType = new ItemChangeType();

                                        changeType.Item = rmResponseMessage.Items.Items[0].ItemId;
                                        changeType.Updates = new ItemChangeDescriptionType[1];

                                        // Create a set item field to identify the type of update
                                        SetItemFieldType setItemEmail = new SetItemFieldType();

                                        PathToUnindexedFieldType epExPath = new PathToUnindexedFieldType();
                                        epExPath.FieldURI = UnindexedFieldURIType.messageIsRead;

                                        MessageType mtMessage = new MessageType();
                                        mtMessage.IsRead = true;
                                        mtMessage.IsReadSpecified = true;

                                        setItemEmail.Item = epExPath;
                                        setItemEmail.Item1 = mtMessage;

                                        changeType.Updates[0] = setItemEmail;
                                        updateItemType.ItemChanges[0] = changeType;
                                        // Send the update item request and receive the response
                                        UpdateItemResponseType updateItemResponse = esb.UpdateItem(updateItemType);
                                        if (updateItemResponse.ResponseMessages.Items[0].ResponseClass == ResponseClassType.Success)
                                        {
                                            Console.WriteLine("Update Successful");
                                        }
                                        else
                                        {
                                            Console.WriteLine(updateItemResponse.ResponseMessages.Items[0].MessageText.ToString());
                                        }

                                    }

                                }
                            }


                        }
                    }
                    else
                    {
                        Console.WriteLine("Error During FindItem request : " + frFindItemResponse.ResponseMessages.Items[0].MessageText.ToString());
                    }

                }
                catch (Exception exException)
                {
                    Console.WriteLine(exException.ToString());
                    // return exException.ToString();
                }
                return intFiFolderItems;

            }
            catch (Exception exException)
            {
                Console.WriteLine(exException.ToString());
                // return exException.ToString();
            }
            return intFiFolderItems;

        }
        static String BuildDisgest(ExchangeServiceBinding esb,String emMailboxEmailAddress,List<ItemType> NDRs) {
            String rpReport =  "<table><tr bgcolor=\"#95aedc\">" + "\r\n"
             + "<td align=\"center\" style=\"width:15%;\" ><b>Recieved</b></td>" + "\r\n"
             + "<td align=\"center\" style=\"width:20%;\" ><b>From</b></td>" + "\r\n"
             + "<td align=\"center\" style=\"width:20%;\" ><b>To</b></td>" + "\r\n"
             + "<td align=\"center\" style=\"width:20%;\" ><b>Subject</b></td>" + "\r\n"
             + "<td align=\"center\" style=\"width:20%;\"><b>NDR Reason</b></td>" + "\r\n"
             + "<td align=\"center\" style=\"width:5%;\" ><b>Size</b></td>" + "\r\n"
             + "</tr>" + "\r\n";
            foreach (ItemType ndr in NDRs)
            {
                String fsFromString = "";
                String tsToString  = "";
                if (ndr.ExtendedProperty[0].Item.ToString() != "SMTP"){
                    fsFromString = ndr.ExtendedProperty[2].Item.ToString();
                }
	            else{
                    fsFromString = ndr.ExtendedProperty[1].Item.ToString();
                }
                if (fsFromString.Length > 30) { fsFromString = fsFromString.Substring(0, 30); }
                if (ndr.ExtendedProperty[3].Item.ToString().Length > 30) { tsToString = ndr.ExtendedProperty[3].Item.ToString().Substring(0, 30); }
                else {tsToString = ndr.ExtendedProperty[3].Item.ToString(); }
                int ndrReasonStart = ndr.Body.Value.IndexOf('#') + 1;
                int ndrReasonEnd = ndr.Body.Value.IndexOf("##") - 1;
                String ndrReason = ndr.Body.Value.Substring(ndrReasonStart, (ndrReasonEnd - ndrReasonStart));
                rpReport = rpReport + "  <tr>"   + "\r\n"
	            + "<td>" + ndr.DateTimeSent.ToLocalTime().ToString() + "</td>"   + "\r\n"
	            + "<td>" +  fsFromString + "</td>"   + "\r\n"
	            + "<td>" + tsToString + "</td>"   + "\r\n"
	            + "<td><a href=\"outlook:" + EWSConvertid(esb,emMailboxEmailAddress,ndr.ItemId,IdFormatType.HexEntryId) + "\">" + ndr.ExtendedProperty[4].Item.ToString() + "</td>"  +  "\r\n"
                + "<td>" + ndrReason + "</td>" + "\r\n"
                + "<td>" +  (ndr.Size/1024).ToString("0.00") + "</td>"  +  "\r\n"
	            + "</tr>"  +  "\r\n";
            }
            rpReport = rpReport + "</table>"; 

            return rpReport;
        }
        static String EWSConvertid(ExchangeServiceBinding esb,String emMailboxEmailAddress,ItemIdType iiItemId, IdFormatType dfDestinationformat)
        {
            String riReturnID = "";
            ConvertIdType ciConvertIDRequest = new ConvertIdType();
            ciConvertIDRequest.SourceIds = new AlternateIdType[1];
            ciConvertIDRequest.SourceIds[0] = new AlternateIdType();
            ciConvertIDRequest.SourceIds[0].Format = IdFormatType.EwsId;
            (ciConvertIDRequest.SourceIds[0] as AlternateIdType).Id = iiItemId.Id;
            (ciConvertIDRequest.SourceIds[0] as AlternateIdType).Mailbox = emMailboxEmailAddress;
            ciConvertIDRequest.DestinationFormat = dfDestinationformat;

            try
            {
                ConvertIdResponseType response = esb.ConvertId(ciConvertIDRequest);
                ArrayOfResponseMessagesType aormt = response.ResponseMessages;
                ResponseMessageType[] rmta = aormt.Items;
                foreach (ConvertIdResponseMessageType resp in rmta)
                {
                    if (resp.ResponseClass == ResponseClassType.Success)
                    {
                        ConvertIdResponseMessageType cirmt = (resp as ConvertIdResponseMessageType);
                        AlternateIdType aiID = (cirmt.AlternateId as AlternateIdType);
                        riReturnID = aiID.Id.ToString();

                    }
                    else if (resp.ResponseClass == ResponseClassType.Error)
                    {
                        Console.WriteLine("Error: " + resp.MessageText);
                    }
                }
            }
            catch (Exception e)
            {

                Console.WriteLine(e.Message);
            }
            return riReturnID;
        }
        static String SendMessage(ExchangeServiceBinding esb,EmailAddressType[] ToAddress, String sbSubject, String bdBody)
        {
            String MessageStatus = "";
            try
            {
                MessageType msMessage = new MessageType();
                msMessage.ToRecipients = ToAddress;
                msMessage.Subject = sbSubject;
                msMessage.Sensitivity = SensitivityChoicesType.Normal;
                msMessage.Body = new BodyType();
                msMessage.Body.BodyType1 = BodyTypeType.HTML;
                msMessage.Body.Value = bdBody;

                CreateItemType ciCreateItem = new CreateItemType();
                ciCreateItem.MessageDisposition = MessageDispositionType.SendAndSaveCopy;
                ciCreateItem.MessageDispositionSpecified = true;

                DistinguishedFolderIdType siFolder = new DistinguishedFolderIdType();
                siFolder.Id = DistinguishedFolderIdNameType.sentitems;

                TargetFolderIdType tfTargetFolder = new TargetFolderIdType();
                tfTargetFolder.Item = siFolder;
                ciCreateItem.SavedItemFolderId = tfTargetFolder;

                ciCreateItem.Items = new NonEmptyArrayOfAllItemsType();
                ciCreateItem.Items.Items = new ItemType[1] { msMessage };
                CreateItemResponseType rsResponse = esb.CreateItem(ciCreateItem);
                ResponseMessageType[] msSentResponse = rsResponse.ResponseMessages.Items;
                if (msSentResponse[0].ResponseClass == ResponseClassType.Success)
                {
                    MessageStatus = "Message Sent";
                }
                else
                {
                    Console.WriteLine("Error Occured");
                    Console.WriteLine(msSentResponse[0].MessageText.ToString());
                }
            }
            catch (Exception exException)
            {
                Console.WriteLine(exException.ToString());
                // return exException.ToString();
            }
            return MessageStatus;

        }
        static void CheckOrigattachments(ExchangeServiceBinding esb, List<ItemType> NDRs) {
            foreach (ItemType ndr in NDRs)
            {
                foreach (AttachmentType atAttach in ndr.Attachments)
                {
                    if (atAttach.ContentType == "message/rfc822")
                    {
                        MessageType omOrigMessage = null;
                        GetAttachmentType gaGetAttachment = new GetAttachmentType();
                        AttachmentIdType[] atArray = new AttachmentIdType[1];
                        atArray[0] = atAttach.AttachmentId;
                        gaGetAttachment.AttachmentShape = new AttachmentResponseShapeType();
                        gaGetAttachment.AttachmentShape.IncludeMimeContent = true;
                        gaGetAttachment.AttachmentShape.IncludeMimeContentSpecified = true;
                        gaGetAttachment.AttachmentIds = atArray;
                        GetAttachmentResponseType gaGetAttachmentResponse = esb.GetAttachment(gaGetAttachment);
                        foreach (AttachmentInfoResponseMessageType atAttachmentResponse in gaGetAttachmentResponse.ResponseMessages.Items)
                        {
                            if (atAttachmentResponse.ResponseClass == ResponseClassType.Success)
                            {
                                ItemAttachmentType itIemAttachmentType = atAttachmentResponse.Attachments[0] as ItemAttachmentType;
                                omOrigMessage = (MessageType)itIemAttachmentType.Item;
                            }
                            else
                            {
                                //Deal with error
                            }
                        }
                        if (omOrigMessage.HasAttachments == true)
                        {
                            foreach (AttachmentType orAttach in omOrigMessage.Attachments) {
                                GetAttachmentType orGetAttachment = new GetAttachmentType();
                                AttachmentIdType[] orArray = new AttachmentIdType[1];
                                orArray[0] = orAttach.AttachmentId;
                                orGetAttachment.AttachmentShape = new AttachmentResponseShapeType();
                                orGetAttachment.AttachmentShape.IncludeMimeContent = true;
                                orGetAttachment.AttachmentShape.IncludeMimeContentSpecified = true;
                                orGetAttachment.AttachmentIds = orArray;
                                GetAttachmentResponseType orGetAttachmentResponse = esb.GetAttachment(orGetAttachment);
                                foreach (AttachmentInfoResponseMessageType atAttachmentResponse in orGetAttachmentResponse.ResponseMessages.Items)
                                {
                                    if (atAttachmentResponse.ResponseClass == ResponseClassType.Success)
                                    {
                                        if (atAttachmentResponse.Attachments[0] is FileAttachmentType)
                                        {
                                            FileAttachmentType ftFileAttach = atAttachmentResponse.Attachments[0] as FileAttachmentType;
                                            FileStream fsSaveFile = new FileStream(@"c:\temp\" + ftFileAttach.Name, FileMode.Create);
                                            fsSaveFile.Write(ftFileAttach.Content, 0, ftFileAttach.Content.Length);
                                            fsSaveFile.Flush();
                                            fsSaveFile.Close();
                                        }
                                    }
                                    else
                                    {
                                        //Deal with error
                                    }
                                }                         
                            
                            }
                        }

                    }
                }             
                    
                           
                
            }
        
        }
    }


}
