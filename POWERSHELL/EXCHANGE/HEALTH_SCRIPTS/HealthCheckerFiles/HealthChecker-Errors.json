[
    {
        "Exception":  {
                          "ErrorRecord":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.ArrayList.ArrayListEnumeratorSimple.MoveNext()\r\n   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)",
                          "TargetSite":  "Boolean MoveNext(System.Management.Automation.ExecutionContext, System.Management.Automation.Language.IScriptExtent, System.Collections.IEnumerator)",
                          "StackTrace":  "   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)\r\n   at System.Management.Automation.Internal.Pipe.Retrieve()\r\n   at System.Management.Automation.CommandProcessor.Read()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessorBase.DoExecute()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  {
                             "Current":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute.."
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "System.Collections.ArrayList+ArrayListEnumeratorSimple",
                             "TargetType":  "ArrayListEnumeratorSimple"
                         },
        "FullyQualifiedErrorId":  "BadEnumeration",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5370,
                               "OffsetInLine":  13,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "            $Error |\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5370 char:13\r\n+             $Error |\r\n+             ~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5370\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "You cannot call a method on a null-valued expression.",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "You cannot call a method on a null-valued expression.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Object, System.Object)",
                          "StackTrace":  "   at CallSite.Target(Closure , CallSite , Object , Object )\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "Anonymously Hosted DynamicMethods Assembly",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "InvokeMethodOnNull",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5375,
                               "OffsetInLine":  40,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "                        Where-Object { $_.Equals($currentError) }\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5375 char:40\r\n+                         Where-Object { $_.Equals($currentError) }\r\n+                                        ~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5375\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5374\r\nat Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5370\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.ArrayList.ArrayListEnumeratorSimple.MoveNext()\r\n   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)",
                          "TargetSite":  "Boolean MoveNext(System.Management.Automation.ExecutionContext, System.Management.Automation.Language.IScriptExtent, System.Collections.IEnumerator)",
                          "StackTrace":  "   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)\r\n   at System.Management.Automation.Internal.Pipe.Retrieve()\r\n   at System.Management.Automation.CommandProcessor.Read()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessorBase.DoExecute()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  {
                             "Current":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null."
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "System.Collections.ArrayList+ArrayListEnumeratorSimple",
                             "TargetType":  "ArrayListEnumeratorSimple"
                         },
        "FullyQualifiedErrorId":  "BadEnumeration",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5350,
                               "OffsetInLine":  13,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "            $Error |\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5350 char:13\r\n+             $Error |\r\n+             ~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5350\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "You cannot call a method on a null-valued expression.",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "You cannot call a method on a null-valued expression.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Object, System.Object)",
                          "StackTrace":  "   at CallSite.Target(Closure , CallSite , Object , Object )\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "Anonymously Hosted DynamicMethods Assembly",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "InvokeMethodOnNull",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5355,
                               "OffsetInLine":  40,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "                        Where-Object { $_.Equals($currentError) }\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5355 char:40\r\n+                         Where-Object { $_.Equals($currentError) }\r\n+                                        ~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5355\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5354\r\nat Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5350\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "ParameterName":  "FilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationErrorNullNotAllowed",
                          "Line":  6394,
                          "Offset":  25,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Out-File",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.OutFileCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Out-File",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  6394,
                               "OffsetInLine":  25,
                               "HistoryId":  91,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "    $message | Out-File ($OutputFullPath) -Append\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:6394 char:25\r\n+     $message | Out-File ($OutputFullPath) -Append\r\n+                         ~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Red, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 6394\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5390\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "ParameterName":  "FilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationErrorNullNotAllowed",
                          "Line":  6412,
                          "Offset":  25,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Out-File",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.OutFileCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Out-File",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  6412,
                               "OffsetInLine":  25,
                               "HistoryId":  91,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "    $message | Out-File ($OutputFullPath) -Append\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:6412 char:25\r\n+     $message | Out-File ($OutputFullPath) -Append\r\n+                         ~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Grey, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 6412\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5345\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "ParameterName":  "FilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationErrorNullNotAllowed",
                          "Line":  6412,
                          "Offset":  25,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Out-File",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.OutFileCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Out-File",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  6412,
                               "OffsetInLine":  25,
                               "HistoryId":  91,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "    $message | Out-File ($OutputFullPath) -Append\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:6412 char:25\r\n+     $message | Out-File ($OutputFullPath) -Append\r\n+                         ~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Grey, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 6412\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5345\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot validate argument on parameter \u0027OutputFilePath\u0027. The \" -not $_.ToString().EndsWith(\u0027\\\u0027) \" validation script for the argument with value \"E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\\" did not return a result of True. Determine why the validation script failed, and then try the command again.",
                          "ParameterName":  "OutputFilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  "string",
                          "ErrorId":  "ParameterArgumentValidationError",
                          "Line":  1,
                          "Offset":  55,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot validate argument on parameter \u0027OutputFilePath\u0027. The \" -not $_.ToString().EndsWith(\u0027\\\u0027) \" validation script for the argument with value \"E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\\" did not return a result of True. Determine why the validation script failed, and then try the command again.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.Management.Automation.ValidationMetadataException: The \" -not $_.ToString().EndsWith(\u0027\\\u0027) \" validation script for the argument with value \"E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\\" did not return a result of True. Determine why the validation script failed, and then try the command again.\r\n   at System.Management.Automation.ValidateScriptAttribute.ValidateElement(Object element)\r\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
                          "TargetSite":  "Boolean BindParameter(System.Management.Automation.CommandParameterInternal, System.Management.Automation.CompiledCommandParameter, System.Management.Automation.ParameterBindingFlags)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameter(CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameter(UInt32 parameterSets, CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameters(UInt32 parameterSets, Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "HealthChecker.ps1",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationError,HealthChecker.ps1",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "HealthChecker.ps1",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  55,
                               "HistoryId":  90,
                               "ScriptName":  "",
                               "Line":  ".\\HealthChecker.ps1 -Server MWTEXCH01 -OutputFilePath E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\ ",
                               "PositionMessage":  "At line:1 char:55\r\n+ ... putFilePath E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\ ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot validate argument on parameter \u0027OutputFilePath\u0027. The \" -not $_.ToString().EndsWith(\u0027\\\u0027) \" validation script for the argument with value \".\\\" did not return a result of True. Determine why the validation script failed, and then try the command again.",
                          "ParameterName":  "OutputFilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  "string",
                          "ErrorId":  "ParameterArgumentValidationError",
                          "Line":  1,
                          "Offset":  55,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot validate argument on parameter \u0027OutputFilePath\u0027. The \" -not $_.ToString().EndsWith(\u0027\\\u0027) \" validation script for the argument with value \".\\\" did not return a result of True. Determine why the validation script failed, and then try the command again.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.Management.Automation.ValidationMetadataException: The \" -not $_.ToString().EndsWith(\u0027\\\u0027) \" validation script for the argument with value \".\\\" did not return a result of True. Determine why the validation script failed, and then try the command again.\r\n   at System.Management.Automation.ValidateScriptAttribute.ValidateElement(Object element)\r\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
                          "TargetSite":  "Boolean BindParameter(System.Management.Automation.CommandParameterInternal, System.Management.Automation.CompiledCommandParameter, System.Management.Automation.ParameterBindingFlags)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameter(CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameter(UInt32 parameterSets, CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameters(UInt32 parameterSets, Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "HealthChecker.ps1",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationError,HealthChecker.ps1",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "HealthChecker.ps1",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  55,
                               "HistoryId":  89,
                               "ScriptName":  "",
                               "Line":  ".\\HealthChecker.ps1 -Server MWTEXCH01 -OutputFilePath .\\ ",
                               "PositionMessage":  "At line:1 char:55\r\n+ .\\HealthChecker.ps1 -Server MWTEXCH01 -OutputFilePath .\\\r\n+                                                       ~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.ArrayList.ArrayListEnumeratorSimple.MoveNext()\r\n   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)",
                          "TargetSite":  "Boolean MoveNext(System.Management.Automation.ExecutionContext, System.Management.Automation.Language.IScriptExtent, System.Collections.IEnumerator)",
                          "StackTrace":  "   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)\r\n   at System.Management.Automation.Internal.Pipe.Retrieve()\r\n   at System.Management.Automation.CommandProcessor.Read()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessorBase.DoExecute()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  {
                             "Current":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute.."
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "System.Collections.ArrayList+ArrayListEnumeratorSimple",
                             "TargetType":  "ArrayListEnumeratorSimple"
                         },
        "FullyQualifiedErrorId":  "BadEnumeration",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5370,
                               "OffsetInLine":  13,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "            $Error |\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5370 char:13\r\n+             $Error |\r\n+             ~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5370\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "You cannot call a method on a null-valued expression.",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "You cannot call a method on a null-valued expression.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Object, System.Object)",
                          "StackTrace":  "   at CallSite.Target(Closure , CallSite , Object , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "Anonymously Hosted DynamicMethods Assembly",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "InvokeMethodOnNull",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5375,
                               "OffsetInLine":  40,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "                        Where-Object { $_.Equals($currentError) }\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5375 char:40\r\n+                         Where-Object { $_.Equals($currentError) }\r\n+                                        ~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5375\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5374\r\nat Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5370\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "An error occurred while enumerating through a collection: Collection was modified; enumeration operation may not execute..",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.ArrayList.ArrayListEnumeratorSimple.MoveNext()\r\n   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)",
                          "TargetSite":  "Boolean MoveNext(System.Management.Automation.ExecutionContext, System.Management.Automation.Language.IScriptExtent, System.Collections.IEnumerator)",
                          "StackTrace":  "   at System.Management.Automation.ParserOps.MoveNext(ExecutionContext context, IScriptExtent errorPosition, IEnumerator enumerator)\r\n   at System.Management.Automation.Internal.Pipe.Retrieve()\r\n   at System.Management.Automation.CommandProcessor.Read()\r\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\r\n   at System.Management.Automation.CommandProcessorBase.DoExecute()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  {
                             "Current":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null."
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "System.Collections.ArrayList+ArrayListEnumeratorSimple",
                             "TargetType":  "ArrayListEnumeratorSimple"
                         },
        "FullyQualifiedErrorId":  "BadEnumeration",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5350,
                               "OffsetInLine":  13,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "            $Error |\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5350 char:13\r\n+             $Error |\r\n+             ~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5350\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "You cannot call a method on a null-valued expression.",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "You cannot call a method on a null-valued expression.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Object CallSite.Target(System.Runtime.CompilerServices.Closure, System.Runtime.CompilerServices.CallSite, System.Object, System.Object)",
                          "StackTrace":  "   at CallSite.Target(Closure , CallSite , Object , Object )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "Anonymously Hosted DynamicMethods Assembly",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "",
                             "Reason":  "RuntimeException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "InvokeMethodOnNull",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  5355,
                               "OffsetInLine":  40,
                               "HistoryId":  -1,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "                        Where-Object { $_.Equals($currentError) }\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:5355 char:40\r\n+                         Where-Object { $_.Equals($currentError) }\r\n+                                        ~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5355\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5354\r\nat Write-Errors, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5350\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5392\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "ParameterName":  "FilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationErrorNullNotAllowed",
                          "Line":  6394,
                          "Offset":  25,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Out-File",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.OutFileCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Out-File",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  6394,
                               "OffsetInLine":  25,
                               "HistoryId":  88,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "    $message | Out-File ($OutputFullPath) -Append\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:6394 char:25\r\n+     $message | Out-File ($OutputFullPath) -Append\r\n+                         ~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Red, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 6394\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5390\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "ParameterName":  "FilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationErrorNullNotAllowed",
                          "Line":  6412,
                          "Offset":  25,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Out-File",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.OutFileCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Out-File",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  6412,
                               "OffsetInLine":  25,
                               "HistoryId":  88,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "    $message | Out-File ($OutputFullPath) -Append\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:6412 char:25\r\n+     $message | Out-File ($OutputFullPath) -Append\r\n+                         ~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Grey, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 6412\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5345\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "ParameterName":  "FilePath",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationErrorNullNotAllowed",
                          "Line":  6412,
                          "Offset":  25,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot bind argument to parameter \u0027FilePath\u0027 because it is null.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Out-File",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.OutFileCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Out-File",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  6412,
                               "OffsetInLine":  25,
                               "HistoryId":  88,
                               "ScriptName":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "Line":  "    $message | Out-File ($OutputFullPath) -Append\r\n",
                               "PositionMessage":  "At E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1:6412 char:25\r\n+     $message | Out-File ($OutputFullPath) -Append\r\n+                         ~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles",
                               "PSCommandPath":  "E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1",
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Write-Grey, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 6412\r\nat Get-ErrorsThatOccurred, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 5345\r\nat \u003cScriptBlock\u003e, E:\\PowerShell\\EXCHANGE\\HEALTH_SCRIPTS\\HealthCheckerFiles\\HealthChecker.ps1: line 7509\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorCode":  -2147023174,
                          "Message":  "Check the spelling of the cluster name. Otherwise, there might be a problem with your network. Make sure the cluster nodes are turned on and connected to the network or contact your network administrator.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "Microsoft.FailoverClusters.PowerShell.ClusterCmdletException: The RPC server is unavailable",
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  27,
                             "Activity":  "Get-ClusterNode",
                             "Reason":  "ClusterCmdletException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ClusterRpcConnection,Microsoft.FailoverClusters.PowerShell.GetNodeCommand",
        "ErrorDetails":  {
                             "Message":  "Check the spelling of the cluster name. Otherwise, there might be a problem with your network. Make sure the cluster nodes are turned on and connected to the network or contact your network administrator.\n    The RPC server is unavailable",
                             "RecommendedAction":  ""
                         },
        "InvocationInfo":  {
                               "MyCommand":  "Get-ClusterNode",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  82,
                               "ScriptName":  "",
                               "Line":  "Get-ClusterNode -Cluster DAG1",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ClusterNode -Cluster DAG1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ClusterNode",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorCode":  -2147023143,
                          "Message":  "The cluster service is not running.  Make sure that the service is running on all nodes in the cluster.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "Microsoft.FailoverClusters.PowerShell.ClusterCmdletException: There are no more endpoints available from the endpoint mapper",
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  27,
                             "Activity":  "Get-ClusterNode",
                             "Reason":  "ClusterCmdletException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ClusterEndpointNotRegistered,Microsoft.FailoverClusters.PowerShell.GetNodeCommand",
        "ErrorDetails":  {
                             "Message":  "The cluster service is not running.  Make sure that the service is running on all nodes in the cluster.\n    There are no more endpoints available from the endpoint mapper",
                             "RecommendedAction":  ""
                         },
        "InvocationInfo":  {
                               "MyCommand":  "Get-ClusterNode",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  81,
                               "ScriptName":  "",
                               "Line":  "Get-ClusterNode",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ClusterNode\r\n+ ~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ClusterNode",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Could not find a part of the path \u0027D:\\Incidents\\Hyper_V_2021-09-24_15_09_36_4fqxzvkn.json\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void WinIOError(Int32, System.String)",
                          "StackTrace":  "   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at Microsoft.PowerShell.Commands.FileSystemContentReaderWriter.CreateStreams(String filePath, String streamName, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, Encoding fileEncoding)\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.GetContentWriter(String path)",
                          "HelpLink":  null,
                          "Source":  "mscorlib",
                          "HResult":  -2147024893
                      },
        "TargetObject":  "D:\\Incidents\\Hyper_V_2021-09-24_15_09_36_4fqxzvkn.json",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Set-Content",
                             "Reason":  "DirectoryNotFoundException",
                             "TargetName":  "D:\\Incidents\\Hyper_V_2021-09-24_15_09_36_4fqxzvkn.json",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "GetContentWriterDirectoryNotFoundError,Microsoft.PowerShell.Commands.SetContentCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Set-Content",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  155,
                               "OffsetInLine":  19,
                               "HistoryId":  61,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1",
                               "Line":  "        $Output | Set-Content -LiteralPath $FilePath\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1:155 char:19\r\n+         $Output | Set-Content -LiteralPath $FilePath\r\n+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1",
                               "InvocationName":  "Set-Content",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at New-StatusimoEvent, C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1: line 155\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 20",
        "PipelineIterationInfo":  [
                                      1,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Could not find a part of the path \u0027D:\\Incidents\\Active_Directory_2021-09-24_15_09_36_e2updc4p.json\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void WinIOError(Int32, System.String)",
                          "StackTrace":  "   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at Microsoft.PowerShell.Commands.FileSystemContentReaderWriter.CreateStreams(String filePath, String streamName, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, Encoding fileEncoding)\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.GetContentWriter(String path)",
                          "HelpLink":  null,
                          "Source":  "mscorlib",
                          "HResult":  -2147024893
                      },
        "TargetObject":  "D:\\Incidents\\Active_Directory_2021-09-24_15_09_36_e2updc4p.json",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Set-Content",
                             "Reason":  "DirectoryNotFoundException",
                             "TargetName":  "D:\\Incidents\\Active_Directory_2021-09-24_15_09_36_e2updc4p.json",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "GetContentWriterDirectoryNotFoundError,Microsoft.PowerShell.Commands.SetContentCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Set-Content",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  155,
                               "OffsetInLine":  19,
                               "HistoryId":  61,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1",
                               "Line":  "        $Output | Set-Content -LiteralPath $FilePath\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1:155 char:19\r\n+         $Output | Set-Content -LiteralPath $FilePath\r\n+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1",
                               "InvocationName":  "Set-Content",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at New-StatusimoEvent, C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1: line 155\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 19",
        "PipelineIterationInfo":  [
                                      1,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Could not find a part of the path \u0027D:\\Incidents\\Exchange_2021-09-24_15_09_36_3nmlemxc.json\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void WinIOError(Int32, System.String)",
                          "StackTrace":  "   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at Microsoft.PowerShell.Commands.FileSystemContentReaderWriter.CreateStreams(String filePath, String streamName, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, Encoding fileEncoding)\r\n   at Microsoft.PowerShell.Commands.FileSystemProvider.GetContentWriter(String path)",
                          "HelpLink":  null,
                          "Source":  "mscorlib",
                          "HResult":  -2147024893
                      },
        "TargetObject":  "D:\\Incidents\\Exchange_2021-09-24_15_09_36_3nmlemxc.json",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Set-Content",
                             "Reason":  "DirectoryNotFoundException",
                             "TargetName":  "D:\\Incidents\\Exchange_2021-09-24_15_09_36_3nmlemxc.json",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "GetContentWriterDirectoryNotFoundError,Microsoft.PowerShell.Commands.SetContentCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Set-Content",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  155,
                               "OffsetInLine":  19,
                               "HistoryId":  61,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1",
                               "Line":  "        $Output | Set-Content -LiteralPath $FilePath\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1:155 char:19\r\n+         $Output | Set-Content -LiteralPath $FilePath\r\n+                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1",
                               "InvocationName":  "Set-Content",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at New-StatusimoEvent, C:\\Program Files\\WindowsPowerShell\\Modules\\Statusimo\\0.6\\Statusimo.psm1: line 155\r\nat \u003cScriptBlock\u003e, \u003cNo file\u003e: line 10",
        "PipelineIterationInfo":  [
                                      1,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot process argument transformation on parameter \u0027TypesRequired\u0027. Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory[]\". Error: \"Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory\". Error: \"Unable to match the identifier name * to a valid enumerator name. Specify one of the following enumerator names and try again:\r\nForestInformation, ForestFSMO, ForestGlobalCatalogs, ForestOptionalFeatures, ForestUPNSuffixes, ForestSPNSuffixes, ForestSites, ForestSites1, ForestSites2, ForestSubnets, ForestSubnets1, ForestSubnets2, ForestSiteLinks, ForestDomainControllers, ForestRootDSE, ForestSchemaPropertiesUsers, ForestSchemaPropertiesComputers, ForestReplication, DomainRootDSE, DomainRIDs, DomainAuthenticationPolicies, DomainAuthenticationPolicySilos, DomainCentralAccessPolicies, DomainCentralAccessRules, DomainClaimTransformPolicies, DomainClaimTypes, DomainFineGrainedPolicies, DomainFineGrainedPoliciesUsers, DomainFineGrainedPoliciesUsersExtended, DomainGUIDS, DomainDNSSRV, DomainDNSA, DomainInformation, DomainControllers, DomainFSMO, DomainDefaultPasswordPolicy, DomainGroupPolicies, DomainGroupPoliciesDetails, DomainGroupPoliciesACL, DomainOrganizationalUnits, DomainOrganizationalUnitsBasicACL, DomainOrganizationalUnitsExtendedACL, DomainContainers, DomainTrustsClean, DomainTrusts, DomainBitlocker, DomainLAPS, DomainGroupsFullList, DomainGroups, DomainGroupsMembers, DomainGroupsMembersRecursive, DomainGroupsSpecial, DomainGroupsSpecialMembers, DomainGroupsSpecialMembersRecursive, DomainGroupsPriviliged, DomainGroupsPriviligedMembers, DomainGroupsPriviligedMembersRecursive, DomainUsersFullList, DomainUsers, DomainUsersCount, DomainUsersAll, DomainUsersSystemAccounts, DomainUsersNeverExpiring, DomainUsersNeverExpiringInclDisabled, DomainUsersExpiredInclDisabled, DomainUsersExpiredExclDisabled, DomainAdministrators, DomainAdministratorsRecursive, DomainEnterpriseAdministrators, DomainEnterpriseAdministratorsRecursive, DomainComputersFullList, DomainComputersAll, DomainComputersAllCount, DomainComputers, DomainComputersCount, DomainServers, DomainServersCount, DomainComputersUnknown, DomainComputersUnknownCount, DomainPasswordDataUsers, DomainPasswordDataPasswords, DomainPasswordDataPasswordsHashes, DomainPasswordClearTextPassword, DomainPasswordClearTextPasswordEnabled, DomainPasswordClearTextPasswordDisabled, DomainPasswordLMHash, DomainPasswordEmptyPassword, DomainPasswordWeakPassword, DomainPasswordWeakPasswordEnabled, DomainPasswordWeakPasswordDisabled, DomainPasswordWeakPasswordList, DomainPasswordDefaultComputerPassword, DomainPasswordPasswordNotRequired, DomainPasswordPasswordNeverExpires, DomainPasswordAESKeysMissing, DomainPasswordPreAuthNotRequired, DomainPasswordDESEncryptionOnly, DomainPasswordDelegatableAdmins, DomainPasswordDuplicatePasswordGroups, DomainPasswordHashesWeakPassword, DomainPasswordHashesWeakPasswordEnabled, DomainPasswordHashesWeakPasswordDisabled, DomainPasswordStats\"\"",
                          "ParameterName":  "TypesRequired",
                          "ParameterType":  "PSWinDocumentation.ActiveDirectory[]",
                          "TypeSpecified":  "string",
                          "ErrorId":  "ParameterArgumentTransformationError",
                          "Line":  1,
                          "Offset":  38,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot process argument transformation on parameter \u0027TypesRequired\u0027. Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory[]\". Error: \"Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory\". Error: \"Unable to match the identifier name * to a valid enumerator name. Specify one of the following enumerator names and try again:\r\nForestInformation, ForestFSMO, ForestGlobalCatalogs, ForestOptionalFeatures, ForestUPNSuffixes, ForestSPNSuffixes, ForestSites, ForestSites1, ForestSites2, ForestSubnets, ForestSubnets1, ForestSubnets2, ForestSiteLinks, ForestDomainControllers, ForestRootDSE, ForestSchemaPropertiesUsers, ForestSchemaPropertiesComputers, ForestReplication, DomainRootDSE, DomainRIDs, DomainAuthenticationPolicies, DomainAuthenticationPolicySilos, DomainCentralAccessPolicies, DomainCentralAccessRules, DomainClaimTransformPolicies, DomainClaimTypes, DomainFineGrainedPolicies, DomainFineGrainedPoliciesUsers, DomainFineGrainedPoliciesUsersExtended, DomainGUIDS, DomainDNSSRV, DomainDNSA, DomainInformation, DomainControllers, DomainFSMO, DomainDefaultPasswordPolicy, DomainGroupPolicies, DomainGroupPoliciesDetails, DomainGroupPoliciesACL, DomainOrganizationalUnits, DomainOrganizationalUnitsBasicACL, DomainOrganizationalUnitsExtendedACL, DomainContainers, DomainTrustsClean, DomainTrusts, DomainBitlocker, DomainLAPS, DomainGroupsFullList, DomainGroups, DomainGroupsMembers, DomainGroupsMembersRecursive, DomainGroupsSpecial, DomainGroupsSpecialMembers, DomainGroupsSpecialMembersRecursive, DomainGroupsPriviliged, DomainGroupsPriviligedMembers, DomainGroupsPriviligedMembersRecursive, DomainUsersFullList, DomainUsers, DomainUsersCount, DomainUsersAll, DomainUsersSystemAccounts, DomainUsersNeverExpiring, DomainUsersNeverExpiringInclDisabled, DomainUsersExpiredInclDisabled, DomainUsersExpiredExclDisabled, DomainAdministrators, DomainAdministratorsRecursive, DomainEnterpriseAdministrators, DomainEnterpriseAdministratorsRecursive, DomainComputersFullList, DomainComputersAll, DomainComputersAllCount, DomainComputers, DomainComputersCount, DomainServers, DomainServersCount, DomainComputersUnknown, DomainComputersUnknownCount, DomainPasswordDataUsers, DomainPasswordDataPasswords, DomainPasswordDataPasswordsHashes, DomainPasswordClearTextPassword, DomainPasswordClearTextPasswordEnabled, DomainPasswordClearTextPasswordDisabled, DomainPasswordLMHash, DomainPasswordEmptyPassword, DomainPasswordWeakPassword, DomainPasswordWeakPasswordEnabled, DomainPasswordWeakPasswordDisabled, DomainPasswordWeakPasswordList, DomainPasswordDefaultComputerPassword, DomainPasswordPasswordNotRequired, DomainPasswordPasswordNeverExpires, DomainPasswordAESKeysMissing, DomainPasswordPreAuthNotRequired, DomainPasswordDESEncryptionOnly, DomainPasswordDelegatableAdmins, DomainPasswordDuplicatePasswordGroups, DomainPasswordHashesWeakPassword, DomainPasswordHashesWeakPasswordEnabled, DomainPasswordHashesWeakPasswordDisabled, DomainPasswordStats\"\"",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.Management.Automation.ArgumentTransformationMetadataException: Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory[]\". Error: \"Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory\". Error: \"Unable to match the identifier name * to a valid enumerator name. Specify one of the following enumerator names and try again:\r\nForestInformation, ForestFSMO, ForestGlobalCatalogs, ForestOptionalFeatures, ForestUPNSuffixes, ForestSPNSuffixes, ForestSites, ForestSites1, ForestSites2, ForestSubnets, ForestSubnets1, ForestSubnets2, ForestSiteLinks, ForestDomainControllers, ForestRootDSE, ForestSchemaPropertiesUsers, ForestSchemaPropertiesComputers, ForestReplication, DomainRootDSE, DomainRIDs, DomainAuthenticationPolicies, DomainAuthenticationPolicySilos, DomainCentralAccessPolicies, DomainCentralAccessRules, DomainClaimTransformPolicies, DomainClaimTypes, DomainFineGrainedPolicies, DomainFineGrainedPoliciesUsers, DomainFineGrainedPoliciesUsersExtended, DomainGUIDS, DomainDNSSRV, DomainDNSA, DomainInformation, DomainControllers, DomainFSMO, DomainDefaultPasswordPolicy, DomainGroupPolicies, DomainGroupPoliciesDetails, DomainGroupPoliciesACL, DomainOrganizationalUnits, DomainOrganizationalUnitsBasicACL, DomainOrganizationalUnitsExtendedACL, DomainContainers, DomainTrustsClean, DomainTrusts, DomainBitlocker, DomainLAPS, DomainGroupsFullList, DomainGroups, DomainGroupsMembers, DomainGroupsMembersRecursive, DomainGroupsSpecial, DomainGroupsSpecialMembers, DomainGroupsSpecialMembersRecursive, DomainGroupsPriviliged, DomainGroupsPriviligedMembers, DomainGroupsPriviligedMembersRecursive, DomainUsersFullList, DomainUsers, DomainUsersCount, DomainUsersAll, DomainUsersSystemAccounts, DomainUsersNeverExpiring, DomainUsersNeverExpiringInclDisabled, DomainUsersExpiredInclDisabled, DomainUsersExpiredExclDisabled, DomainAdministrators, DomainAdministratorsRecursive, DomainEnterpriseAdministrators, DomainEnterpriseAdministratorsRecursive, DomainComputersFullList, DomainComputersAll, DomainComputersAllCount, DomainComputers, DomainComputersCount, DomainServers, DomainServersCount, DomainComputersUnknown, DomainComputersUnknownCount, DomainPasswordDataUsers, DomainPasswordDataPasswords, DomainPasswordDataPasswordsHashes, DomainPasswordClearTextPassword, DomainPasswordClearTextPasswordEnabled, DomainPasswordClearTextPasswordDisabled, DomainPasswordLMHash, DomainPasswordEmptyPassword, DomainPasswordWeakPassword, DomainPasswordWeakPasswordEnabled, DomainPasswordWeakPasswordDisabled, DomainPasswordWeakPasswordList, DomainPasswordDefaultComputerPassword, DomainPasswordPasswordNotRequired, DomainPasswordPasswordNeverExpires, DomainPasswordAESKeysMissing, DomainPasswordPreAuthNotRequired, DomainPasswordDESEncryptionOnly, DomainPasswordDelegatableAdmins, DomainPasswordDuplicatePasswordGroups, DomainPasswordHashesWeakPassword, DomainPasswordHashesWeakPasswordEnabled, DomainPasswordHashesWeakPasswordDisabled, DomainPasswordStats\"\" ---\u003e System.Management.Automation.PSInvalidCastException: Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory[]\". Error: \"Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory\". Error: \"Unable to match the identifier name * to a valid enumerator name. Specify one of the following enumerator names and try again:\r\nForestInformation, ForestFSMO, ForestGlobalCatalogs, ForestOptionalFeatures, ForestUPNSuffixes, ForestSPNSuffixes, ForestSites, ForestSites1, ForestSites2, ForestSubnets, ForestSubnets1, ForestSubnets2, ForestSiteLinks, ForestDomainControllers, ForestRootDSE, ForestSchemaPropertiesUsers, ForestSchemaPropertiesComputers, ForestReplication, DomainRootDSE, DomainRIDs, DomainAuthenticationPolicies, DomainAuthenticationPolicySilos, DomainCentralAccessPolicies, DomainCentralAccessRules, DomainClaimTransformPolicies, DomainClaimTypes, DomainFineGrainedPolicies, DomainFineGrainedPoliciesUsers, DomainFineGrainedPoliciesUsersExtended, DomainGUIDS, DomainDNSSRV, DomainDNSA, DomainInformation, DomainControllers, DomainFSMO, DomainDefaultPasswordPolicy, DomainGroupPolicies, DomainGroupPoliciesDetails, DomainGroupPoliciesACL, DomainOrganizationalUnits, DomainOrganizationalUnitsBasicACL, DomainOrganizationalUnitsExtendedACL, DomainContainers, DomainTrustsClean, DomainTrusts, DomainBitlocker, DomainLAPS, DomainGroupsFullList, DomainGroups, DomainGroupsMembers, DomainGroupsMembersRecursive, DomainGroupsSpecial, DomainGroupsSpecialMembers, DomainGroupsSpecialMembersRecursive, DomainGroupsPriviliged, DomainGroupsPriviligedMembers, DomainGroupsPriviligedMembersRecursive, DomainUsersFullList, DomainUsers, DomainUsersCount, DomainUsersAll, DomainUsersSystemAccounts, DomainUsersNeverExpiring, DomainUsersNeverExpiringInclDisabled, DomainUsersExpiredInclDisabled, DomainUsersExpiredExclDisabled, DomainAdministrators, DomainAdministratorsRecursive, DomainEnterpriseAdministrators, DomainEnterpriseAdministratorsRecursive, DomainComputersFullList, DomainComputersAll, DomainComputersAllCount, DomainComputers, DomainComputersCount, DomainServers, DomainServersCount, DomainComputersUnknown, DomainComputersUnknownCount, DomainPasswordDataUsers, DomainPasswordDataPasswords, DomainPasswordDataPasswordsHashes, DomainPasswordClearTextPassword, DomainPasswordClearTextPasswordEnabled, DomainPasswordClearTextPasswordDisabled, DomainPasswordLMHash, DomainPasswordEmptyPassword, DomainPasswordWeakPassword, DomainPasswordWeakPasswordEnabled, DomainPasswordWeakPasswordDisabled, DomainPasswordWeakPasswordList, DomainPasswordDefaultComputerPassword, DomainPasswordPasswordNotRequired, DomainPasswordPasswordNeverExpires, DomainPasswordAESKeysMissing, DomainPasswordPreAuthNotRequired, DomainPasswordDESEncryptionOnly, DomainPasswordDelegatableAdmins, DomainPasswordDuplicatePasswordGroups, DomainPasswordHashesWeakPassword, DomainPasswordHashesWeakPasswordEnabled, DomainPasswordHashesWeakPasswordDisabled, DomainPasswordStats\"\" ---\u003e System.Management.Automation.PSInvalidCastException: Cannot convert value \"*\" to type \"PSWinDocumentation.ActiveDirectory\". Error: \"Unable to match the identifier name * to a valid enumerator name. Specify one of the following enumerator names and try again:\r\nForestInformation, ForestFSMO, ForestGlobalCatalogs, ForestOptionalFeatures, ForestUPNSuffixes, ForestSPNSuffixes, ForestSites, ForestSites1, ForestSites2, ForestSubnets, ForestSubnets1, ForestSubnets2, ForestSiteLinks, ForestDomainControllers, ForestRootDSE, ForestSchemaPropertiesUsers, ForestSchemaPropertiesComputers, ForestReplication, DomainRootDSE, DomainRIDs, DomainAuthenticationPolicies, DomainAuthenticationPolicySilos, DomainCentralAccessPolicies, DomainCentralAccessRules, DomainClaimTransformPolicies, DomainClaimTypes, DomainFineGrainedPolicies, DomainFineGrainedPoliciesUsers, DomainFineGrainedPoliciesUsersExtended, DomainGUIDS, DomainDNSSRV, DomainDNSA, DomainInformation, DomainControllers, DomainFSMO, DomainDefaultPasswordPolicy, DomainGroupPolicies, DomainGroupPoliciesDetails, DomainGroupPoliciesACL, DomainOrganizationalUnits, DomainOrganizationalUnitsBasicACL, DomainOrganizationalUnitsExtendedACL, DomainContainers, DomainTrustsClean, DomainTrusts, DomainBitlocker, DomainLAPS, DomainGroupsFullList, DomainGroups, DomainGroupsMembers, DomainGroupsMembersRecursive, DomainGroupsSpecial, DomainGroupsSpecialMembers, DomainGroupsSpecialMembersRecursive, DomainGroupsPriviliged, DomainGroupsPriviligedMembers, DomainGroupsPriviligedMembersRecursive, DomainUsersFullList, DomainUsers, DomainUsersCount, DomainUsersAll, DomainUsersSystemAccounts, DomainUsersNeverExpiring, DomainUsersNeverExpiringInclDisabled, DomainUsersExpiredInclDisabled, DomainUsersExpiredExclDisabled, DomainAdministrators, DomainAdministratorsRecursive, DomainEnterpriseAdministrators, DomainEnterpriseAdministratorsRecursive, DomainComputersFullList, DomainComputersAll, DomainComputersAllCount, DomainComputers, DomainComputersCount, DomainServers, DomainServersCount, DomainComputersUnknown, DomainComputersUnknownCount, DomainPasswordDataUsers, DomainPasswordDataPasswords, DomainPasswordDataPasswordsHashes, DomainPasswordClearTextPassword, DomainPasswordClearTextPasswordEnabled, DomainPasswordClearTextPasswordDisabled, DomainPasswordLMHash, DomainPasswordEmptyPassword, DomainPasswordWeakPassword, DomainPasswordWeakPasswordEnabled, DomainPasswordWeakPasswordDisabled, DomainPasswordWeakPasswordList, DomainPasswordDefaultComputerPassword, DomainPasswordPasswordNotRequired, DomainPasswordPasswordNeverExpires, DomainPasswordAESKeysMissing, DomainPasswordPreAuthNotRequired, DomainPasswordDESEncryptionOnly, DomainPasswordDelegatableAdmins, DomainPasswordDuplicatePasswordGroups, DomainPasswordHashesWeakPassword, DomainPasswordHashesWeakPasswordEnabled, DomainPasswordHashesWeakPasswordDisabled, DomainPasswordStats\" ---\u003e System.Management.Automation.RuntimeException: Unable to match the identifier name * to a valid enumerator name. Specify one of the following enumerator names and try again:\r\nForestInformation, ForestFSMO, ForestGlobalCatalogs, ForestOptionalFeatures, ForestUPNSuffixes, ForestSPNSuffixes, ForestSites, ForestSites1, ForestSites2, ForestSubnets, ForestSubnets1, ForestSubnets2, ForestSiteLinks, ForestDomainControllers, ForestRootDSE, ForestSchemaPropertiesUsers, ForestSchemaPropertiesComputers, ForestReplication, DomainRootDSE, DomainRIDs, DomainAuthenticationPolicies, DomainAuthenticationPolicySilos, DomainCentralAccessPolicies, DomainCentralAccessRules, DomainClaimTransformPolicies, DomainClaimTypes, DomainFineGrainedPolicies, DomainFineGrainedPoliciesUsers, DomainFineGrainedPoliciesUsersExtended, DomainGUIDS, DomainDNSSRV, DomainDNSA, DomainInformation, DomainControllers, DomainFSMO, DomainDefaultPasswordPolicy, DomainGroupPolicies, DomainGroupPoliciesDetails, DomainGroupPoliciesACL, DomainOrganizationalUnits, DomainOrganizationalUnitsBasicACL, DomainOrganizationalUnitsExtendedACL, DomainContainers, DomainTrustsClean, DomainTrusts, DomainBitlocker, DomainLAPS, DomainGroupsFullList, DomainGroups, DomainGroupsMembers, DomainGroupsMembersRecursive, DomainGroupsSpecial, DomainGroupsSpecialMembers, DomainGroupsSpecialMembersRecursive, DomainGroupsPriviliged, DomainGroupsPriviligedMembers, DomainGroupsPriviligedMembersRecursive, DomainUsersFullList, DomainUsers, DomainUsersCount, DomainUsersAll, DomainUsersSystemAccounts, DomainUsersNeverExpiring, DomainUsersNeverExpiringInclDisabled, DomainUsersExpiredInclDisabled, DomainUsersExpiredExclDisabled, DomainAdministrators, DomainAdministratorsRecursive, DomainEnterpriseAdministrators, DomainEnterpriseAdministratorsRecursive, DomainComputersFullList, DomainComputersAll, DomainComputersAllCount, DomainComputers, DomainComputersCount, DomainServers, DomainServersCount, DomainComputersUnknown, DomainComputersUnknownCount, DomainPasswordDataUsers, DomainPasswordDataPasswords, DomainPasswordDataPasswordsHashes, DomainPasswordClearTextPassword, DomainPasswordClearTextPasswordEnabled, DomainPasswordClearTextPasswordDisabled, DomainPasswordLMHash, DomainPasswordEmptyPassword, DomainPasswordWeakPassword, DomainPasswordWeakPasswordEnabled, DomainPasswordWeakPasswordDisabled, DomainPasswordWeakPasswordList, DomainPasswordDefaultComputerPassword, DomainPasswordPasswordNotRequired, DomainPasswordPasswordNeverExpires, DomainPasswordAESKeysMissing, DomainPasswordPreAuthNotRequired, DomainPasswordDESEncryptionOnly, DomainPasswordDelegatableAdmins, DomainPasswordDuplicatePasswordGroups, DomainPasswordHashesWeakPassword, DomainPasswordHashesWeakPasswordEnabled, DomainPasswordHashesWeakPasswordDisabled, DomainPasswordStats\r\n   at System.Management.Automation.EnumMinimumDisambiguation.EnumDisambiguate(String text, Type enumType)\r\n   at System.Management.Automation.LanguagePrimitives.ConvertStringToEnum(Object valueToConvert, Type resultType, Boolean recursion, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.LanguagePrimitives.ConvertStringToEnum(Object valueToConvert, Type resultType, Boolean recursion, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)\r\n   at System.Management.Automation.LanguagePrimitives.ConversionData`1.Invoke(Object valueToConvert, Type resultType, Boolean recurse, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)\r\n   at System.Management.Automation.LanguagePrimitives.ConvertTo(Object valueToConvert, Type resultType, Boolean recursion, IFormatProvider formatProvider, TypeTable backupTypeTable)\r\n   at System.Management.Automation.LanguagePrimitives.ConvertScalarToArray(Object valueToConvert, Type resultType, Boolean recursion, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.LanguagePrimitives.ConvertScalarToArray(Object valueToConvert, Type resultType, Boolean recursion, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)\r\n   at System.Management.Automation.LanguagePrimitives.ConversionData`1.Invoke(Object valueToConvert, Type resultType, Boolean recurse, PSObject originalValueToConvert, IFormatProvider formatProvider, TypeTable backupTable)\r\n   at System.Management.Automation.LanguagePrimitives.ConvertTo(Object valueToConvert, Type resultType, Boolean recursion, IFormatProvider formatProvider, TypeTable backupTypeTable)\r\n   at System.Management.Automation.ArgumentTypeConverterAttribute.Transform(EngineIntrinsics engineIntrinsics, Object inputData, Boolean bindingParameters, Boolean bindingScriptCmdlet)\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.ArgumentTypeConverterAttribute.Transform(EngineIntrinsics engineIntrinsics, Object inputData, Boolean bindingParameters, Boolean bindingScriptCmdlet)\r\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
                          "TargetSite":  "Boolean BindPositionalParametersInSet(UInt32, System.Collections.Generic.Dictionary`2[System.Management.Automation.MergedCompiledCommandParameter,System.Management.Automation.PositionalCommandParameter], System.Management.Automation.CommandParameterInternal, System.Management.Automation.ParameterBindingFlags, System.Management.Automation.ParameterBindingException ByRef)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderController.BindPositionalParametersInSet(UInt32 validParameterSets, Dictionary`2 nextPositionalParameters, CommandParameterInternal argument, ParameterBindingFlags flags, ParameterBindingException\u0026 bindingException)\r\n   at System.Management.Automation.ParameterBinderController.BindPositionalParameters(Collection`1 unboundArguments, UInt32 validParameterSets, UInt32 defaultParameterSet, ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Get-WinADForestInformation",
                             "Reason":  "ParameterBindingArgumentTransformationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentTransformationError,Get-WinADForestInformation",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-WinADForestInformation",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  38,
                               "HistoryId":  58,
                               "ScriptName":  "",
                               "Line":  "Get-WinADForestInformation -Extended *",
                               "PositionMessage":  "At line:1 char:38\r\n+ Get-WinADForestInformation -Extended *\r\n+                                      ~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "ItemName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                          "SessionStateCategory":  4,
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Cannot find path \u0027C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions\u0027 because it does not exist.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void GetChildItems(System.String, Boolean, UInt32, System.Management.Automation.CmdletProviderContext)",
                          "StackTrace":  "   at System.Management.Automation.SessionStateInternal.GetChildItems(String path, Boolean recurse, UInt32 depth, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.GetChildItemCommand.ProcessRecord()",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Get-ChildItem",
                             "Reason":  "ItemNotFoundException",
                             "TargetName":  "C:\\ProgramData\\Evotec\\PSWinReporting\\Definitions",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "PathNotFound,Microsoft.PowerShell.Commands.GetChildItemCommand",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ChildItem",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  2591,
                               "OffsetInLine":  20,
                               "HistoryId":  57,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "Line":  "    try { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*.xml\u0027 -ErrorAction Stop } catch { $Files = $null }\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1:2591 char:20\r\n+ ...  { $Files = Get-ChildItem -LiteralPath $ConfigurationPath -Filter \u0027*. ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1",
                               "InvocationName":  "Get-ChildItem",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Get-EventsDefinitions, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 2591\r\nat Find-Events\u003cDynamicParam\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PSWinReportingV2\\2.0.20\\PSWinReportingV2.psm1: line 3644\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 45\r\nat \u003cScriptBlock\u003e\u003cEnd\u003e, \u003cNo file\u003e: line 54",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  6,
                          "Message":  "Error parsing query: \u0027Name -match \u0027Exchange\u0027\u0027 Error Message: \u0027Operator Not supported: -match\u0027 at position: \u00276\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  52,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {Name -match \u0027Exchange\u0027}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {Name -match \u0027Exchange\u0027}\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  6,
                          "Message":  "Error parsing query: \u0027Name -match \"Exchange\"\u0027 Error Message: \u0027Operator Not supported: -match\u0027 at position: \u00276\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  51,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {Name -match \"Exchange\"}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {Name -match \"Exchange\"}\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  6,
                          "Message":  "Error parsing query: \u0027Name -match \"Exchange\"\u0027 Error Message: \u0027Operator Not supported: -match\u0027 at position: \u00276\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  50,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {Name -match \"Exchange\"}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {Name -match \"Exchange\"}\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  17,
                          "Message":  "Error parsing query: \u0027GroupType -band l\u0027 Error Message: \u0027syntax error\u0027 at position: \u002717\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void yyerror(System.String)",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyerror(String s)\r\n   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  46,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupType -band l}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupType -band l}\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  39,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \"Security\" -and SID -begins \"S-1-5-21*\" \u0027 Error Message: \u0027Operator Not supported: -begins\u0027 at position: \u002739\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  39,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter \u0027GroupCategory -eq \"Security\" -and SID -begins \"S-1-5-21*\" \u0027 -Properties * | Select Name, Description | Export-csv .\\Groups-w-Description-WelKnowSIDs.csv -Append -NoTypeInformation",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter \u0027GroupCategory -eq \"Security\" -and SID -begins \"S ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  39,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \"Security\" -and SID -contains \"S-1-5-21*\" \u0027 Error Message: \u0027Operator Not supported: -contains\u0027 at position: \u002739\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  38,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter \u0027GroupCategory -eq \"Security\" -and SID -contains \"S-1-5-21*\" \u0027 -Properties * | Select Name, Description | Export-csv .\\Groups-w-Description-WelKnowSIDs.csv -Append -NoTypeInformation",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter \u0027GroupCategory -eq \"Security\" -and SID -contains  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  35,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and \"SID\" -Like \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027syntax error\u0027 at position: \u002735\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void yyerror(System.String)",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyerror(String s)\r\n   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  36,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and \"SID\" -Like \u0027S-1-5-21*\u0027}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and \"SID\" -Like \u0027S ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  35,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and \"SID\" -contains \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027syntax error\u0027 at position: \u002735\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void yyerror(System.String)",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyerror(String s)\r\n   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  35,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and \"SID\" -contains \u0027S-1-5-21*\u0027}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and \"SID\" -contain ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  35,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and \"SID\" - \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027syntax error\u0027 at position: \u002735\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void yyerror(System.String)",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyerror(String s)\r\n   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  34,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and \"SID\" - \u0027S-1-5-21*\u0027}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and \"SID\" - \u0027S-1-5 ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  39,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and SID -begins \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027Operator Not supported: -begins\u0027 at position: \u002739\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  33,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and SID -begins \u0027S-1-5-21*\u0027}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and SID -begins \u0027S ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "The term \u0027GroupScope\u0027 is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.",
                          "CommandName":  "GroupScope",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "The term \u0027GroupScope\u0027 is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Management.Automation.CommandInfo LookupCommandInfo(System.String, System.Management.Automation.CommandTypes, System.Management.Automation.SearchResolutionOptions, System.Management.Automation.CommandOrigin, System.Management.Automation.ExecutionContext)",
                          "StackTrace":  "   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions, CommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "GroupScope",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "",
                             "Reason":  "CommandNotFoundException",
                             "TargetName":  "GroupScope",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "CommandNotFoundException",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  22,
                               "HistoryId":  30,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter (GroupScope -eq \u0027DomainLocal\u0027)",
                               "PositionMessage":  "At line:1 char:22\r\n+ Get-ADGroup -Filter (GroupScope -eq \u0027DomainLocal\u0027)\r\n+                      ~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "GroupScope",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "The term \u0027ObjectClass\u0027 is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.",
                          "CommandName":  "ObjectClass",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "The term \u0027ObjectClass\u0027 is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Management.Automation.CommandInfo LookupCommandInfo(System.String, System.Management.Automation.CommandTypes, System.Management.Automation.SearchResolutionOptions, System.Management.Automation.CommandOrigin, System.Management.Automation.ExecutionContext)",
                          "StackTrace":  "   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions, CommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "ObjectClass",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "",
                             "Reason":  "CommandNotFoundException",
                             "TargetName":  "ObjectClass",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "CommandNotFoundException",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  22,
                               "HistoryId":  29,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter (ObjectClass -eq group)",
                               "PositionMessage":  "At line:1 char:22\r\n+ Get-ADGroup -Filter (ObjectClass -eq group)\r\n+                      ~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "ObjectClass",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  39,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and sid -contains \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027Operator Not supported: -contains\u0027 at position: \u002739\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  27,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and sid -contains \u0027S-1-5-21*\u0027}",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and sid -contains  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  45,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and objectSID - \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027Operator Not supported: \u0027 at position: \u002745\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  26,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and objectSID - \u0027S-1-5-21*\u0027} -Properties * | Select Name, Description | Export-csv .\\Groups-w-Description-WelKnowSIDs.csv -Append -NoTypeInformation",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and objectSID - \u0027S ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  45,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and objectSID -contains \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027Operator Not supported: -contains\u0027 at position: \u002745\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  25,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and objectSID -contains \u0027S-1-5-21*\u0027} -Properties * | Select Name, Description | Export-csv .\\Groups-w-Description-WelKnowSIDs.csv -Append -NoTypeInformation",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and objectSID -con ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  39,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq \u0027Security\u0027 -and SID -contains \u0027S-1-5-21*\u0027\u0027 Error Message: \u0027Operator Not supported: -contains\u0027 at position: \u002739\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  24,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and SID -contains \u0027S-1-5-21*\u0027} -Properties * | Select Name, Description | Export-csv .\\Groups-w-Description-WelKnowSIDs.csv -Append -NoTypeInformation",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq \u0027Security\u0027 -and SID -contains  ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  42,
                          "Message":  "Error parsing query: \u0027(GroupCategory -eq \u0027Security\u0027) -and (SID -contains \u0027S-1-5-21*\u0027)\u0027 Error Message: \u0027Operator Not supported: -contains\u0027 at position: \u002742\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Int32 yyparse()",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  23,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {(GroupCategory -eq \u0027Security\u0027) -and (SID -contains \u0027S-1-5-21*\u0027)} -Properties * | Select Name, Description | Export-csv .\\Groups-w-Description-WelKnowSIDs.csv -Append -NoTypeInformation",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {(GroupCategory -eq \u0027Security\u0027) -and (SID -contai ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Position":  19,
                          "Message":  "Error parsing query: \u0027GroupCategory -eq Security\u0027 Error Message: \u0027syntax error\u0027 at position: \u002719\u0027.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void yyerror(System.String)",
                          "StackTrace":  "   at Microsoft.ActiveDirectory.Management.QueryParser.yyerror(String s)\r\n   at Microsoft.ActiveDirectory.Management.QueryParser.yyparse()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseBeginCSRoutine()",
                          "HelpLink":  null,
                          "Source":  "Microsoft.ActiveDirectory.Management",
                          "HResult":  -2146233033
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  17,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ADFilterParsingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ActiveDirectoryCmdlet:Microsoft.ActiveDirectory.Management.ADFilterParsingException,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  1,
                               "HistoryId":  20,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter {GroupCategory -eq Security} -Properties * | Select Name, Description",
                               "PositionMessage":  "At line:1 char:1\r\n+ Get-ADGroup -Filter {GroupCategory -eq Security} -Properties * | Sele ...\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "Get-ADGroup",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "Cannot validate argument on parameter \u0027Filter\u0027. The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.",
                          "ParameterName":  "Filter",
                          "ParameterType":  "string",
                          "TypeSpecified":  null,
                          "ErrorId":  "ParameterArgumentValidationError",
                          "Line":  1,
                          "Offset":  21,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "Cannot validate argument on parameter \u0027Filter\u0027. The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.Management.Automation.ValidationMetadataException: The argument is null or empty. Provide an argument that is not null or empty, and then try the command again.\r\n   at System.Management.Automation.ValidateNotNullOrEmptyAttribute.Validate(Object arguments, EngineIntrinsics engineIntrinsics)\r\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
                          "TargetSite":  "Boolean BindParameter(System.Management.Automation.CommandParameterInternal, System.Management.Automation.CompiledCommandParameter, System.Management.Automation.ParameterBindingFlags)",
                          "StackTrace":  "   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameter(CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameter(UInt32 parameterSets, CommandParameterInternal argument, MergedCompiledCommandParameter parameter, ParameterBindingFlags flags)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindParameters(UInt32 parameterSets, Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.HandleCommandLineDynamicParameters(ParameterBindingException\u0026 outgoingBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  6,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ParameterBindingValidationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "ParameterArgumentValidationError,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  21,
                               "HistoryId":  19,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter (Where {GroupCategory -eq Security}) -Properties * | Select Name, Description",
                               "PositionMessage":  "At line:1 char:21\r\n+ Get-ADGroup -Filter (Where {GroupCategory -eq Security}) -Properties  ...\r\n+                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Message":  "A parameter cannot be found that matches parameter name \u0027eq\u0027.",
                          "ParameterName":  "eq",
                          "ParameterType":  null,
                          "TypeSpecified":  null,
                          "ErrorId":  "NamedParameterNotFound",
                          "Line":  1,
                          "Offset":  35,
                          "CommandInvocation":  "System.Management.Automation.InvocationInfo",
                          "ErrorRecord":  "A parameter cannot be found that matches parameter name \u0027eq\u0027.",
                          "WasThrownFromThrowStatement":  false,
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "Void VerifyArgumentsProcessed(System.Management.Automation.ParameterBindingException)",
                          "StackTrace":  "   at System.Management.Automation.CmdletParameterBinderController.VerifyArgumentsProcessed(ParameterBindingException originalBindingException)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParametersNoValidation(Collection`1 arguments)\r\n   at System.Management.Automation.CmdletParameterBinderController.BindCommandLineParameters(Collection`1 arguments)\r\n   at System.Management.Automation.CommandProcessor.BindCommandLineParameters()\r\n   at System.Management.Automation.CommandProcessor.Prepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.CommandProcessorBase.DoPrepare(IDictionary psDefaultParameterValues)\r\n   at System.Management.Automation.Internal.PipelineProcessor.Start(Boolean incomingStream)\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Management.Automation.Internal.PipelineProcessor.SynchronousExecuteEnumerate(Object input)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  5,
                             "Activity":  "Get-ADGroup",
                             "Reason":  "ParameterBindingException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "NamedParameterNotFound,Microsoft.ActiveDirectory.Management.Commands.GetADGroup",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Get-ADGroup",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  35,
                               "HistoryId":  18,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter GroupCategory -eq Security -Properties * | Select Name, Description",
                               "PositionMessage":  "At line:1 char:35\r\n+ Get-ADGroup -Filter GroupCategory -eq Security -Properties * | Select ...\r\n+                                   ~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "The term \u0027GroupCategory\u0027 is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.",
                          "CommandName":  "GroupCategory",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "The term \u0027GroupCategory\u0027 is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  null,
                          "TargetSite":  "System.Management.Automation.CommandInfo LookupCommandInfo(System.String, System.Management.Automation.CommandTypes, System.Management.Automation.SearchResolutionOptions, System.Management.Automation.CommandOrigin, System.Management.Automation.ExecutionContext)",
                          "StackTrace":  "   at System.Management.Automation.CommandDiscovery.LookupCommandInfo(String commandName, CommandTypes commandTypes, SearchResolutionOptions searchResolutionOptions, CommandOrigin commandOrigin, ExecutionContext context)\r\n   at System.Management.Automation.CommandDiscovery.LookupCommandProcessor(String commandName, CommandOrigin commandOrigin, Nullable`1 useLocalScope)\r\n   at System.Management.Automation.ExecutionContext.CreateCommand(String command, Boolean dotSource)\r\n   at System.Management.Automation.PipelineOps.AddCommand(PipelineProcessor pipe, CommandParameterInternal[] commandElements, CommandBaseAst commandBaseAst, CommandRedirection[] redirections, ExecutionContext context)\r\n   at System.Management.Automation.PipelineOps.InvokePipeline(Object input, Boolean ignoreInput, CommandParameterInternal[][] pipeElements, CommandBaseAst[] pipeElementAsts, CommandRedirection[][] commandRedirections, FunctionContext funcContext)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`6.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  "GroupCategory",
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "",
                             "Reason":  "CommandNotFoundException",
                             "TargetName":  "GroupCategory",
                             "TargetType":  "String"
                         },
        "FullyQualifiedErrorId":  "CommandNotFoundException",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  1,
                               "OffsetInLine":  22,
                               "HistoryId":  17,
                               "ScriptName":  "",
                               "Line":  "Get-ADGroup -Filter (GroupCategory -eq Security) -Properties * | Select Name, Description",
                               "PositionMessage":  "At line:1 char:22\r\n+ Get-ADGroup -Filter (GroupCategory -eq Security) -Properties * | Sele ...\r\n+                      ~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "GroupCategory",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 1",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "ErrorRecord":  "Exception calling \"Translate\" with \"1\" argument(s): \"Some or all identity references could not be translated.\"",
                          "WasThrownFromThrowStatement":  false,
                          "Message":  "Exception calling \"Translate\" with \"1\" argument(s): \"Some or all identity references could not be translated.\"",
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "InnerException":  "System.Security.Principal.IdentityNotMappedException: Some or all identity references could not be translated.\r\n   at System.Security.Principal.SecurityIdentifier.Translate(IdentityReferenceCollection sourceSids, Type targetType, Boolean forceSuccess)\r\n   at System.Security.Principal.SecurityIdentifier.Translate(Type targetType)\r\n   at CallSite.Target(Closure , CallSite , Object , Type )",
                          "TargetSite":  "Void ConvertToMethodInvocationException(System.Exception, System.Type, System.String, Int32, System.Reflection.MemberInfo)",
                          "StackTrace":  "   at System.Management.Automation.ExceptionHandlingOps.ConvertToMethodInvocationException(Exception exception, Type typeToThrow, String methodName, Int32 numArgs, MemberInfo memberInfo)\r\n   at CallSite.Target(Closure , CallSite , Object , Type )\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute2[T0,T1,TRet](CallSite site, T0 arg0, T1 arg1)\r\n   at System.Management.Automation.Interpreter.DynamicInstruction`3.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)",
                          "HelpLink":  null,
                          "Source":  "System.Management.Automation",
                          "HResult":  -2146233087
                      },
        "TargetObject":  null,
        "CategoryInfo":  {
                             "Category":  0,
                             "Activity":  "",
                             "Reason":  "MethodInvocationException",
                             "TargetName":  "",
                             "TargetType":  ""
                         },
        "FullyQualifiedErrorId":  "IdentityNotMappedException",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  null,
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  3,
                               "OffsetInLine":  1,
                               "HistoryId":  -1,
                               "ScriptName":  "",
                               "Line":  "$objUser = $objSID.Translate([System.Security.Principal.NTAccount])\r\n",
                               "PositionMessage":  "At line:3 char:1\r\n+ $objUser = $objSID.Translate([System.Security.Principal.NTAccount])\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "",
                               "PSCommandPath":  null,
                               "InvocationName":  "",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at \u003cScriptBlock\u003e, \u003cNo file\u003e: line 3",
        "PipelineIterationInfo":  [

                                  ],
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027VMWareAutomate\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "VMWareAutomate",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  553,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "Authenticode issuer \u0027CN=\"VMware, Inc.\", O=\"VMware, Inc.\", L=Palo Alto, S=California, C=US\u0027 of the new module \u0027VMware.VimAutomation.Common\u0027 with version \u00276.5.4.6979861\u0027 from root certificate authority \u0027CN=VeriSign Class 3 Public Primary Certification Authority - G5, OU=\"(c) 2006 VeriSign, Inc. - For authorized use only\", OU=VeriSign Trust Network, O=\"VeriSign, Inc.\", C=US\u0027 is not matching with the authenticode issuer \u0027E=noreply@vmware.com, CN=\"VMware, Inc.\", O=\"VMware, Inc.\", L=Palo Alto, S=California, C=US\u0027 of the previously-installed module \u0027VMware.VimAutomation.Common\u0027 with version \u002712.4.0.18627061\u0027 from root certificate authority \u0027CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US\u0027. If you still want to install or update, use -SkipPublisherCheck parameter.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "VMware.VimAutomation.HA",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  517,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "AuthenticodeIssuerMismatch,Validate-ModuleAuthenticodeSignature,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "The version \u00270.0.99\u0027 of the module \u0027PSSharedGoods\u0027 being installed is not catalog signed. Ensure that the version \u00270.0.99\u0027 of the module \u0027PSSharedGoods\u0027 has the catalog file \u0027PSSharedGoods.cat\u0027 and signed with the same publisher \u0027CN=Przemysław Kłys EVOTEC, O=Przemysław Kłys EVOTEC, L=Katowice, S=Śląskie, C=PL\u0027 as the previously-installed module \u0027PSSharedGoods\u0027 with version \u00270.0.210\u0027 under the directory \u0027C:\\Users\\john.admin\\Documents\\WindowsPowerShell\\Modules\\PSSharedGoods\\0.0.210\u0027. If you still want to install or update, use -SkipPublisherCheck parameter.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "PSWebToolbox",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  313,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "ModuleIsNotCatalogSigned,Validate-ModuleAuthenticodeSignature,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "The module \u0027NetApp.ONTAP\u0027 cannot be installed or updated because the authenticode signature of the file \u0027NetApp.ONTAP.psd1\u0027 is not valid.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "NetApp.ONTAP",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  199,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "InvalidAuthenticodeSignature,ValidateAndGet-AuthenticodeSignature,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "License Acceptance is required for module \u0027HPEiLOCmdlets\u0027. Please specify \u0027-AcceptLicense\u0027 to perform this operation.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HPEiLOCmdlets",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  159,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  5,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "ForceAcceptLicense,Install-PackageUtility,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "License Acceptance is required for module \u0027HP.Private\u0027. Please specify \u0027-AcceptLicense\u0027 to perform this operation.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HPCMSL",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  157,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  5,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "ForceAcceptLicense,Install-PackageUtility,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Utility\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Utility",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  155,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Softpaq\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Softpaq",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  153,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Sinks\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Sinks",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  151,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Retail\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Retail",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  149,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Repo\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Repo",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  147,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Private\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Private",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  145,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Firmware\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Firmware",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  143,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.Consent\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.Consent",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  141,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "No match was found for the specified search criteria and module name \u0027HP.ClientManagement\u0027. Try Get-PSRepository to see all available registered module repositories.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "HP.ClientManagement",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  139,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  13,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    },
    {
        "Exception":  {
                          "Data":  "System.Collections.ListDictionaryInternal",
                          "Message":  "The module \u0027DataONTAP\u0027 cannot be installed or updated because the authenticode signature of the file \u0027DataONTAP.psd1\u0027 is not valid.",
                          "InnerException":  null,
                          "TargetSite":  null,
                          "StackTrace":  null,
                          "HelpLink":  null,
                          "Source":  null,
                          "HResult":  -2146233088
                      },
        "TargetObject":  {
                             "Force":  "True",
                             "ForceBootstrap":  "False",
                             "InputObject":  null,
                             "Name":  "DataONTAP",
                             "RequiredVersion":  null,
                             "MinimumVersion":  null,
                             "MaximumVersion":  null,
                             "Source":  "PSGallery",
                             "Credential":  null,
                             "Proxy":  null,
                             "ProxyCredential":  null,
                             "Sources":  "PSGallery",
                             "WebProxy":  null,
                             "CredentialUsername":  null,
                             "CredentialPassword":  null,
                             "AllVersions":  "False",
                             "ProviderName":  "PowerShellGet",
                             "MessageResolver":  "Microsoft.PowerShell.PackageManagement.Cmdlets.GetMessageString",
                             "DynamicOptions":  "System.Collections.Hashtable",
                             "OptionKeys":  "PackageManagementProvider Type Scope InstallUpdate Force WhatIf Name Source ProviderName Type MessageResolver PackageManagementProvider InstallUpdate Scope",
                             "IsInteractive":  true,
                             "CallCount":  93,
                             "WhatIf":  false,
                             "IsCanceled":  true,
                             "DynamicParameterDictionary":  "System.Management.Automation.RuntimeDefinedParameterDictionary",
                             "ParameterSetName":  "PackageBySearch",
                             "MyInvocation":  "System.Management.Automation.InvocationInfo",
                             "PagingParameters":  null,
                             "InvokeCommand":  "System.Management.Automation.CommandInvocationIntrinsics",
                             "Host":  "System.Management.Automation.Internal.Host.InternalHost",
                             "SessionState":  "System.Management.Automation.SessionState",
                             "Events":  "System.Management.Automation.PSLocalEventManager",
                             "JobRepository":  "System.Management.Automation.JobRepository",
                             "JobManager":  "System.Management.Automation.JobManager",
                             "InvokeProvider":  "System.Management.Automation.ProviderIntrinsics",
                             "Stopping":  false,
                             "CommandRuntime":  "Install-Package",
                             "CurrentPSTransaction":  null,
                             "CommandOrigin":  1
                         },
        "CategoryInfo":  {
                             "Category":  7,
                             "Activity":  "Install-Package",
                             "Reason":  "Exception",
                             "TargetName":  "Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
                             "TargetType":  "InstallPackage"
                         },
        "FullyQualifiedErrorId":  "InvalidAuthenticodeSignature,ValidateAndGet-AuthenticodeSignature,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage",
        "ErrorDetails":  null,
        "InvocationInfo":  {
                               "MyCommand":  "Install-Package",
                               "BoundParameters":  "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
                               "UnboundArguments":  "",
                               "ScriptLineNumber":  13069,
                               "OffsetInLine":  20,
                               "HistoryId":  11,
                               "ScriptName":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "Line":  "            $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n",
                               "PositionMessage":  "At C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1:13069 char:20\r\n+ ...           $sid = PackageManagement\\Install-Package @PSBoundParameters\r\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                               "PSScriptRoot":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5",
                               "PSCommandPath":  "C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1",
                               "InvocationName":  "PackageManagement\\Install-Package",
                               "PipelineLength":  0,
                               "PipelinePosition":  0,
                               "ExpectingInput":  false,
                               "CommandOrigin":  1,
                               "DisplayScriptPosition":  null
                           },
        "ScriptStackTrace":  "at Update-Module\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 13069\r\nat New-PSGetItemInfo, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 5088\r\nat \u003cScriptBlock\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat Get-InstalledModule\u003cProcess\u003e, C:\\Program Files\\WindowsPowerShell\\Modules\\PowerShellGet\\2.2.5\\PSModule.psm1: line 9445\r\nat \u003cScriptBlock\u003e, D:\\PowerShell\\WinSysChecklist\\Upgrade-InstalledModules.ps1: line 38",
        "PipelineIterationInfo":  [
                                      0,
                                      1
                                  ],
        "writeErrorStream":  true,
        "PSMessageDetails":  null
    }
]
