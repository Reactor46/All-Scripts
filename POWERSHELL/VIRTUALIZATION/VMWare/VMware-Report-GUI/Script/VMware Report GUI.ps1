
#========================================================================
# Generated On: 3/30/2013 5:06 PM
# Generated By: Zachary Loeber
# Organization: none

#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
[void][Reflection.Assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_pff) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}

function Call-MainForm_pff
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$btnSaveAndRun = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonSave = New-Object 'System.Windows.Forms.Button'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$grpConnectionInfo = New-Object 'System.Windows.Forms.GroupBox'
	$lblConnectHost = New-Object 'System.Windows.Forms.Label'
	$lblConnectCluster = New-Object 'System.Windows.Forms.Label'
	$lblConnectDatacenter = New-Object 'System.Windows.Forms.Label'
	$lblConnectServer = New-Object 'System.Windows.Forms.Label'
	$lblConnectLogon = New-Object 'System.Windows.Forms.Label'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$label4 = New-Object 'System.Windows.Forms.Label'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$labelLogon = New-Object 'System.Windows.Forms.Label'
	$grpCredentials = New-Object 'System.Windows.Forms.GroupBox'
	$txtvCenterServer = New-Object 'System.Windows.Forms.TextBox'
	$labelServer = New-Object 'System.Windows.Forms.Label'
	$buttonConnect = New-Object 'System.Windows.Forms.Button'
	$chkCurrentUser = New-Object 'System.Windows.Forms.CheckBox'
	$labelCurrentUser = New-Object 'System.Windows.Forms.Label'
	$txtUser = New-Object 'System.Windows.Forms.TextBox'
	$txtPassword = New-Object 'System.Windows.Forms.MaskedTextBox'
	$labelUser = New-Object 'System.Windows.Forms.Label'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$grpVMwareSettings = New-Object 'System.Windows.Forms.GroupBox'
	$comboHost = New-Object 'System.Windows.Forms.ComboBox'
	$labelHost = New-Object 'System.Windows.Forms.Label'
	$comboCluster = New-Object 'System.Windows.Forms.ComboBox'
	$comboDatacenter = New-Object 'System.Windows.Forms.ComboBox'
	$chkWholeFarm = New-Object 'System.Windows.Forms.CheckBox'
	$labelCluster = New-Object 'System.Windows.Forms.Label'
	$labelWholeFarm = New-Object 'System.Windows.Forms.Label'
	$labelDatacenter = New-Object 'System.Windows.Forms.Label'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$grpVC = New-Object 'System.Windows.Forms.GroupBox'
	$chkRptVCServices = New-Object 'System.Windows.Forms.CheckBox'
	$labelVCServiceStatus = New-Object 'System.Windows.Forms.Label'
	$dialRptVCEventlogsAge = New-Object 'System.Windows.Forms.NumericUpDown'
	$labelWindowsEventLogError = New-Object 'System.Windows.Forms.Label'
	$chkRptVCEvtLogs = New-Object 'System.Windows.Forms.CheckBox'
	$labelEventLogErrWarn = New-Object 'System.Windows.Forms.Label'
	$dialRptVCErrorsAge = New-Object 'System.Windows.Forms.NumericUpDown'
	$labelVCErrorEventsTheshol = New-Object 'System.Windows.Forms.Label'
	$chkRptVCErrors = New-Object 'System.Windows.Forms.CheckBox'
	$labelVCEventErrors = New-Object 'System.Windows.Forms.Label'
	$chkRptVCVMsDeleted = New-Object 'System.Windows.Forms.CheckBox'
	$labelVMsDeleted = New-Object 'System.Windows.Forms.Label'
	$chkRptVCVMsCreated = New-Object 'System.Windows.Forms.CheckBox'
	$labelVMsCreatedCloned = New-Object 'System.Windows.Forms.Label'
	$grpHosts = New-Object 'System.Windows.Forms.GroupBox'
	$chkRptHostsInMaint = New-Object 'System.Windows.Forms.CheckBox'
	$labelInMaintinance = New-Object 'System.Windows.Forms.Label'
	$chkRptHostsNotResponding = New-Object 'System.Windows.Forms.CheckBox'
	$dialRptHostsDatastorePercent = New-Object 'System.Windows.Forms.NumericUpDown'
	$labelNotResponding = New-Object 'System.Windows.Forms.Label'
	$chkRptHostsDatastore = New-Object 'System.Windows.Forms.CheckBox'
	$labelFreeThreshold = New-Object 'System.Windows.Forms.Label'
	$labelDatastoreUtilization = New-Object 'System.Windows.Forms.Label'
	$grpReportGeneral = New-Object 'System.Windows.Forms.GroupBox'
	$chkRptSelective = New-Object 'System.Windows.Forms.CheckBox'
	$labelGenerateReportOnlyWh = New-Object 'System.Windows.Forms.Label'
	$grpVMs = New-Object 'System.Windows.Forms.GroupBox'
	$chkRptVMFloppyConnected = New-Object 'System.Windows.Forms.CheckBox'
	$labelFloppyConnected = New-Object 'System.Windows.Forms.Label'
	$chkRptVMCDConnected = New-Object 'System.Windows.Forms.CheckBox'
	$labelCDConnected = New-Object 'System.Windows.Forms.Label'
	$chkRptVMTools = New-Object 'System.Windows.Forms.CheckBox'
	$labelNoVMwareTools = New-Object 'System.Windows.Forms.Label'
	$chkRptVMThinProvisioned = New-Object 'System.Windows.Forms.CheckBox'
	$labelThinProvisioned = New-Object 'System.Windows.Forms.Label'
	$dialRptVMSnapThresh = New-Object 'System.Windows.Forms.NumericUpDown'
	$chkRptVMSnapshots = New-Object 'System.Windows.Forms.CheckBox'
	$labelSnapshotThreshold = New-Object 'System.Windows.Forms.Label'
	$labelSnapshots = New-Object 'System.Windows.Forms.Label'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$grpSchedule = New-Object 'System.Windows.Forms.GroupBox'
	$labelTaskName = New-Object 'System.Windows.Forms.Label'
	$txtTaskName = New-Object 'System.Windows.Forms.TextBox'
	$grpReportFormat = New-Object 'System.Windows.Forms.GroupBox'
	$labelReportStyle = New-Object 'System.Windows.Forms.Label'
	$comboReportStyle = New-Object 'System.Windows.Forms.ComboBox'
	$grpDelivery = New-Object 'System.Windows.Forms.GroupBox'
	$txtEmailSubject = New-Object 'System.Windows.Forms.TextBox'
	$labelSubject = New-Object 'System.Windows.Forms.Label'
	$labelEmailReport = New-Object 'System.Windows.Forms.Label'
	$chkEmailReport = New-Object 'System.Windows.Forms.CheckBox'
	$labelReportName = New-Object 'System.Windows.Forms.Label'
	$labelSaveReport = New-Object 'System.Windows.Forms.Label'
	$txtReportName = New-Object 'System.Windows.Forms.TextBox'
	$labelReportFolder = New-Object 'System.Windows.Forms.Label'
	$chkSaveLocally = New-Object 'System.Windows.Forms.CheckBox'
	$txtReportFolder = New-Object 'System.Windows.Forms.TextBox'
	$txtSMTPServer = New-Object 'System.Windows.Forms.TextBox'
	$buttonBrowseFolder = New-Object 'System.Windows.Forms.Button'
	$labelSMTPRelayServer = New-Object 'System.Windows.Forms.Label'
	$labelEmailSender = New-Object 'System.Windows.Forms.Label'
	$labelEmailRecipient = New-Object 'System.Windows.Forms.Label'
	$txtEmailRecipient = New-Object 'System.Windows.Forms.TextBox'
	$txtEmailSender = New-Object 'System.Windows.Forms.TextBox'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$timerFadeIn = New-Object 'System.Windows.Forms.Timer'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$tooltipAll = New-Object 'System.Windows.Forms.ToolTip'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Function Set-SaveData
	{  
	    $Script:varEmailReport = $chkEmailReport.Checked
	    $Script:varEmailSubject = $txtEmailSubject.Text
	    $Script:varEmailRecipient = $txtEmailRecipient.Text
	    $Script:varEmailSender = $txtEmailSender.Text
	    $Script:varSMTPServer = $txtSMTPServer.Text
	    $Script:varSaveReportsLocally = $chkSaveLocally.Checked
	    $Script:varReportName = $txtReportName.Text
	    $Script:varReportFolder = $txtReportFolder.Text
	    $Script:varVIServer = $txtvCenterServer.Text
	    $Script:varUseCurrentUser = $chkCurrentUser.Checked
	    $Script:varVIUser = $txtUser.Text
	    $Script:varVIPassword = ''#$txtPassword.Text
	    $Script:varScopeWholeFarm = $chkWholeFarm.Checked
	    $Script:varScopeDatacenter = $comboDatacenter.Text
	    $Script:varScopeCluster = $comboCluster.Text
	    $Script:varScopeHost = $comboHost.Text
	    $Script:varReportHostsDatastore = $chkRptHostsDatastore.Checked
	    $Script:varReportHostsDatastoreThreshold = $dialRptHostsDatastorePercent.Text
	    $Script:varReportVMSnapshots = $chkRptVMSnapshots.Checked
	    $Script:varReportVMSnapshotsThreshold = $dialRptVMSnapThresh.Text
	    $Script:varReportVMThinProvisioned = $chkRptVMThinProvisioned.Checked
	    $Script:varReportSelective = $chkRptSelective.Checked
	    $Script:varReportVCErrors = $chkRptVCErrors.Checked
	    $Script:varReportHostsNotResponding = $chkRptHostsNotResponding.Checked
	    $Script:varReportHostsInMaint = $chkRptHostsInMaint.Checked
	    $Script:varReportVMTools = $chkRptVMTools.Checked
	    $Script:varReportCDConnected = $chkRptVMCDConnected.Checked
	    $Script:varReportFloppyConnected = $chkRptVMFloppyConnected.Checked
	    $Script:varReportVCErrorsAge = $dialRptVCErrorsAge.Text
	    $Script:varReportVCEventLogsAge = $dialRptVCEventlogsAge.Text
	    $Script:varReportVCEvntlogs = $chkRptVCEvtLogs.Checked
	    $Script:varReportVCServices = $chkRptVCServices.Checked
	    $Script:varReportVCVMsCreated = $chkRptVCVMsCreated.Checked
	    $Script:varReportVCVMsDeleted = $chkRptVCVMsDeleted.Checked
	    $Script:varReportStyle = $comboReportStyle.Text
	    
	    If (-not $chkCurrentUser.Checked) 
	    {
	       New-VICredentialStoreItem -host $txtvCenterServer.Text -user $txtUser.Text `
	            -password $txtPassword.text -file $CredFile 
		}
	}
	
	function Load-FormConfig
	{
	    $chkEmailReport.Checked = $varEmailReport
	    $txtEmailSubject.Text = $varEmailSubject
	    $txtEmailRecipient.Text = $varEmailRecipient
	    $txtEmailSender.Text = $varEmailSender
	    $txtSMTPServer.Text = $varSMTPServer
	    $chkSaveLocally.Checked = $varSaveReportsLocally
	    $txtReportName.Text = $varReportName
	    $txtReportFolder.Text = $varReportFolder
	    $txtvCenterServer.Text = $varVIServer
	    $chkCurrentUser.Checked = $varUseCurrentUser
	    $txtUser.Text = $varVIUser
	    $txtPassword.Text = $varVIPassword
	    $chkWholeFarm.Checked = $varScopeWholeFarm
	    $comboDatacenter.Text = $varScopeDatacenter
		$lblConnectDatacenter.Text = $varScopeDatacenter
	    $comboCluster.Text = $varScopeCluster
		$lblConnectCluster.Text = $varScopeCluster
	    $comboHost.Text = $varScopeHost
		$lblConnectHost.Text = $varScopeHost
	    $chkRptHostsDatastore.Checked = $varReportHostsDatastore
	    $dialRptHostsDatastorePercent.Text = $varReportHostsDatastoreThreshold
	    $chkRptVMSnapshots.Checked = $varReportVMSnapshots
	    $dialRptVMSnapThresh.Text = $varReportVMSnapshotsThreshold
	    $chkRptVMThinProvisioned.Checked = $varReportVMThinProvisioned
	    $chkRptSelective.Checked = $varReportSelective
	    $chkRptVCVMsCreated.Checked = $varReportVCVMsCreated
	    $chkRptVCVMsDeleted.Checked = $varReportVCVMsDeleted
	    $chkRptVCErrors.Checked = $varReportVCErrors
	    $chkRptHostsNotResponding.Checked = $varReportHostsNotResponding
	    $chkRptHostsInMaint.Checked = $varReportHostsInMaint
	    $chkRptVMTools.Checked = $varReportVMTools
	    $chkRptVMCDConnected.Checked = $varReportCDConnected
	    $chkRptVMFloppyConnected.Checked = $varReportFloppyConnected
	    $chkRptVCEvtLogs.Checked = $varReportVCEvntlogs
	    $dialRptVCErrorsAge.Text = $varReportVCErrorsAge
	    $dialRptVCEventlogsAge.Text = $varReportVCEventLogsAge
	    $comboReportStyle.DisplayMember = $varReportStyle
	}
	
	function Set-ConnectionInfoLabel
	{
	    $lblConnectServer.Text = $varVIServer
	    if ($varScopeWholeFarm)
	    {
	        $lblConnectDatacenter.Text = "Whole Farm"
	        $lblConnectCluster.Text = "Whole Farm"
	        $lblConnectHost.Text = "Whole Farm"
		}
	    else
	    {
	        $lblConnectDatacenter.Text = $varScopeDatacenter
	        $lblConnectCluster.Text = $varScopeCluster
	        $lblConnectHost.Text = $varScopeHost
		}
	    if ($varUseCurrentUser)
	    {
	        $lblConnectLogon.Text = "<Current User>"
		}
	    else
	    {
	        $lblConnectLogon.Text = "$varVIUser - <Password>"
		}
	}
	
	# Account for all of our form control depenencies.
	function Set-FormControlsState
	{
	    # Snapshot checkbox
	    if ($chkRptVMSnapshots.Checked)
		{
	        $dialRptVMSnapThresh.Enabled = $true
		}
		else
		{
	        $dialRptVMSnapThresh.Enabled = $false
		}
	    
	    # Datastore checkbox
	    if ($chkRptHostsDatastore.Checked)
		{
	        $dialRptHostsDatastorePercent.Enabled = $true
		}
		else
		{
	        $dialRptHostsDatastorePercent.Enabled = $false
		}
	    
	    #Saved Locally Checkbox
	    if ($chkSaveLocally.Checked)
		{
			$buttonBrowseFolder.Enabled = $true
	        $txtReportFolder.Enabled = $true
			$txtReportName.Enabled = $true
		}
		else
		{
			$buttonBrowseFolder.Enabled = $false
	        $txtReportFolder.Enabled = $false
			$txtReportName.Enabled = $false
		}
	    
	    # Email Checkbox
		if ($chkEmailReport.Checked)
		{
	        $txtEmailSubject.Enabled = $true
	        $txtEmailRecipient.Enabled = $true
	        $txtEmailSender.Enabled = $true
	        $txtSMTPServer.Enabled = $true
		}
		else
		{
	        $txtEmailSubject.Enabled = $false        
	        $txtEmailRecipient.Enabled = $false
	        $txtEmailSender.Enabled = $false
	        $txtSMTPServer.Enabled = $false
		}
	    if ($VIConnected)
	    {
	        $comboDatacenter.Enabled = $true
	        $grpVMwareSettings.Enabled = $true
		}
	    else
	    {
	        $comboDatacenter.Enabled = $false
	        $grpVMwareSettings.Enabled = $false
		}
	    # Whole Farm Checkbox
	    if ($chkWholeFarm.Checked)
		{
	        $comboDatacenter.Enabled = $true
	        $comboCluster.Enabled = $false
	        $comboHost.Enabled = $false
	        $grpVC.Enabled = $true
	     }
		else
		{
	        if ($VIConnected)
	        {
	
			}
	        $grpVC.Enabled = $false
		}
	    
	    # VM Deletions requires VC Error reporting
	    if ($chkRptVCErrors.Checked)
	    {
	        $chkRptVCVMsDeleted.Enabled = $true
	        $chkRptVCVMsCreated.Enabled = $true
	        
		}
	    else
	    {
	        $chkRptVCVMsDeleted.Enabled = $false
	        $chkRptVCVMsCreated.Enabled = $false
		}
	}
	
	function PopulateVIDatacenters
	{
	    $x=0    
	    Load-ComboBox $comboCluster ''
	    Load-ComboBox $comboHost ''
	    foreach ($Datacenter in (Get-Datacenter))
	    {
	        $x++
	        if ($x++ -eq 1)
	        {
	            Load-ComboBox $comboDatacenter $Datacenter.Name
			}
	        else
	        {
	            Load-ComboBox $comboDatacenter $Datacenter.Name -Append
			}
		}
	}
	
	function PopulateVIClusters
	{
	    # Only try to populate if a datacenter has been selected
	    If ($comboDatacenter.Text -ne '')
	    {
	        Load-ComboBox $comboHost ''
	        Load-ComboBox $comboCluster ''
	        foreach ($Cluster in ((Get-Datacenter $comboDatacenter.Text) | Get-Cluster))
	        {
	            Load-ComboBox $comboCluster $Cluster.Name -Append
			}    	
		}
	}
	
	function PopulateVIHosts
	{ 
	    # Only try to populate if a cluster has been selected
	    If ($comboCluster.Text -ne "")
	    {
	        Load-ComboBox $comboHost ''
	        foreach ($VMH in ((Get-Cluster $comboCluster.Text) | Get-VMHost))
	        {
	            Load-ComboBox $comboHost $VMH.Name -Append
	    	}
		}
	}
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
	}
	
	$form1_FadeInLoad={
		#Start the Timer to Fade In
		$timerFadeIn.Start()
		$MainForm.Opacity = 0
		if (Load-Config)
	    {
	        Load-ComboBox $comboReportStyle ($Styles)
	        Load-FormConfig
	        Set-FormControlsState       
		}
		Set-ConnectionInfoLabel
	    #	$txtScheduledTask.Text = @"
	    #In an administrative EMC console run the following:
	    # cd `$exscripts
	    # .\ManageScheduledTask.ps1 -Install –ServerName <Your Server> -PsScriptPath "$($ScriptDirectory)$($StarterScript)" –TaskName "Troubleshoot Exchange 2010 Mailbox Servers"
	    #"@
	}
	
	$timerFadeIn_Tick={
		#Can you see me now?
		if($MainForm.Opacity -lt 1)
		{
			$MainForm.Opacity += 0.1
			
			if($MainForm.Opacity -ge 1)
			{
				#Stop the timer once we are 100% visible
				$timerFadeIn.Stop()
			}
		}
	}
	
	$buttonBrowse_Click={
	
		if($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$txtReportFolder.Text = $openfiledialog1.FileName
		}
	}
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$listBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$buttonSave_Click={
	    Set-SaveData
	    if (Save-Config)
	    {
	        Set-ConnectionInfoLabel
	        #[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Configuration saved.","All went well!")
		}
	}
	
	$buttonRun_Click={
	   	$script = $ScriptDirectory + $StarterScript
	   	&$script
	}
	
	$buttonBrowse_Click2={
	
		if($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$txtReportFolder.Text = $openfiledialog1.FileName
		}
	}
	
	$chkSaveLocally_CheckedChanged={
		if ($chkSaveLocally.Checked)
		{
			$buttonBrowseFolder.Enabled = $true
	        $txtReportFolder.Enabled = $true
			$txtReportName.Enabled = $true
		}
		else
		{
			$buttonBrowseFolder.Enabled = $false
	        $txtReportFolder.Enabled = $false
			$txtReportName.Enabled = $false
		}
	}
	
	$buttonBrowseFolder_Click={
		if($folderbrowserdialog1.ShowDialog() -eq 'OK')
		{
			$txtReportFolder.Text = $folderbrowserdialog1.SelectedPath
		}
	}
	$chkEmailReport_CheckedChanged={
		if ($chkEmailReport.Checked)
		{
	        $txtEmailSubject.Enabled = $true
	        $txtEmailRecipient.Enabled = $true
	        $txtEmailSender.Enabled = $true
	        $txtSMTPServer.Enabled = $true
		}
		else
		{
	        $txtEmailSubject.Enabled = $false        
	        $txtEmailRecipient.Enabled = $false
	        $txtEmailSender.Enabled = $false
	        $txtSMTPServer.Enabled = $false
		}
	}
	
	$chkWholeFarm_CheckedChanged={
	    if ($chkWholeFarm.Checked)
		{
	        $comboDatacenter.Enabled = $false
	        $comboCluster.Enabled = $false
	        $comboHost.Enabled = $false
	        $grpVC.Enabled = $true
	     }
		else
		{
	        if ($VIConnected)
	        {
	            PopulateVIDatacenters
	            $comboDatacenter.Enabled = $true
			}
	        $grpVC.Enabled = $false
		}
	}
	
	$chkCurrentUser_CheckedChanged={
	    if ($chkCurrentUser.Checked)
		{
	        $txtUser.Enabled = $false
	        $txtPassword.Enabled = $false
		}
		else
		{
	        $txtUser.Enabled = $true
	        $txtPassword.Enabled = $true
		}
	}
	
	$buttonConnect_Click={
	    $Snapins=@(’VMware.VimAutomation.Core’)
	    $RequiredSnapinsLoaded=$True 
	    if ($Snapins.Count -ge 1) 
	    {
	    	Foreach ($Snapin in $Snapins)
	    	{
	    		Add-PSSnapin $Snapin –ErrorAction SilentlyContinue 
	    		if ((Get-PSSnapin $Snapin) –eq $NULL) 
	    		{
	    			$RequiredSnapinsLoaded=$false
	    		} 
	     	}
	    }
	    if ($RequiredSnapinsLoaded) 
	    { 
	    	# Connect to the server
	        if ($chkCurrentUser.Checked)
	        {
	        	$VIConnection = Connect-VIServer $txtvCenterServer.Text -ErrorAction:SilentlyContinue
	        }
	        else
	        {
	        	$VIConnection = Connect-VIServer $txtvCenterServer.Text `
	             -User $txtUser.Text -Password $txtPassword.text -ErrorAction:SilentlyContinue
	        }
	        If ($VIConnection.IsConnected) 
	        {
	            $VIConnected = $true
	            $grpVMwareSettings.Enabled = $true
	            $btnSaveAndRun.Enabled = $true
	    	}
	        else
	        {
	            $VIConnected = $false
	            $grpVMwareSettings.Enabled = $false
	            $btnSaveAndRun.Enabled = $false
	    	}
	    }
	}
	
	$chkRptDatastore_CheckedChanged={
	    if ($chkRptHostsDatastore.Checked)
		{
	        $dialRptHostsDatastorePercent.Enabled = $true
		}
		else
		{
	        $dialRptHostsDatastorePercent.Enabled = $false
		}
	}
	
	$chkRptVMSnapshots_CheckedChanged={
	    if ($chkRptVMSnapshots.Checked)
		{
	        $dialRptVMSnapThresh.Enabled = $true
		}
		else
		{
	        $dialRptVMSnapThresh.Enabled = $false
		}
	}
	
	$comboCluster_SelectedIndexChanged={
		if ($comboCluster.Text -ne '')
	    {
	        $comboHost.Enabled = $true
	        PopulateVIHosts
		}
	    else
	    {
	        $comboHost.Enabled = $true
	        Load-ComboBox $comboHost ''
		}
	}
	
	$comboDatacenter_SelectedIndexChanged={
	    $comboCluster.Enabled = $true
	    PopulateVIClusters
	}
	$chkRptVCErrors_CheckedChanged={
		if ($chkRptVCErrors.Checked)
	    {
	        $chkRptVCVMsDeleted.Enabled = $true
	        $chkRptVCVMsCreated.Enabled = $true
		}
	    else
	    {
	        $chkRptVCVMsDeleted.Enabled = $false
	        $chkRptVCVMsCreated.Enabled = $false
		}
	}
	
	$btnSaveAndRun_Click={
		Set-SaveData
	    if (Save-Config)
	    {
	    	# Run the script
	    	$script = $ScriptDirectory + $StarterScript
	    	&$script
		}
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_txtvCenterServer = $txtvCenterServer.Text
		$script:MainForm_chkCurrentUser = $chkCurrentUser.Checked
		$script:MainForm_txtUser = $txtUser.Text
		$script:MainForm_comboHost = $comboHost.Text
		$script:MainForm_comboCluster = $comboCluster.Text
		$script:MainForm_comboDatacenter = $comboDatacenter.Text
		$script:MainForm_chkWholeFarm = $chkWholeFarm.Checked
		$script:MainForm_chkRptVCServices = $chkRptVCServices.Checked
		$script:MainForm_dialRptVCEventlogsAge = $dialRptVCEventlogsAge.Value
		$script:MainForm_chkRptVCEvtLogs = $chkRptVCEvtLogs.Checked
		$script:MainForm_dialRptVCErrorsAge = $dialRptVCErrorsAge.Value
		$script:MainForm_chkRptVCErrors = $chkRptVCErrors.Checked
		$script:MainForm_chkRptVCVMsDeleted = $chkRptVCVMsDeleted.Checked
		$script:MainForm_chkRptVCVMsCreated = $chkRptVCVMsCreated.Checked
		$script:MainForm_chkRptHostsInMaint = $chkRptHostsInMaint.Checked
		$script:MainForm_chkRptHostsNotResponding = $chkRptHostsNotResponding.Checked
		$script:MainForm_dialRptHostsDatastorePercent = $dialRptHostsDatastorePercent.Value
		$script:MainForm_chkRptHostsDatastore = $chkRptHostsDatastore.Checked
		$script:MainForm_chkRptSelective = $chkRptSelective.Checked
		$script:MainForm_chkRptVMFloppyConnected = $chkRptVMFloppyConnected.Checked
		$script:MainForm_chkRptVMCDConnected = $chkRptVMCDConnected.Checked
		$script:MainForm_chkRptVMTools = $chkRptVMTools.Checked
		$script:MainForm_chkRptVMThinProvisioned = $chkRptVMThinProvisioned.Checked
		$script:MainForm_dialRptVMSnapThresh = $dialRptVMSnapThresh.Value
		$script:MainForm_chkRptVMSnapshots = $chkRptVMSnapshots.Checked
		$script:MainForm_txtTaskName = $txtTaskName.Text
		$script:MainForm_comboReportStyle = $comboReportStyle.Text
		$script:MainForm_txtEmailSubject = $txtEmailSubject.Text
		$script:MainForm_chkEmailReport = $chkEmailReport.Checked
		$script:MainForm_txtReportName = $txtReportName.Text
		$script:MainForm_chkSaveLocally = $chkSaveLocally.Checked
		$script:MainForm_txtReportFolder = $txtReportFolder.Text
		$script:MainForm_txtSMTPServer = $txtSMTPServer.Text
		$script:MainForm_txtEmailRecipient = $txtEmailRecipient.Text
		$script:MainForm_txtEmailSender = $txtEmailSender.Text
		$script:MainForm_richtextbox1 = $richtextbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$btnSaveAndRun.remove_Click($btnSaveAndRun_Click)
			$buttonSave.remove_Click($buttonSave_Click)
			$buttonRun.remove_Click($buttonRun_Click)
			$buttonConnect.remove_Click($buttonConnect_Click)
			$chkCurrentUser.remove_CheckedChanged($chkCurrentUser_CheckedChanged)
			$comboCluster.remove_SelectedIndexChanged($comboCluster_SelectedIndexChanged)
			$comboDatacenter.remove_SelectedIndexChanged($comboDatacenter_SelectedIndexChanged)
			$chkWholeFarm.remove_CheckedChanged($chkWholeFarm_CheckedChanged)
			$chkRptVCErrors.remove_CheckedChanged($chkRptVCErrors_CheckedChanged)
			$chkRptVMSnapshots.remove_CheckedChanged($chkRptVMSnapshots_CheckedChanged)
			$chkEmailReport.remove_CheckedChanged($chkEmailReport_CheckedChanged)
			$chkSaveLocally.remove_CheckedChanged($chkSaveLocally_CheckedChanged)
			$buttonBrowseFolder.remove_Click($buttonBrowseFolder_Click)
			$MainForm.remove_Load($form1_FadeInLoad)
			$timerFadeIn.remove_Tick($timerFadeIn_Tick)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# MainForm
	#
	$MainForm.Controls.Add($btnSaveAndRun)
	$MainForm.Controls.Add($buttonCancel)
	$MainForm.Controls.Add($buttonSave)
	$MainForm.Controls.Add($buttonRun)
	$MainForm.Controls.Add($tabcontrol1)
	$MainForm.ClientSize = '445, 463'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "VMware Report GUI - 0.0.2"
	$MainForm.add_Load($form1_FadeInLoad)
	#
	# btnSaveAndRun
	#
	$btnSaveAndRun.Enabled = $False
	$btnSaveAndRun.Location = '178, 436'
	$btnSaveAndRun.Name = "btnSaveAndRun"
	$btnSaveAndRun.Size = '98, 23'
	$btnSaveAndRun.TabIndex = 203
	$btnSaveAndRun.Text = "Save and Run!"
	$tooltipAll.SetToolTip($btnSaveAndRun, "Saves configuration and runs the script.")
	$btnSaveAndRun.UseVisualStyleBackColor = $True
	$btnSaveAndRun.add_Click($btnSaveAndRun_Click)
	#
	# buttonCancel
	#
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '363, 436'
	$buttonCancel.Name = "buttonCancel"
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 202
	$buttonCancel.Text = "Cancel"
	$buttonCancel.UseVisualStyleBackColor = $True
	#
	# buttonSave
	#
	$buttonSave.Location = '282, 436'
	$buttonSave.Name = "buttonSave"
	$buttonSave.Size = '75, 23'
	$buttonSave.TabIndex = 201
	$buttonSave.Text = "Save"
	$buttonSave.UseVisualStyleBackColor = $True
	$buttonSave.add_Click($buttonSave_Click)
	#
	# buttonRun
	#
	$buttonRun.Location = '97, 436'
	$buttonRun.Name = "buttonRun"
	$buttonRun.Size = '75, 23'
	$buttonRun.TabIndex = 200
	$buttonRun.Text = "Run!"
	$tooltipAll.SetToolTip($buttonRun, "Runs the script with prior save data")
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_Click($buttonRun_Click)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage6)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage5)
	$tabcontrol1.Location = '5, 4'
	$tabcontrol1.Name = "tabcontrol1"
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '436, 430'
	$tabcontrol1.TabIndex = 40
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($grpConnectionInfo)
	$tabpage1.Controls.Add($grpCredentials)
	$tabpage1.Controls.Add($grpVMwareSettings)
	$tabpage1.BackColor = 'ControlLight'
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = "tabpage1"
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '428, 404'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = "Script Settings"
	#
	# grpConnectionInfo
	#
	$grpConnectionInfo.Controls.Add($lblConnectHost)
	$grpConnectionInfo.Controls.Add($lblConnectCluster)
	$grpConnectionInfo.Controls.Add($lblConnectDatacenter)
	$grpConnectionInfo.Controls.Add($lblConnectServer)
	$grpConnectionInfo.Controls.Add($lblConnectLogon)
	$grpConnectionInfo.Controls.Add($label3)
	$grpConnectionInfo.Controls.Add($label4)
	$grpConnectionInfo.Controls.Add($label2)
	$grpConnectionInfo.Controls.Add($label1)
	$grpConnectionInfo.Controls.Add($labelLogon)
	$grpConnectionInfo.Location = '7, 240'
	$grpConnectionInfo.Name = "grpConnectionInfo"
	$grpConnectionInfo.Size = '407, 158'
	$grpConnectionInfo.TabIndex = 3
	$grpConnectionInfo.TabStop = $False
	$grpConnectionInfo.Text = "Saved Connection Info (Last Valid Save)"
	#
	# lblConnectHost
	#
	$lblConnectHost.BorderStyle = 'FixedSingle'
	$lblConnectHost.Font = "Microsoft Sans Serif, 8.25pt, style=Italic"
	$lblConnectHost.Location = '92, 105'
	$lblConnectHost.Name = "lblConnectHost"
	$lblConnectHost.Size = '307, 20'
	$lblConnectHost.TabIndex = 99
	$lblConnectHost.Text = "NA"
	$lblConnectHost.TextAlign = 'MiddleLeft'
	#
	# lblConnectCluster
	#
	$lblConnectCluster.BorderStyle = 'FixedSingle'
	$lblConnectCluster.Font = "Microsoft Sans Serif, 8.25pt, style=Italic"
	$lblConnectCluster.Location = '92, 85'
	$lblConnectCluster.Name = "lblConnectCluster"
	$lblConnectCluster.Size = '307, 20'
	$lblConnectCluster.TabIndex = 98
	$lblConnectCluster.Text = "NA"
	$lblConnectCluster.TextAlign = 'MiddleLeft'
	#
	# lblConnectDatacenter
	#
	$lblConnectDatacenter.BorderStyle = 'FixedSingle'
	$lblConnectDatacenter.Font = "Microsoft Sans Serif, 8.25pt, style=Italic"
	$lblConnectDatacenter.Location = '92, 64'
	$lblConnectDatacenter.Name = "lblConnectDatacenter"
	$lblConnectDatacenter.Size = '307, 21'
	$lblConnectDatacenter.TabIndex = 97
	$lblConnectDatacenter.Text = "NA"
	$lblConnectDatacenter.TextAlign = 'MiddleLeft'
	#
	# lblConnectServer
	#
	$lblConnectServer.BorderStyle = 'FixedSingle'
	$lblConnectServer.Font = "Microsoft Sans Serif, 8.25pt, style=Italic"
	$lblConnectServer.Location = '92, 23'
	$lblConnectServer.Name = "lblConnectServer"
	$lblConnectServer.Size = '307, 20'
	$lblConnectServer.TabIndex = 96
	$lblConnectServer.Text = "NA"
	$lblConnectServer.TextAlign = 'MiddleLeft'
	#
	# lblConnectLogon
	#
	$lblConnectLogon.BorderStyle = 'FixedSingle'
	$lblConnectLogon.Font = "Microsoft Sans Serif, 8.25pt, style=Italic"
	$lblConnectLogon.Location = '92, 43'
	$lblConnectLogon.Name = "lblConnectLogon"
	$lblConnectLogon.Size = '307, 21'
	$lblConnectLogon.TabIndex = 95
	$lblConnectLogon.Text = "NA"
	$lblConnectLogon.TextAlign = 'MiddleLeft'
	#
	# label3
	#
	$label3.BorderStyle = 'FixedSingle'
	$label3.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$label3.Location = '6, 105'
	$label3.Name = "label3"
	$label3.Size = '80, 20'
	$label3.TabIndex = 94
	$label3.Text = "Host:"
	$label3.TextAlign = 'MiddleRight'
	#
	# label4
	#
	$label4.BorderStyle = 'FixedSingle'
	$label4.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$label4.Location = '6, 85'
	$label4.Name = "label4"
	$label4.Size = '80, 20'
	$label4.TabIndex = 93
	$label4.Text = "Cluster:"
	$label4.TextAlign = 'MiddleRight'
	#
	# label2
	#
	$label2.BorderStyle = 'FixedSingle'
	$label2.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$label2.Location = '6, 64'
	$label2.Name = "label2"
	$label2.Size = '80, 21'
	$label2.TabIndex = 92
	$label2.Text = "Datacenter:"
	$label2.TextAlign = 'MiddleRight'
	#
	# label1
	#
	$label1.BorderStyle = 'FixedSingle'
	$label1.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$label1.Location = '6, 23'
	$label1.Name = "label1"
	$label1.Size = '80, 20'
	$label1.TabIndex = 91
	$label1.Text = "Server:"
	$label1.TextAlign = 'MiddleRight'
	#
	# labelLogon
	#
	$labelLogon.BorderStyle = 'FixedSingle'
	$labelLogon.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelLogon.Location = '6, 43'
	$labelLogon.Name = "labelLogon"
	$labelLogon.Size = '80, 21'
	$labelLogon.TabIndex = 89
	$labelLogon.Text = "Logon:"
	$labelLogon.TextAlign = 'MiddleRight'
	#
	# grpCredentials
	#
	$grpCredentials.Controls.Add($txtvCenterServer)
	$grpCredentials.Controls.Add($labelServer)
	$grpCredentials.Controls.Add($buttonConnect)
	$grpCredentials.Controls.Add($chkCurrentUser)
	$grpCredentials.Controls.Add($labelCurrentUser)
	$grpCredentials.Controls.Add($txtUser)
	$grpCredentials.Controls.Add($txtPassword)
	$grpCredentials.Controls.Add($labelUser)
	$grpCredentials.Controls.Add($labelPassword)
	$grpCredentials.Location = '6, 6'
	$grpCredentials.Name = "grpCredentials"
	$grpCredentials.Size = '409, 110'
	$grpCredentials.TabIndex = 1
	$grpCredentials.TabStop = $False
	$grpCredentials.Text = "Credentials"
	#
	# txtvCenterServer
	#
	$txtvCenterServer.Location = '102, 15'
	$txtvCenterServer.Name = "txtvCenterServer"
	$txtvCenterServer.Size = '211, 20'
	$txtvCenterServer.TabIndex = 0
	$txtvCenterServer.Text = "localhost"
	#
	# labelServer
	#
	$labelServer.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelServer.Location = '35, 15'
	$labelServer.Name = "labelServer"
	$labelServer.Size = '51, 20'
	$labelServer.TabIndex = 88
	$labelServer.Text = "Server"
	$labelServer.TextAlign = 'MiddleRight'
	#
	# buttonConnect
	#
	$buttonConnect.Location = '327, 81'
	$buttonConnect.Name = "buttonConnect"
	$buttonConnect.Size = '73, 23'
	$buttonConnect.TabIndex = 4
	$buttonConnect.Text = "Connect!"
	$buttonConnect.UseVisualStyleBackColor = $True
	$buttonConnect.add_Click($buttonConnect_Click)
	#
	# chkCurrentUser
	#
	$chkCurrentUser.Checked = $True
	$chkCurrentUser.CheckState = 'Checked'
	$chkCurrentUser.Location = '102, 38'
	$chkCurrentUser.Name = "chkCurrentUser"
	$chkCurrentUser.Size = '16, 20'
	$chkCurrentUser.TabIndex = 1
	$chkCurrentUser.UseVisualStyleBackColor = $True
	$chkCurrentUser.add_CheckedChanged($chkCurrentUser_CheckedChanged)
	#
	# labelCurrentUser
	#
	$labelCurrentUser.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelCurrentUser.Location = '3, 38'
	$labelCurrentUser.Name = "labelCurrentUser"
	$labelCurrentUser.Size = '83, 20'
	$labelCurrentUser.TabIndex = 85
	$labelCurrentUser.Text = "Current User"
	$labelCurrentUser.TextAlign = 'MiddleRight'
	#
	# txtUser
	#
	$txtUser.Enabled = $False
	$txtUser.Location = '102, 58'
	$txtUser.Name = "txtUser"
	$txtUser.Size = '211, 20'
	$txtUser.TabIndex = 2
	#
	# txtPassword
	#
	$txtPassword.Enabled = $False
	$txtPassword.Location = '102, 84'
	$txtPassword.Name = "txtPassword"
	$txtPassword.PasswordChar = '*'
	$txtPassword.Size = '212, 20'
	$txtPassword.TabIndex = 3
	#
	# labelUser
	#
	$labelUser.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelUser.Location = '24, 58'
	$labelUser.Name = "labelUser"
	$labelUser.Size = '63, 21'
	$labelUser.TabIndex = 80
	$labelUser.Text = "User"
	$labelUser.TextAlign = 'MiddleRight'
	#
	# labelPassword
	#
	$labelPassword.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelPassword.Location = '23, 86'
	$labelPassword.Name = "labelPassword"
	$labelPassword.Size = '63, 20'
	$labelPassword.TabIndex = 81
	$labelPassword.Text = "Password"
	$labelPassword.TextAlign = 'MiddleRight'
	#
	# grpVMwareSettings
	#
	$grpVMwareSettings.Controls.Add($comboHost)
	$grpVMwareSettings.Controls.Add($labelHost)
	$grpVMwareSettings.Controls.Add($comboCluster)
	$grpVMwareSettings.Controls.Add($comboDatacenter)
	$grpVMwareSettings.Controls.Add($chkWholeFarm)
	$grpVMwareSettings.Controls.Add($labelCluster)
	$grpVMwareSettings.Controls.Add($labelWholeFarm)
	$grpVMwareSettings.Controls.Add($labelDatacenter)
	$grpVMwareSettings.Enabled = $False
	$grpVMwareSettings.Location = '7, 122'
	$grpVMwareSettings.Name = "grpVMwareSettings"
	$grpVMwareSettings.Size = '408, 114'
	$grpVMwareSettings.TabIndex = 2
	$grpVMwareSettings.TabStop = $False
	$grpVMwareSettings.Text = "Scope"
	#
	# comboHost
	#
	$comboHost.DropDownStyle = 'DropDownList'
	$comboHost.Enabled = $False
	$comboHost.FormattingEnabled = $True
	$comboHost.Location = '101, 89'
	$comboHost.Name = "comboHost"
	$comboHost.Size = '298, 21'
	$comboHost.Sorted = $True
	$comboHost.TabIndex = 8
	#
	# labelHost
	#
	$labelHost.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelHost.Location = '13, 91'
	$labelHost.Name = "labelHost"
	$labelHost.Size = '72, 20'
	$labelHost.TabIndex = 88
	$labelHost.Text = "Host"
	$labelHost.TextAlign = 'MiddleRight'
	#
	# comboCluster
	#
	$comboCluster.DropDownStyle = 'DropDownList'
	$comboCluster.Enabled = $False
	$comboCluster.FormattingEnabled = $True
	$comboCluster.Location = '101, 62'
	$comboCluster.Name = "comboCluster"
	$comboCluster.Size = '298, 21'
	$comboCluster.TabIndex = 7
	$comboCluster.add_SelectedIndexChanged($comboCluster_SelectedIndexChanged)
	#
	# comboDatacenter
	#
	$comboDatacenter.DropDownStyle = 'DropDownList'
	$comboDatacenter.Enabled = $False
	$comboDatacenter.FormattingEnabled = $True
	$comboDatacenter.Location = '101, 35'
	$comboDatacenter.Name = "comboDatacenter"
	$comboDatacenter.Size = '298, 21'
	$comboDatacenter.TabIndex = 6
	$comboDatacenter.add_SelectedIndexChanged($comboDatacenter_SelectedIndexChanged)
	#
	# chkWholeFarm
	#
	$chkWholeFarm.Checked = $True
	$chkWholeFarm.CheckState = 'Checked'
	$chkWholeFarm.Location = '102, 12'
	$chkWholeFarm.Name = "chkWholeFarm"
	$chkWholeFarm.Size = '19, 24'
	$chkWholeFarm.TabIndex = 5
	$chkWholeFarm.UseVisualStyleBackColor = $True
	$chkWholeFarm.add_CheckedChanged($chkWholeFarm_CheckedChanged)
	#
	# labelCluster
	#
	$labelCluster.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelCluster.Location = '13, 64'
	$labelCluster.Name = "labelCluster"
	$labelCluster.Size = '72, 20'
	$labelCluster.TabIndex = 83
	$labelCluster.Text = "Cluster"
	$labelCluster.TextAlign = 'MiddleRight'
	#
	# labelWholeFarm
	#
	$labelWholeFarm.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelWholeFarm.Location = '10, 13'
	$labelWholeFarm.Name = "labelWholeFarm"
	$labelWholeFarm.Size = '76, 20'
	$labelWholeFarm.TabIndex = 82
	$labelWholeFarm.Text = "Whole Farm"
	$labelWholeFarm.TextAlign = 'MiddleRight'
	#
	# labelDatacenter
	#
	$labelDatacenter.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelDatacenter.Location = '13, 34'
	$labelDatacenter.Name = "labelDatacenter"
	$labelDatacenter.Size = '72, 20'
	$labelDatacenter.TabIndex = 81
	$labelDatacenter.Text = "Datacenter"
	$labelDatacenter.TextAlign = 'MiddleRight'
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($grpVC)
	$tabpage6.Controls.Add($grpHosts)
	$tabpage6.Controls.Add($grpReportGeneral)
	$tabpage6.Controls.Add($grpVMs)
	$tabpage6.BackColor = 'ControlLight'
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = "tabpage6"
	$tabpage6.Size = '428, 404'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = "Report Options"
	#
	# grpVC
	#
	$grpVC.Controls.Add($chkRptVCServices)
	$grpVC.Controls.Add($labelVCServiceStatus)
	$grpVC.Controls.Add($dialRptVCEventlogsAge)
	$grpVC.Controls.Add($labelWindowsEventLogError)
	$grpVC.Controls.Add($chkRptVCEvtLogs)
	$grpVC.Controls.Add($labelEventLogErrWarn)
	$grpVC.Controls.Add($dialRptVCErrorsAge)
	$grpVC.Controls.Add($labelVCErrorEventsTheshol)
	$grpVC.Controls.Add($chkRptVCErrors)
	$grpVC.Controls.Add($labelVCEventErrors)
	$grpVC.Controls.Add($chkRptVCVMsDeleted)
	$grpVC.Controls.Add($labelVMsDeleted)
	$grpVC.Controls.Add($chkRptVCVMsCreated)
	$grpVC.Controls.Add($labelVMsCreatedCloned)
	$grpVC.Location = '3, 59'
	$grpVC.Name = "grpVC"
	$grpVC.Size = '413, 130'
	$grpVC.TabIndex = 1
	$grpVC.TabStop = $False
	$grpVC.Text = "Virtual Center"
	#
	# chkRptVCServices
	#
	$chkRptVCServices.Checked = $True
	$chkRptVCServices.CheckState = 'Checked'
	$chkRptVCServices.Location = '148, 97'
	$chkRptVCServices.Name = "chkRptVCServices"
	$chkRptVCServices.Size = '20, 24'
	$chkRptVCServices.TabIndex = 7
	$chkRptVCServices.UseVisualStyleBackColor = $True
	#
	# labelVCServiceStatus
	#
	$labelVCServiceStatus.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelVCServiceStatus.Location = '11, 97'
	$labelVCServiceStatus.Name = "labelVCServiceStatus"
	$labelVCServiceStatus.Size = '131, 23'
	$labelVCServiceStatus.TabIndex = 122
	$labelVCServiceStatus.Text = "VC Service Status"
	$labelVCServiceStatus.TextAlign = 'MiddleRight'
	#
	# dialRptVCEventlogsAge
	#
	$dialRptVCEventlogsAge.Location = '331, 80'
	$dialRptVCEventlogsAge.Name = "dialRptVCEventlogsAge"
	$dialRptVCEventlogsAge.Size = '37, 20'
	$dialRptVCEventlogsAge.TabIndex = 6
	$tooltipAll.SetToolTip($dialRptVCEventlogsAge, "Amount of days to report.")
	$dialRptVCEventlogsAge.Value = 3
	#
	# labelWindowsEventLogError
	#
	$labelWindowsEventLogError.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelWindowsEventLogError.Location = '168, 67'
	$labelWindowsEventLogError.Name = "labelWindowsEventLogError"
	$labelWindowsEventLogError.Size = '159, 40'
	$labelWindowsEventLogError.TabIndex = 120
	$labelWindowsEventLogError.Text = "Windows Event Log Error/Warning Threshold"
	$labelWindowsEventLogError.TextAlign = 'MiddleRight'
	#
	# chkRptVCEvtLogs
	#
	$chkRptVCEvtLogs.Checked = $True
	$chkRptVCEvtLogs.CheckState = 'Checked'
	$chkRptVCEvtLogs.Location = '148, 76'
	$chkRptVCEvtLogs.Name = "chkRptVCEvtLogs"
	$chkRptVCEvtLogs.Size = '20, 24'
	$chkRptVCEvtLogs.TabIndex = 5
	$chkRptVCEvtLogs.UseVisualStyleBackColor = $True
	#
	# labelEventLogErrWarn
	#
	$labelEventLogErrWarn.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelEventLogErrWarn.Location = '11, 76'
	$labelEventLogErrWarn.Name = "labelEventLogErrWarn"
	$labelEventLogErrWarn.Size = '131, 23'
	$labelEventLogErrWarn.TabIndex = 119
	$labelEventLogErrWarn.Text = "Event Log Err/Warn"
	$labelEventLogErrWarn.TextAlign = 'MiddleRight'
	#
	# dialRptVCErrorsAge
	#
	$dialRptVCErrorsAge.Location = '331, 20'
	$dialRptVCErrorsAge.Name = "dialRptVCErrorsAge"
	$dialRptVCErrorsAge.Size = '37, 20'
	$dialRptVCErrorsAge.TabIndex = 2
	$tooltipAll.SetToolTip($dialRptVCErrorsAge, "Amount of days to report for added/removed VMs or VC errors.")
	$dialRptVCErrorsAge.Value = 3
	#
	# labelVCErrorEventsTheshol
	#
	$labelVCErrorEventsTheshol.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelVCErrorEventsTheshol.Location = '166, 19'
	$labelVCErrorEventsTheshol.Name = "labelVCErrorEventsTheshol"
	$labelVCErrorEventsTheshol.Size = '159, 24'
	$labelVCErrorEventsTheshol.TabIndex = 112
	$labelVCErrorEventsTheshol.Text = "VC Error Events Theshold"
	$labelVCErrorEventsTheshol.TextAlign = 'MiddleRight'
	#
	# chkRptVCErrors
	#
	$chkRptVCErrors.Checked = $True
	$chkRptVCErrors.CheckState = 'Checked'
	$chkRptVCErrors.Location = '148, 19'
	$chkRptVCErrors.Name = "chkRptVCErrors"
	$chkRptVCErrors.Size = '20, 20'
	$chkRptVCErrors.TabIndex = 1
	$chkRptVCErrors.UseVisualStyleBackColor = $True
	$chkRptVCErrors.add_CheckedChanged($chkRptVCErrors_CheckedChanged)
	#
	# labelVCEventErrors
	#
	$labelVCEventErrors.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelVCEventErrors.Location = '11, 17'
	$labelVCEventErrors.Name = "labelVCEventErrors"
	$labelVCEventErrors.Size = '131, 23'
	$labelVCEventErrors.TabIndex = 108
	$labelVCEventErrors.Text = "VC Event Errors"
	$labelVCEventErrors.TextAlign = 'MiddleRight'
	#
	# chkRptVCVMsDeleted
	#
	$chkRptVCVMsDeleted.Checked = $True
	$chkRptVCVMsDeleted.CheckState = 'Checked'
	$chkRptVCVMsDeleted.Location = '148, 57'
	$chkRptVCVMsDeleted.Name = "chkRptVCVMsDeleted"
	$chkRptVCVMsDeleted.Size = '20, 24'
	$chkRptVCVMsDeleted.TabIndex = 4
	$chkRptVCVMsDeleted.UseVisualStyleBackColor = $True
	#
	# labelVMsDeleted
	#
	$labelVMsDeleted.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelVMsDeleted.Location = '11, 57'
	$labelVMsDeleted.Name = "labelVMsDeleted"
	$labelVMsDeleted.Size = '131, 23'
	$labelVMsDeleted.TabIndex = 106
	$labelVMsDeleted.Text = "VMs Deleted"
	$labelVMsDeleted.TextAlign = 'MiddleRight'
	#
	# chkRptVCVMsCreated
	#
	$chkRptVCVMsCreated.Checked = $True
	$chkRptVCVMsCreated.CheckState = 'Checked'
	$chkRptVCVMsCreated.Location = '148, 41'
	$chkRptVCVMsCreated.Name = "chkRptVCVMsCreated"
	$chkRptVCVMsCreated.Size = '20, 16'
	$chkRptVCVMsCreated.TabIndex = 3
	$chkRptVCVMsCreated.UseVisualStyleBackColor = $True
	#
	# labelVMsCreatedCloned
	#
	$labelVMsCreatedCloned.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelVMsCreatedCloned.Location = '11, 36'
	$labelVMsCreatedCloned.Name = "labelVMsCreatedCloned"
	$labelVMsCreatedCloned.Size = '131, 24'
	$labelVMsCreatedCloned.TabIndex = 104
	$labelVMsCreatedCloned.Text = "VMs Created/Cloned"
	$labelVMsCreatedCloned.TextAlign = 'MiddleRight'
	#
	# grpHosts
	#
	$grpHosts.Controls.Add($chkRptHostsInMaint)
	$grpHosts.Controls.Add($labelInMaintinance)
	$grpHosts.Controls.Add($chkRptHostsNotResponding)
	$grpHosts.Controls.Add($dialRptHostsDatastorePercent)
	$grpHosts.Controls.Add($labelNotResponding)
	$grpHosts.Controls.Add($chkRptHostsDatastore)
	$grpHosts.Controls.Add($labelFreeThreshold)
	$grpHosts.Controls.Add($labelDatastoreUtilization)
	$grpHosts.Location = '5, 195'
	$grpHosts.Name = "grpHosts"
	$grpHosts.Size = '414, 63'
	$grpHosts.TabIndex = 2
	$grpHosts.TabStop = $False
	$grpHosts.Text = "Hosts"
	#
	# chkRptHostsInMaint
	#
	$chkRptHostsInMaint.Checked = $True
	$chkRptHostsInMaint.CheckState = 'Checked'
	$chkRptHostsInMaint.Location = '333, 14'
	$chkRptHostsInMaint.Name = "chkRptHostsInMaint"
	$chkRptHostsInMaint.Size = '20, 24'
	$chkRptHostsInMaint.TabIndex = 5
	$chkRptHostsInMaint.UseVisualStyleBackColor = $True
	#
	# labelInMaintinance
	#
	$labelInMaintinance.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelInMaintinance.Location = '196, 15'
	$labelInMaintinance.Name = "labelInMaintinance"
	$labelInMaintinance.Size = '129, 20'
	$labelInMaintinance.TabIndex = 104
	$labelInMaintinance.Text = "In Maintinance"
	$labelInMaintinance.TextAlign = 'MiddleRight'
	#
	# chkRptHostsNotResponding
	#
	$chkRptHostsNotResponding.Checked = $True
	$chkRptHostsNotResponding.CheckState = 'Checked'
	$chkRptHostsNotResponding.Location = '150, 14'
	$chkRptHostsNotResponding.Name = "chkRptHostsNotResponding"
	$chkRptHostsNotResponding.Size = '18, 24'
	$chkRptHostsNotResponding.TabIndex = 4
	$chkRptHostsNotResponding.UseVisualStyleBackColor = $True
	#
	# dialRptHostsDatastorePercent
	#
	$dialRptHostsDatastorePercent.Location = '331, 37'
	$dialRptHostsDatastorePercent.Name = "dialRptHostsDatastorePercent"
	$dialRptHostsDatastorePercent.Size = '37, 20'
	$dialRptHostsDatastorePercent.TabIndex = 7
	$dialRptHostsDatastorePercent.Value = 10
	#
	# labelNotResponding
	#
	$labelNotResponding.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelNotResponding.Location = '13, 15'
	$labelNotResponding.Name = "labelNotResponding"
	$labelNotResponding.Size = '129, 20'
	$labelNotResponding.TabIndex = 102
	$labelNotResponding.Text = "Not Responding"
	$labelNotResponding.TextAlign = 'MiddleRight'
	#
	# chkRptHostsDatastore
	#
	$chkRptHostsDatastore.Checked = $True
	$chkRptHostsDatastore.CheckState = 'Checked'
	$chkRptHostsDatastore.Location = '150, 35'
	$chkRptHostsDatastore.Name = "chkRptHostsDatastore"
	$chkRptHostsDatastore.Size = '18, 24'
	$chkRptHostsDatastore.TabIndex = 6
	$chkRptHostsDatastore.UseVisualStyleBackColor = $True
	#
	# labelFreeThreshold
	#
	$labelFreeThreshold.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelFreeThreshold.Location = '215, 35'
	$labelFreeThreshold.Name = "labelFreeThreshold"
	$labelFreeThreshold.Size = '110, 20'
	$labelFreeThreshold.TabIndex = 94
	$labelFreeThreshold.Text = "% Free Threshold"
	$labelFreeThreshold.TextAlign = 'MiddleRight'
	#
	# labelDatastoreUtilization
	#
	$labelDatastoreUtilization.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelDatastoreUtilization.Location = '7, 35'
	$labelDatastoreUtilization.Name = "labelDatastoreUtilization"
	$labelDatastoreUtilization.Size = '135, 20'
	$labelDatastoreUtilization.TabIndex = 93
	$labelDatastoreUtilization.Text = "Datastore Utilization"
	$labelDatastoreUtilization.TextAlign = 'MiddleRight'
	#
	# grpReportGeneral
	#
	$grpReportGeneral.Controls.Add($chkRptSelective)
	$grpReportGeneral.Controls.Add($labelGenerateReportOnlyWh)
	$grpReportGeneral.Location = '3, 12'
	$grpReportGeneral.Name = "grpReportGeneral"
	$grpReportGeneral.Size = '416, 44'
	$grpReportGeneral.TabIndex = 0
	$grpReportGeneral.TabStop = $False
	$grpReportGeneral.Text = "General"
	#
	# chkRptSelective
	#
	$chkRptSelective.Checked = $True
	$chkRptSelective.CheckState = 'Checked'
	$chkRptSelective.Location = '331, 20'
	$chkRptSelective.Name = "chkRptSelective"
	$chkRptSelective.Size = '18, 18'
	$chkRptSelective.TabIndex = 0
	$tooltipAll.SetToolTip($chkRptSelective, "This only applies to datastore space and snapshot age. ")
	$chkRptSelective.UseVisualStyleBackColor = $True
	#
	# labelGenerateReportOnlyWh
	#
	$labelGenerateReportOnlyWh.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelGenerateReportOnlyWh.Location = '7, 16'
	$labelGenerateReportOnlyWh.Name = "labelGenerateReportOnlyWh"
	$labelGenerateReportOnlyWh.Size = '308, 20'
	$labelGenerateReportOnlyWh.TabIndex = 93
	$labelGenerateReportOnlyWh.Text = "Generate Report Only When Thresholds Surpassed"
	$labelGenerateReportOnlyWh.TextAlign = 'MiddleRight'
	#
	# grpVMs
	#
	$grpVMs.Controls.Add($chkRptVMFloppyConnected)
	$grpVMs.Controls.Add($labelFloppyConnected)
	$grpVMs.Controls.Add($chkRptVMCDConnected)
	$grpVMs.Controls.Add($labelCDConnected)
	$grpVMs.Controls.Add($chkRptVMTools)
	$grpVMs.Controls.Add($labelNoVMwareTools)
	$grpVMs.Controls.Add($chkRptVMThinProvisioned)
	$grpVMs.Controls.Add($labelThinProvisioned)
	$grpVMs.Controls.Add($dialRptVMSnapThresh)
	$grpVMs.Controls.Add($chkRptVMSnapshots)
	$grpVMs.Controls.Add($labelSnapshotThreshold)
	$grpVMs.Controls.Add($labelSnapshots)
	$grpVMs.Location = '3, 264'
	$grpVMs.Name = "grpVMs"
	$grpVMs.Size = '416, 78'
	$grpVMs.TabIndex = 3
	$grpVMs.TabStop = $False
	$grpVMs.Text = "Virtual Machines"
	#
	# chkRptVMFloppyConnected
	#
	$chkRptVMFloppyConnected.Checked = $True
	$chkRptVMFloppyConnected.CheckState = 'Checked'
	$chkRptVMFloppyConnected.Location = '330, 53'
	$chkRptVMFloppyConnected.Name = "chkRptVMFloppyConnected"
	$chkRptVMFloppyConnected.Size = '18, 20'
	$chkRptVMFloppyConnected.TabIndex = 6
	$chkRptVMFloppyConnected.UseVisualStyleBackColor = $True
	#
	# labelFloppyConnected
	#
	$labelFloppyConnected.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelFloppyConnected.Location = '189, 53'
	$labelFloppyConnected.Name = "labelFloppyConnected"
	$labelFloppyConnected.Size = '135, 20'
	$labelFloppyConnected.TabIndex = 100
	$labelFloppyConnected.Text = "Floppy Connected"
	$labelFloppyConnected.TextAlign = 'MiddleRight'
	#
	# chkRptVMCDConnected
	#
	$chkRptVMCDConnected.Checked = $True
	$chkRptVMCDConnected.CheckState = 'Checked'
	$chkRptVMCDConnected.Location = '330, 34'
	$chkRptVMCDConnected.Name = "chkRptVMCDConnected"
	$chkRptVMCDConnected.Size = '18, 20'
	$chkRptVMCDConnected.TabIndex = 4
	$chkRptVMCDConnected.UseVisualStyleBackColor = $True
	#
	# labelCDConnected
	#
	$labelCDConnected.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelCDConnected.Location = '189, 33'
	$labelCDConnected.Name = "labelCDConnected"
	$labelCDConnected.Size = '135, 20'
	$labelCDConnected.TabIndex = 98
	$labelCDConnected.Text = "CD Connected"
	$labelCDConnected.TextAlign = 'MiddleRight'
	#
	# chkRptVMTools
	#
	$chkRptVMTools.Checked = $True
	$chkRptVMTools.CheckState = 'Checked'
	$chkRptVMTools.Location = '149, 53'
	$chkRptVMTools.Name = "chkRptVMTools"
	$chkRptVMTools.Size = '18, 20'
	$chkRptVMTools.TabIndex = 5
	$chkRptVMTools.UseVisualStyleBackColor = $True
	#
	# labelNoVMwareTools
	#
	$labelNoVMwareTools.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelNoVMwareTools.Location = '6, 53'
	$labelNoVMwareTools.Name = "labelNoVMwareTools"
	$labelNoVMwareTools.Size = '135, 20'
	$labelNoVMwareTools.TabIndex = 96
	$labelNoVMwareTools.Text = "No VMware Tools"
	$labelNoVMwareTools.TextAlign = 'MiddleRight'
	#
	# chkRptVMThinProvisioned
	#
	$chkRptVMThinProvisioned.Checked = $True
	$chkRptVMThinProvisioned.CheckState = 'Checked'
	$chkRptVMThinProvisioned.Location = '149, 33'
	$chkRptVMThinProvisioned.Name = "chkRptVMThinProvisioned"
	$chkRptVMThinProvisioned.Size = '18, 24'
	$chkRptVMThinProvisioned.TabIndex = 3
	$chkRptVMThinProvisioned.UseVisualStyleBackColor = $True
	#
	# labelThinProvisioned
	#
	$labelThinProvisioned.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelThinProvisioned.Location = '6, 33'
	$labelThinProvisioned.Name = "labelThinProvisioned"
	$labelThinProvisioned.Size = '135, 20'
	$labelThinProvisioned.TabIndex = 94
	$labelThinProvisioned.Text = "Thin Provisioned"
	$labelThinProvisioned.TextAlign = 'MiddleRight'
	#
	# dialRptVMSnapThresh
	#
	$dialRptVMSnapThresh.Location = '330, 13'
	$dialRptVMSnapThresh.Maximum = 180
	$dialRptVMSnapThresh.Name = "dialRptVMSnapThresh"
	$dialRptVMSnapThresh.Size = '37, 20'
	$dialRptVMSnapThresh.TabIndex = 2
	$dialRptVMSnapThresh.Value = 2
	#
	# chkRptVMSnapshots
	#
	$chkRptVMSnapshots.Checked = $True
	$chkRptVMSnapshots.CheckState = 'Checked'
	$chkRptVMSnapshots.Location = '149, 13'
	$chkRptVMSnapshots.Name = "chkRptVMSnapshots"
	$chkRptVMSnapshots.Size = '18, 24'
	$chkRptVMSnapshots.TabIndex = 1
	$chkRptVMSnapshots.UseVisualStyleBackColor = $True
	$chkRptVMSnapshots.add_CheckedChanged($chkRptVMSnapshots_CheckedChanged)
	#
	# labelSnapshotThreshold
	#
	$labelSnapshotThreshold.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelSnapshotThreshold.Location = '197, 13'
	$labelSnapshotThreshold.Name = "labelSnapshotThreshold"
	$labelSnapshotThreshold.Size = '127, 20'
	$labelSnapshotThreshold.TabIndex = 89
	$labelSnapshotThreshold.Text = "Snapshot Threshold"
	$labelSnapshotThreshold.TextAlign = 'MiddleRight'
	#
	# labelSnapshots
	#
	$labelSnapshots.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelSnapshots.Location = '6, 13'
	$labelSnapshots.Name = "labelSnapshots"
	$labelSnapshots.Size = '135, 20'
	$labelSnapshots.TabIndex = 88
	$labelSnapshots.Text = "Snapshots"
	$labelSnapshots.TextAlign = 'MiddleRight'
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($grpSchedule)
	$tabpage2.Controls.Add($grpReportFormat)
	$tabpage2.Controls.Add($grpDelivery)
	$tabpage2.BackColor = 'ControlLight'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = "tabpage2"
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '428, 404'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = "Delivery Options"
	#
	# grpSchedule
	#
	$grpSchedule.Controls.Add($labelTaskName)
	$grpSchedule.Controls.Add($txtTaskName)
	$grpSchedule.Location = '10, 259'
	$grpSchedule.Name = "grpSchedule"
	$grpSchedule.Size = '411, 85'
	$grpSchedule.TabIndex = 76
	$grpSchedule.TabStop = $False
	$grpSchedule.Text = "Schedule"
	$grpSchedule.Visible = $False
	#
	# labelTaskName
	#
	$labelTaskName.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelTaskName.Location = '35, 16'
	$labelTaskName.Name = "labelTaskName"
	$labelTaskName.Size = '89, 20'
	$labelTaskName.TabIndex = 81
	$labelTaskName.Text = "Task Name"
	$labelTaskName.TextAlign = 'MiddleRight'
	#
	# txtTaskName
	#
	$txtTaskName.Location = '141, 16'
	$txtTaskName.Name = "txtTaskName"
	$txtTaskName.Size = '258, 20'
	$txtTaskName.TabIndex = 0
	#
	# grpReportFormat
	#
	$grpReportFormat.Controls.Add($labelReportStyle)
	$grpReportFormat.Controls.Add($comboReportStyle)
	$grpReportFormat.Location = '8, 344'
	$grpReportFormat.Name = "grpReportFormat"
	$grpReportFormat.Size = '414, 54'
	$grpReportFormat.TabIndex = 75
	$grpReportFormat.TabStop = $False
	$grpReportFormat.Text = "Format"
	$grpReportFormat.Visible = $False
	#
	# labelReportStyle
	#
	$labelReportStyle.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelReportStyle.Location = '3, 19'
	$labelReportStyle.Name = "labelReportStyle"
	$labelReportStyle.Size = '123, 20'
	$labelReportStyle.TabIndex = 80
	$labelReportStyle.Text = "Report Style"
	$labelReportStyle.TextAlign = 'MiddleRight'
	#
	# comboReportStyle
	#
	$comboReportStyle.DisplayMember = "Default"
	$comboReportStyle.DropDownStyle = 'DropDownList'
	$comboReportStyle.FormattingEnabled = $True
	[void]$comboReportStyle.Items.Add("Default")
	$comboReportStyle.Location = '143, 19'
	$comboReportStyle.Name = "comboReportStyle"
	$comboReportStyle.Size = '258, 21'
	$comboReportStyle.TabIndex = 0
	$comboReportStyle.ValueMember = "Default"
	#
	# grpDelivery
	#
	$grpDelivery.Controls.Add($txtEmailSubject)
	$grpDelivery.Controls.Add($labelSubject)
	$grpDelivery.Controls.Add($labelEmailReport)
	$grpDelivery.Controls.Add($chkEmailReport)
	$grpDelivery.Controls.Add($labelReportName)
	$grpDelivery.Controls.Add($labelSaveReport)
	$grpDelivery.Controls.Add($txtReportName)
	$grpDelivery.Controls.Add($labelReportFolder)
	$grpDelivery.Controls.Add($chkSaveLocally)
	$grpDelivery.Controls.Add($txtReportFolder)
	$grpDelivery.Controls.Add($txtSMTPServer)
	$grpDelivery.Controls.Add($buttonBrowseFolder)
	$grpDelivery.Controls.Add($labelSMTPRelayServer)
	$grpDelivery.Controls.Add($labelEmailSender)
	$grpDelivery.Controls.Add($labelEmailRecipient)
	$grpDelivery.Controls.Add($txtEmailRecipient)
	$grpDelivery.Controls.Add($txtEmailSender)
	$grpDelivery.BackColor = 'ControlLight'
	$grpDelivery.FlatStyle = 'System'
	$grpDelivery.Location = '9, 6'
	$grpDelivery.Name = "grpDelivery"
	$grpDelivery.RightToLeft = 'No'
	$grpDelivery.Size = '413, 247'
	$grpDelivery.TabIndex = 74
	$grpDelivery.TabStop = $False
	$grpDelivery.Text = "Delivery"
	#
	# txtEmailSubject
	#
	$txtEmailSubject.Enabled = $False
	$txtEmailSubject.Location = '142, 61'
	$txtEmailSubject.Name = "txtEmailSubject"
	$txtEmailSubject.Size = '259, 20'
	$txtEmailSubject.TabIndex = 86
	#
	# labelSubject
	#
	$labelSubject.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelSubject.Location = '2, 60'
	$labelSubject.Name = "labelSubject"
	$labelSubject.Size = '123, 20'
	$labelSubject.TabIndex = 87
	$labelSubject.Text = "Subject"
	$labelSubject.TextAlign = 'MiddleRight'
	#
	# labelEmailReport
	#
	$labelEmailReport.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelEmailReport.Location = '35, 35'
	$labelEmailReport.Name = "labelEmailReport"
	$labelEmailReport.Size = '89, 20'
	$labelEmailReport.TabIndex = 85
	$labelEmailReport.Text = "Email Report"
	$labelEmailReport.TextAlign = 'MiddleRight'
	#
	# chkEmailReport
	#
	$chkEmailReport.Location = '142, 38'
	$chkEmailReport.Name = "chkEmailReport"
	$chkEmailReport.Size = '14, 17'
	$chkEmailReport.TabIndex = 84
	$chkEmailReport.UseVisualStyleBackColor = $True
	$chkEmailReport.add_CheckedChanged($chkEmailReport_CheckedChanged)
	#
	# labelReportName
	#
	$labelReportName.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelReportName.Location = '35, 187'
	$labelReportName.Name = "labelReportName"
	$labelReportName.Size = '89, 20'
	$labelReportName.TabIndex = 75
	$labelReportName.Text = "Report Name"
	$labelReportName.TextAlign = 'MiddleRight'
	#
	# labelSaveReport
	#
	$labelSaveReport.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelSaveReport.Location = '-3, 161'
	$labelSaveReport.Name = "labelSaveReport"
	$labelSaveReport.Size = '128, 20'
	$labelSaveReport.TabIndex = 82
	$labelSaveReport.Text = "Save Report"
	$labelSaveReport.TextAlign = 'MiddleRight'
	#
	# txtReportName
	#
	$txtReportName.Enabled = $False
	$txtReportName.Location = '142, 187'
	$txtReportName.Name = "txtReportName"
	$txtReportName.Size = '259, 20'
	$txtReportName.TabIndex = 83
	$txtReportName.Text = "Report.html"
	#
	# labelReportFolder
	#
	$labelReportFolder.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelReportFolder.Location = '35, 211'
	$labelReportFolder.Name = "labelReportFolder"
	$labelReportFolder.Size = '89, 20'
	$labelReportFolder.TabIndex = 80
	$labelReportFolder.Text = "Report Folder"
	$labelReportFolder.TextAlign = 'MiddleRight'
	#
	# chkSaveLocally
	#
	$chkSaveLocally.Location = '142, 164'
	$chkSaveLocally.Name = "chkSaveLocally"
	$chkSaveLocally.Size = '14, 17'
	$chkSaveLocally.TabIndex = 81
	$chkSaveLocally.UseVisualStyleBackColor = $True
	$chkSaveLocally.add_CheckedChanged($chkSaveLocally_CheckedChanged)
	#
	# txtReportFolder
	#
	$txtReportFolder.AutoCompleteMode = 'SuggestAppend'
	$txtReportFolder.AutoCompleteSource = 'FileSystemDirectories'
	$txtReportFolder.Enabled = $False
	$txtReportFolder.Location = '142, 213'
	$txtReportFolder.Name = "txtReportFolder"
	$txtReportFolder.Size = '223, 20'
	$txtReportFolder.TabIndex = 72
	$txtReportFolder.Text = "."
	#
	# txtSMTPServer
	#
	$txtSMTPServer.Enabled = $False
	$txtSMTPServer.Location = '142, 86'
	$txtSMTPServer.Name = "txtSMTPServer"
	$txtSMTPServer.Size = '259, 20'
	$txtSMTPServer.TabIndex = 74
	#
	# buttonBrowseFolder
	#
	$buttonBrowseFolder.Location = '371, 211'
	$buttonBrowseFolder.Name = "buttonBrowseFolder"
	$buttonBrowseFolder.Size = '30, 23'
	$buttonBrowseFolder.TabIndex = 73
	$buttonBrowseFolder.Text = "..."
	$buttonBrowseFolder.UseVisualStyleBackColor = $True
	$buttonBrowseFolder.add_Click($buttonBrowseFolder_Click)
	#
	# labelSMTPRelayServer
	#
	$labelSMTPRelayServer.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelSMTPRelayServer.Location = '2, 85'
	$labelSMTPRelayServer.Name = "labelSMTPRelayServer"
	$labelSMTPRelayServer.Size = '123, 20'
	$labelSMTPRelayServer.TabIndex = 75
	$labelSMTPRelayServer.Text = "SMTP Relay Server"
	$labelSMTPRelayServer.TextAlign = 'MiddleRight'
	#
	# labelEmailSender
	#
	$labelEmailSender.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelEmailSender.Location = '35, 137'
	$labelEmailSender.Name = "labelEmailSender"
	$labelEmailSender.Size = '90, 20'
	$labelEmailSender.TabIndex = 78
	$labelEmailSender.Text = "Email Sender"
	$labelEmailSender.TextAlign = 'MiddleRight'
	#
	# labelEmailRecipient
	#
	$labelEmailRecipient.Font = "Microsoft Sans Serif, 8.25pt, style=Bold"
	$labelEmailRecipient.Location = '2, 111'
	$labelEmailRecipient.Name = "labelEmailRecipient"
	$labelEmailRecipient.Size = '123, 20'
	$labelEmailRecipient.TabIndex = 79
	$labelEmailRecipient.Text = "Email Recipient"
	$labelEmailRecipient.TextAlign = 'MiddleRight'
	#
	# txtEmailRecipient
	#
	$txtEmailRecipient.Enabled = $False
	$txtEmailRecipient.Location = '142, 112'
	$txtEmailRecipient.Name = "txtEmailRecipient"
	$txtEmailRecipient.Size = '259, 20'
	$txtEmailRecipient.TabIndex = 76
	#
	# txtEmailSender
	#
	$txtEmailSender.Enabled = $False
	$txtEmailSender.Location = '142, 138'
	$txtEmailSender.Name = "txtEmailSender"
	$txtEmailSender.Size = '259, 20'
	$txtEmailSender.TabIndex = 77
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($richtextbox1)
	$tabpage5.BackColor = 'ControlLight'
	$tabpage5.Location = '4, 22'
	$tabpage5.Name = "tabpage5"
	$tabpage5.Size = '428, 404'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = "About"
	#
	# richtextbox1
	#
	$richtextbox1.Location = '3, 4'
	$richtextbox1.Name = "richtextbox1"
	$richtextbox1.ScrollBars = 'Vertical'
	$richtextbox1.Size = '421, 397'
	$richtextbox1.TabIndex = 0
	$richtextbox1.Text = "Utility:
vSphere Report GUI

Version:
0.0.2

Introduction:
This GUI is meant to help configure vmware report generation. You are able to select reporting scoped up to the whole farm all the way down to individual hosts.

There are several options for those interested in monitoring their environment. Some options include;

General Options:
- Generating reports only if thresholds are surpassed

Virtual Center
- VC event errors (with threshold in # of days)
- VMs created/cloned/deleted
- VC windows server errors/warnings (with threshold in # of days)
- VC windows server service status

ESX/vSphere Hosts
- Hosts not responding
- Hosts in maintenance
- Host datastore utilization (with % free utilization threshold)

Virtual Machines
- VM snapshots (with threshold in # of days)
- VMs with thin provisioned disks
- VMs with no vmware tools
- VMs with connected CD drives
- VMs with connected floppy drives

Usage:
The GUI is used to perform an initial test connection to the server and to save options. Once connected to the server you can select more granular scoped reports based on the datacenter, cluster, and host if desired. Currently you need to report on the whole farm to get virtual center reporting options.

Once the configuration is saved another script, VMware-Report.ps1 can be used to schedule the job. This script will automatically load the saved xml config file and run without any interface. 

Author: Zachary Loeber
Sites: http://the-little-things.net"
	#
	# timerFadeIn
	#
	$timerFadeIn.add_Tick($timerFadeIn_Tick)
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = "txt"
	$openfiledialog1.Filter = "Text File (.txt)|*.txt|All Files|*.*"
	$openfiledialog1.ShowHelp = $True
	#
	# folderbrowserdialog1
	#
	#
	# tooltipAll
	#
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.pff

#region Source: Globals.ps1
	#========================================================================
	# Created with: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.1.14
	# Created on:   2/5/2013 6:36 AM
	# Created by:   Zachary Loeber
	# Organization: 
	# Filename: Globals.ps1
	# Description: These are used across both the gui and the called script
	#              for storing and loading script state data.
	# Requires: VMware-Report-GUI.ps1
	#           VMware-Report.ps1
	#========================================================================
	#A few Constants 
	$Styles = @('Default','Style1')
	
	#Our base variables which may get overwritten if a config file is loaded.
	#With no config file this is where you want to set your default settings.
	$varEmailReport=$false
	$varEmailSubject=""
	$varEmailRecipient=""
	$varEmailSender=""
	$varSMTPServer=""
	$varSaveReportsLocally=$false
	$varReportName="report.html"
	$varReportFolder="."
	$varVIServer="localhost"
	$varUseCurrentUser=$false
	$varVIUser=""
	$varVIPassword=""
	$varScopeWholeFarm=$true
	$varScopeDatacenter=""
	$varScopeCluster=""
	$varScopeHost=""
	$varReportHostsDatastore=$false
	$varReportHostsDatastoreThreshold="10"
	$varReportVMSnapshots=$true
	$varReportVMSnapshotsThreshold="2"
	$varReportVMThinProvisioned=$false
	$varReportSelective=$false
	$varReportVCVMsCreated = $false
	$varReportVCVMsDeleted = $false
	$varReportVCErrors = $false
	$varReportHostsNotResponding = $false
	$varReportHostsInMaint = $false
	$varReportVMTools = $false
	$varReportCDConnected = $false
	$varReportFloppyConnected = $false
	$varReportVCVMsCreatedAge = 5
	$varReportVCEventLogsAge = 1
	$varReportVCErrorsAge = 1
	$varReportVCEvntlogs = $false
	$varReportVCServices = $false
	$varReportStyle = "Default"
	
	#For each variable an xml attribute should exist which maps to our save file
	$ConfigTemplate = @"
<Configuration>
    <EmailReport>{0}</EmailReport>
    <EmailSubject>{1}</EmailSubject>
    <EmailRecipient>{2}</EmailRecipient>
    <EmailSender>{3}</EmailSender>
    <SMTPServer>{4}</SMTPServer>
    <SaveReportsLocally>{5}</SaveReportsLocally>
    <ReportName>{6}</ReportName>
    <ReportFolder>{7}</ReportFolder>
    <VIServer>{8}</VIServer>
    <UseCurrentUser>{9}</UseCurrentUser>
    <VIUser>{10}</VIUser>
    <VIPassword>{11}</VIPassword>
    <ScopeWholeFarm>{12}</ScopeWholeFarm>
    <ScopeDatacenter>{13}</ScopeDatacenter>
    <ScopeCluster>{14}</ScopeCluster>
    <ScopeHost>{15}</ScopeHost>
    <ReportDatastore>{16}</ReportDatastore>
    <ReportDatastoreThreshold>{17}</ReportDatastoreThreshold>
    <ReportSnapshots>{18}</ReportSnapshots>
    <ReportSnapshotsThreshold>{19}</ReportSnapshotsThreshold>
    <ReportThinProvisioned>{20}</ReportThinProvisioned>
    <ReportSelective>{21}</ReportSelective>
    <ReportVCVMsCreated>{22}</ReportVCVMsCreated>
    <ReportVCVMsDeleted>{23}</ReportVCVMsDeleted>
    <ReportVCErrors>{24}</ReportVCErrors>
    <ReportHostNotResponding>{25}</ReportHostNotResponding>
    <ReportHostsInMaint>{26}</ReportHostsInMaint>
    <ReportVMTools>{27}</ReportVMTools>
    <ReportCDConnected>{28}</ReportCDConnected>
    <ReportFloppyConnected>{29}</ReportFloppyConnected>
    <ReportVCEventAge>{30}</ReportVCEventAge>
    <ReportVCErrorsAge>{31}</ReportVCErrorsAge>
    <ReportVCEvntlogs>{32}</ReportVCEvntlogs>
    <ReportVCServices>{33}</ReportVCServices>
    <ReportStyle>{34}</ReportStyle>
</Configuration>
"@
	
	# VMware specific globals
	#$VIConnection
	$VIConnected = $false
	
	#Provides the location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	#Config file location
	$ConfigFile = $ScriptDirectory + "\Config.xml"
	
	#Possible credential file
	$CredFile = $ScriptDirectory + "\Cred.crd"
	
	#This is the non-GUI version of the script.
	$StarterScript = "\VMware-Report.ps1"
	
	# Extra scripts
	function Colorize-Table 
	{ 
	[CmdletBinding(DefaultParameterSetName = "ObjectSet")] 
	param ( 
	    [Parameter( 
	        Mandatory=$true, 
	        Position=0, 
	        ValueFromPipeline=$true, 
	        ParameterSetName="ObjectSet" 
	    )] 
	    [PSObject[]]$InputObject, 
	    [Parameter( 
	        Mandatory=$true, 
	        Position=0, 
	        ValueFromPipeline=$true, 
	        ParameterSetName="StringSet" 
	    )] 
	    [String[]]$InputString='', 
	    [Parameter( 
	        Mandatory=$true, 
	        ValueFromPipeline=$false 
	    )] 
	    [String]$Column, 
	    [Parameter( 
	        Mandatory=$true, 
	        ValueFromPipeline=$false 
	    )] 
	    [String]$ColumnValue, 
	    [Parameter( 
	        Mandatory=$true, 
	        ValueFromPipeline=$false 
	    )] 
	    [String]$Attr, 
	    [Parameter( 
	        Mandatory=$true, 
	        ValueFromPipeline=$false 
	    )] 
	    [String]$AttrValue, 
	    [Parameter( 
	        Mandatory=$false, 
	        ValueFromPipeline=$false 
	    )] 
	    [Bool]$WholeRow=$false, 
	    [Parameter( 
	        Mandatory=$false, 
	        ValueFromPipeline=$false, 
	        ParameterSetName="ObjectSet" 
	    )] 
	    [String]$HTMLHead='<title>HTML Table</title>') 
	 
	BEGIN 
	{ 
	    Add-Type -ErrorAction SilentlyContinue -Language CSharpVersion3 -ReferencedAssemblies System.Xml, System.Xml.Linq -UsingNamespace System.Linq -Name XUtilities -Namespace Huddled -MemberDefinition @" 
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> GetElementByIndex( System.Xml.Linq.XContainer doc, System.Xml.Linq.XName element, int index) { 
        return from e in doc.Descendants(element) where e.NodesBeforeSelf().Count() == index select e; 
    } 
    public static System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement> GetElementByValue( System.Xml.Linq.XContainer doc, System.Xml.Linq.XName element, string value) { 
        return from e in doc.Descendants(element) where e.Value == value select e; 
    } 
"@ 
	    $Objects = @() 
	} 
	 
	PROCESS 
	{ 
	    # Handle passing object via pipe 
	    $Objects += $InputObject 
	} 
	 
	END 
	{ 
	    # Convert our data to x(ht)ml 
	    if ($InputString)    # If a string was passed just parse it 
	    { 
	        $xml = [System.Xml.Linq.XDocument]::Parse("$InputString")  
	    } 
	    else                # Otherwise we have to convert it to html first 
	    { 
	        $xml = [System.Xml.Linq.XDocument]::Parse("$($Objects | ConvertTo-Html -Head $HTMLHead)")     
	    } 
	     
	    # Find the index of the column you want to format 
	    $ColumnLoc = [Huddled.XUtilities]::GetElementByValue($xml, "{http://www.w3.org/1999/xhtml}th",$Column) 
	    $ColumnIndex = $ColumnLoc | Foreach-Object{($_.NodesBeforeSelf() | Measure-Object).Count} 
	     
	    # Process each xml element based on the index for the column we are highlighting 
	    switch([Huddled.XUtilities]::GetElementByIndex($xml, "{http://www.w3.org/1999/xhtml}td", $ColumnIndex)) 
	    { 
	        {$_.Value -eq $ColumnValue} { 
	            $_.SetAttributeValue($Attr, $AttrValue) 
	        }  
	    } 
	    Return $xml.Document.ToString() 
	} 
	 
	<# 
	.SYNOPSIS 
	Colorize-Table 
	 
	.DESCRIPTION 
	Colorize cells of an array of objects. Otherwise, if an html table is passed through then colorize 
	individual cells of it based on row header and value. 
	 
	.PARAMETER  [PSObject[]]$InputObject 
	An array of objects (ie. (Get-process | select Name,Company) 
	 
	.PARAMETER  Column 
	The column you want to modify1 
	 
	.PARAMETER  ColumnValue 
	The column value you will modify if found. 
	 
	.PARAMETER  Attr 
	The attribute to change should ColumnValue be found in the Column specified. 
	- A good example is using "style" 
	 
	.PARAMETER  AttrValue 
	The attribute value to set when the ColumnValue is found in the Column specified 
	- A good example is using "background: red;" 
	 
	.EXAMPLE 
	This will highlight the process name of Dropbox with a red background. 
	 
	$tabletocolorize = $(Get-Process | ConvertTo-Html -Head $TableStyle) 
	$colorizedtable = Colorize-Table $tabletocolorize "Name" "Dropbox" "style" "background: red;" 
	 
	 
	.EXAMPLE 
	This will highlight the process name of Dropbox with a red background. Then ccSvcHost process names 
	will be highlighted yellow. Finally Any Company Name of some big global conglomerate will be  
	highlighted green. This all gets wrapped up in a nice single line outlined style for the table, gets 
	saved to a file in the local directory, then gets invoked (opened, usually via IE). 
	 
	$TableStyle = "<title>Process Report</title> 
	             
	            BODY{font-family: Arial; font-size: 8pt;} 
	            H1{font-size: 16px;} 
	            H2{font-size: 14px;} 
	            H3{font-size: 12px;} 
	            TABLE{border: 1px solid black; border-collapse: collapse; font-size: 8pt;} 
	            TH{border: 1px solid black; background: #dddddd; padding: 5px; color: #000000;} 
	            TD{border: 1px solid black; padding: 5px; } 
	            " 
	 
	$tabletocolorize = $(Get-Process | Select Name,Company) 
	 
	$colorizedtable = (Colorize-Table $tabletocolorize -Column "Name" -ColumnValue "Dropbox" -Attr "style" -AttrValue "background: red;" -HTMLHead $TableStyle) 
	$test = Colorize-Table $colorizedtable -Column "Name" -ColumnValue "ccSvcHst" -Attr "style" -AttrValue "background: yellow;" 
	$test2 = Colorize-Table $test -Column "Company" -ColumnValue "Microsoft Corporation" -Attr "style" -AttrValue "background: green;" 
	$test2 | Out-File "$pwd/procs4.html" 
	ii "$pwd/procs4.html" 
	 
	.NOTES 
	If you are going to convert something to html with convertto-html in powershell v2 there is a bug where the  
	header will show up as an asterick if you only are converting one object property. 
	 
	This has a long way to go before really being robust and useful but it is a start... 
	.LINK 
	http://www.the-little-things.net 
	#> 
	} 
	
	Function Get-SaveData
	{
	    [xml]$x=($ConfigTemplate) -f 
	        $varEmailReport,`
	        $varEmailSubject,`
	        $varEmailRecipient,`
	        $varEmailSender,`
	        $varSMTPServer,`
	        $varSaveReportsLocally,`
	        $varReportName,`
	        $varReportFolder,`
	        $varVIServer,`
	        $varUseCurrentUser,`
	        $varVIUser,`
	        $varVIPassword,`
	        $varScopeWholeFarm,`
	        $varScopeDatacenter,`
	        $varScopeCluster,`
	        $varScopeHost,`
	        $varReportHostsDatastore,`
	        $varReportHostsDatastoreThreshold,`
	        $varReportVMSnapshots,`
	        $varReportVMSnapshotsThreshold,`
	        $varReportVMThinProvisioned,`
	        $varReportSelective,`
	        $varReportVCVMsCreated,`
	        $varReportVCVMsDeleted,`
	        $varReportVCErrors,`
	        $varReportHostsNotResponding,`
	        $varReportHostsInMaint,`
	        $varReportVMTools,`
	        $varReportCDConnected,`
	        $varReportFloppyConnected,`
	        $varReportVCEventLogsAge,`
	        $varReportVCErrorsAge,`
	        $varReportVCEvntlogs,`
	        $varReportVCServices,`
	        $varReportStyle
	    return $x
	}
	
	Function Load-Config
	{
		if (Test-Path $ConfigFile)
		{
			[xml]$configuration = get-content $($ConfigFile)
	        $Script:varEmailReport = [System.Convert]::ToBoolean($configuration.Configuration.EmailReport)
	        $Script:varEmailSubject = $configuration.Configuration.EmailSubject
	        $Script:varEmailRecipient = $configuration.Configuration.EmailRecipient
	        $Script:varEmailSender = $configuration.Configuration.EmailSender
	        $Script:varSMTPServer = $configuration.Configuration.SMTPServer
	        $Script:varSaveReportsLocally = [System.Convert]::ToBoolean($configuration.Configuration.SaveReportsLocally)
	        $Script:varReportName = $configuration.Configuration.ReportName
	        $Script:varReportFolder = $configuration.Configuration.ReportFolder
	        $Script:varVIServer = $configuration.Configuration.VIServer
	        $Script:varUseCurrentUser = [System.Convert]::ToBoolean($configuration.Configuration.UseCurrentUser)
	        $Script:varVIUser = '' #$configuration.Configuration.VIUser
	        $Script:varVIPassword = '' #$configuration.Configuration.VIPassword
	        $Script:varScopeWholeFarm = [System.Convert]::ToBoolean($configuration.Configuration.ScopeWholeFarm)
	        $Script:varScopeDatacenter = $configuration.Configuration.ScopeDatacenter
	        $Script:varScopeCluster = $configuration.Configuration.ScopeCluster
	        $Script:varScopeHost = $configuration.Configuration.ScopeHost
	        $Script:varReportHostsDatastore = [System.Convert]::ToBoolean($configuration.Configuration.ReportDatastore)
	        $Script:varReportHostsDatastoreThreshold = $configuration.Configuration.ReportDatastoreThreshold
	        $Script:varReportVMSnapshots = [System.Convert]::ToBoolean($configuration.Configuration.ReportSnapshots)
	        $Script:varReportVMSnapshotsThreshold = $configuration.Configuration.ReportSnapshotsThreshold
	        $Script:varReportVMThinProvisioned = [System.Convert]::ToBoolean($configuration.Configuration.ReportThinProvisioned)
	        $Script:varReportSelective = [System.Convert]::ToBoolean($configuration.Configuration.ReportSelective)
	        $Script:varReportVCVMsCreated = [System.Convert]::ToBoolean($configuration.Configuration.ReportVCVMsCreated)
	        $Script:varReportVCVMsDeleted = [System.Convert]::ToBoolean($configuration.Configuration.ReportVCVMsDeleted)
	        $Script:varReportVCErrors = [System.Convert]::ToBoolean($configuration.Configuration.ReportVCErrors)
	        $Script:varReportHostsNotResponding = [System.Convert]::ToBoolean($configuration.Configuration.ReportHostNotResponding)
	        $Script:varReportHostsInMaint = [System.Convert]::ToBoolean($configuration.Configuration.ReportHostsInMaint)
	        $Script:varReportVMTools = [System.Convert]::ToBoolean($configuration.Configuration.ReportVMTools)
	        $Script:varReportCDConnected = [System.Convert]::ToBoolean($configuration.Configuration.ReportCDConnected)
	        $Script:varReportFloppyConnected = [System.Convert]::ToBoolean($configuration.Configuration.ReportFloppyConnected)
	        $Script:varReportVCEventLogsAge = $configuration.Configuration.ReportVCEventAge
	        $Script:varReportVCErrorsAge = $configuration.Configuration.ReportVCErrorsAge
	        $Script:varReportVCEvntlogs = [System.Convert]::ToBoolean($configuration.Configuration.ReportVCEvntlogs)
	        $Script:varReportVCServices = [System.Convert]::ToBoolean($configuration.Configuration.ReportVCServices)
	        $Script:varReportStyle = $configuration.Configuration.ReportStyle
	        if (-not $varUseCurrentUser)
	        {
	            $Snapin='VMware.VimAutomation.Core'
	            Add-PSSnapin $Snapin –ErrorAction SilentlyContinue
	    		if ((Get-PSSnapin $Snapin) –ne $NULL) 
	    		{
	    			$creds = Get-VICredentialStoreItem -file $CredFile 
	                $Script:varVIUser = [string]$creds.User
	                $Script:varVIPassword = [string]$creds.Password
	    		} 
	        }
	        Return $true
		}
	    else
	    {
	        Return $false
	    }
	}
	
	# Save exceptions
	Function Save-Config
	{
	    $SanitizedConfig = $true
		if (($varEmailReport) -and`
	        (($varEmailSubject -eq "") -or`
			 ($varEmailRecipient -eq "") -or`
	         ($varEmailSender -eq "") -or`
	         ($varSMTPServer -eq "")))
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("You selected to send an email but didn't fill in the right stuff to make it happen buddy.","Sorry, try again.")
	        $SanitizedConfig = $false
		}
		elseif (($varSaveReportsLocally) -and`
				(($varReportName -eq "") -or`
				 ($varReportFolder -eq "")))
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("You selected to not save locally (so are assumed to be attempting to email the reports) but didn't fill in email configuration information.","Sorry, not going to do it.")
	        $SanitizedConfig = $false
		}
	   	elseif ((!$varScopeWholeFarm) -and`
				($varScopeDatacenter -eq ""))
	    {
	   		#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("You selected to not report on the whole farm and then made no other selections. `n`n Not Saved.","Sorry, that will not work..")
	        $SanitizedConfig = $false
		}
	 
	    if ($SanitizedConfig)
		{
			# save the data
			[xml]$x=Get-SaveData
	        $x.save($ConfigFile)
	        Return $true
		}
	    else
	    {
	        Return $false
		}
	}
	
#endregion Source: Globals.ps1

#region Source: VMware-Report.ps1
function Call-VMware-Report_ps1
{
	<#
	 NAME: VMware-Report.ps1
	
	 AUTHOR: Zachary Loeber
	 DATE:   03/29/2013
	 EMAIL:  zloeber@gmail.com
	 COMMENT: VMware reporting script
	 VERSION HISTORY
	 	0.0.1 - 02/12/2013
	 		- First release
	    0.0.2 - 03/29/2013
	        - Removed clear text password from config file
	        - Allowed for alternate credentials for wmi calls
	        - Huge GUI updates and fixes.
	        
	 TO ADD
	   - ???
	#>
	#region Parameters
	[CmdletBinding()]
	param
	(
		[Parameter(Position=0,Mandatory=$false,ValueFromPipeline=$false,ValueFromPipelineByPropertyName=$true)]
		[String]$ConfigFile = ""
	)
	#Add-PSSnapin VMware.VimAutomation.Core
	
	#endregion Parameters
	
	#region Help
	<#
	.SYNOPSIS
	   VMware-Report.ps1
	.DESCRIPTION
	Use this script to regularly monitor and/or report on your vmware environment.
	This shoudl be used in conjunction with VMwareReport-GUI.ps1 to generate the
	config.xml file utilized for all report settings. Both VMwareReport-GUI.ps1 
	and this script require a common set of variables and functions found in Globals.ps1
	as well.
	
	.PARAMETER ConfigFile
		Full file and path to an xml configuration file. If you are using multiple config files you can use this option with your scheduled tasks.
	.EXAMPLE
		.\Get-VMwareReport.ps1 -Configfile ".\Config2.xml"
		Run script with alternate configuration file.
		
	
	.EXAMPLE
		.\Get-VMwareReport.ps1 -Configfile 
		
		Run script with default configuration file (.\config.xml)
	.LINK
	   http://the-little-things.net
	#>
	#endregion help
	
	#region Configuration (local)
	$ReportToBeGenerated = $false
	
	#endregion Configuration (local)
	
	#region Globals
	$Snapins=@(’VMware.VimAutomation.Core’)
	#endregion Globals
	
	#region Module/Snapin/Dot Sourcing
	$RequiredSnapinsLoaded=$True 
	if ($Snapins.Count -ge 1) 
	{
		Foreach ($Snapin in $Snapins)
		{
			Add-PSSnapin $Snapin –ErrorAction SilentlyContinue 
			if ((Get-PSSnapin $Snapin) –eq $NULL) 
			{
				$RequiredSnapinsLoaded=$false
			} 
	 	}
	}
	if (!$RequiredSnapinsLoaded) 
	{ 
		exit $LASTEXITCODE 
	}
	
	# Dot sourced files
	. .\globals.ps1
	#endregion Module/Snapin/Dot Sourcing
	
	#region Functions (local)
	Function Get-CustomHTML ($Header) {
		$Report = @"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<html><head><title>$($Header)</title>
<META http-equiv=Content-Type content='text/html; charset=windows-1252'>

<meta name="save" content="history">

<style type="text/css">
DIV .expando {DISPLAY: block; FONT-WEIGHT: normal; FONT-SIZE: 10pt; RIGHT: 8px; COLOR: #ffffff; FONT-FAMILY: Tahoma; POSITION: absolute; TEXT-DECORATION: underline}
TABLE {TABLE-LAYOUT: fixed; FONT-SIZE: 100%; WIDTH: 100%}
*{margin:0}
.dspcont { BORDER-RIGHT: #bbbbbb 1px solid; BORDER-TOP: #bbbbbb 1px solid; PADDING-LEFT: 16px; FONT-SIZE: 8pt;MARGIN-BOTTOM: -1px; PADDING-BOTTOM: 5px; MARGIN-LEFT: 0px; BORDER-LEFT: #bbbbbb 1px solid; WIDTH: 95%; COLOR: #000000; MARGIN-RIGHT: 0px; PADDING-TOP: 4px; BORDER-BOTTOM: #bbbbbb 1px solid; FONT-FAMILY: Tahoma; POSITION: relative; BACKGROUND-COLOR: #f9f9f9}
.filler {BORDER-RIGHT: medium none; BORDER-TOP: medium none; DISPLAY: block; BACKGROUND: none transparent scroll repeat 0% 0%; MARGIN-BOTTOM: -1px; FONT: 100%/8px Tahoma; MARGIN-LEFT: 43px; BORDER-LEFT: medium none; COLOR: #ffffff; MARGIN-RIGHT: 0px; PADDING-TOP: 4px; BORDER-BOTTOM: medium none; POSITION: relative}
.save{behavior:url(#default#savehistory);}
.dspcont1{ display:none}
a.dsphead0 {BORDER-RIGHT: #bbbbbb 1px solid; PADDING-RIGHT: 5em; BORDER-TOP: #bbbbbb 1px solid; DISPLAY: block; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: 8pt; MARGIN-BOTTOM: -1px; MARGIN-LEFT: 0px; BORDER-LEFT: #bbbbbb 1px solid; CURSOR: hand; COLOR: #FFFFFF; MARGIN-RIGHT: 0px; PADDING-TOP: 4px; BORDER-BOTTOM: #bbbbbb 1px solid; FONT-FAMILY: Tahoma; POSITION: relative; HEIGHT: 2.25em; WIDTH: 95%; BACKGROUND-COLOR: #cc0000}
a.dsphead1 {BORDER-RIGHT: #bbbbbb 1px solid; PADDING-RIGHT: 5em; BORDER-TOP: #bbbbbb 1px solid; DISPLAY: block; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: 8pt; MARGIN-BOTTOM: -1px; MARGIN-LEFT: 0px; BORDER-LEFT: #bbbbbb 1px solid; CURSOR: hand; COLOR: #ffffff; MARGIN-RIGHT: 0px; PADDING-TOP: 4px; BORDER-BOTTOM: #bbbbbb 1px solid; FONT-FAMILY: Tahoma; POSITION: relative; HEIGHT: 2.25em; WIDTH: 95%; BACKGROUND-COLOR: #7BA7C7}
a.dsphead2 {BORDER-RIGHT: #bbbbbb 1px solid; PADDING-RIGHT: 5em; BORDER-TOP: #bbbbbb 1px solid; DISPLAY: block; PADDING-LEFT: 5px; FONT-WEIGHT: bold; FONT-SIZE: 8pt; MARGIN-BOTTOM: -1px; MARGIN-LEFT: 0px; BORDER-LEFT: #bbbbbb 1px solid; CURSOR: hand; COLOR: #ffffff; MARGIN-RIGHT: 0px; PADDING-TOP: 4px; BORDER-BOTTOM: #bbbbbb 1px solid; FONT-FAMILY: Tahoma; POSITION: relative; HEIGHT: 2.25em; WIDTH: 95%; BACKGROUND-COLOR: #A5A5A5}
a.dsphead1 span.dspchar{font-family:monospace;font-weight:normal;}
td {VERTICAL-ALIGN: TOP; FONT-FAMILY: Tahoma}
th {VERTICAL-ALIGN: TOP; COLOR: #cc0000; TEXT-ALIGN: left}
BODY {margin-left: 4pt} 
BODY {margin-right: 4pt} 
BODY {margin-top: 6pt} 
</style>
</head>
<body>
<b><font face="Arial" size="5">$($Header)</font></b><hr size="8" color="#cc0000">
<font face="Arial" size="1"><b>Generated on $($ENV:Computername)</b></font><br>
<font face="Arial" size="1">Report created on $(Get-Date)</font>
<div class="filler"></div>
<div class="filler"></div>
<div class="filler"></div>
<div class="save">
"@
		Return $Report
	}
	
	Function Get-CustomHeader0 ($Title) {
		$Report = @"
		<h1><a class="dsphead0">$($Title)</a></h1>
		<div class="filler"></div>
"@
		Return $Report
	}
	
	Function Get-CustomHeader ($Num, $Title) {
		$Report = @"
	<h2><a class="dsphead$($Num)">
	$($Title)</a></h2>
	<div class="dspcont">
"@
		Return $Report
	}
	
	Function Get-CustomHeaderClose {
		$Report = @"
		</DIV>
		<div class="filler"></div>
"@
	Return $Report
	}
	
	Function Get-CustomHeader0Close {
	 $Report = @"
</DIV>
"@
	Return $Report
	}
	
	Function Get-CustomHTMLClose {
	
	 $Report = @"
</div>

</body>
</html>
"@
	Return $Report
	}
	
	Function Get-HTMLTable {
		param([array]$Content)
		$HTMLTable = $Content | ConvertTo-Html
		$HTMLTable = $HTMLTable -replace '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">', ""
		$HTMLTable = $HTMLTable -replace '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"  "http://www.w3.org/TR/html4/strict.dtd">', ""
		$HTMLTable = $HTMLTable -replace '<html xmlns="http://www.w3.org/1999/xhtml">', ""
		$HTMLTable = $HTMLTable -replace '<html>', ""
		$HTMLTable = $HTMLTable -replace '<head>', ""
		$HTMLTable = $HTMLTable -replace '<title>HTML TABLE</title>', ""
		$HTMLTable = $HTMLTable -replace '</head><body>', ""
		$HTMLTable = $HTMLTable -replace '</body></html>', ""
		Return $HTMLTable
	}
	
	Function Get-HTMLDetail ($Heading, $Detail) {
		$Report = @"
<TABLE>
	<tr>
	<th width='25%'><b>$Heading</b></font></th>
	<td width='75%'>$($Detail)</td>
	</tr>
</TABLE>
"@
		Return $Report
	}
	
	function Get-VIServices {
		$WMIParameters = @{
				Class = 'win32_service'
				ComputerName = $varVIServer
			}
			   
			if ($WMICred -ne $Null) {
				$WmiParameters.Credential = $WMICred
			}  
		$Services = Get-WmiObject @WMIParameters -ErrorAction:SilentlyContinue | Where {$_.DisplayName -like "VMware*" }
		#$Services = get-wmiobject win32_service -Credential $Cred -ErrorAction:SilentlyContinue -ComputerName $varVIServer | Where {$_.DisplayName -like "VMware*" }
		$myCol = @()
		Foreach ($service in $Services){
			$MyDetails = "" | select-Object Name, State, StartMode, Health
			If ($service.StartMode -eq "Auto")
			{
				if ($service.State -eq "Stopped")
				{
					$MyDetails.Name = $service.Displayname
					$MyDetails.State = $service.State
					$MyDetails.StartMode = $service.StartMode
					$MyDetails.Health = "Unexpected State"
				}
			}
			If ($service.StartMode -eq "Auto")
			{
				if ($service.State -eq "Running")
				{
					$MyDetails.Name = $service.Displayname
					$MyDetails.State = $service.State
					$MyDetails.StartMode = $service.StartMode
					$MyDetails.Health = "OK"
				}
			}
			If ($service.StartMode -eq "Disabled")
			{
				If ($service.State -eq "Running")
				{
					$MyDetails.Name = $service.Displayname
					$MyDetails.State = $service.State
					$MyDetails.StartMode = $service.StartMode
					$MyDetails.Health = "Unexpected State"
				}
			}
			If ($service.StartMode -eq "Disabled")
			{
				if ($service.State -eq "Stopped")
				{
					$MyDetails.Name = $service.Displayname
					$MyDetails.State = $service.State
					$MyDetails.StartMode = $service.StartMode
					$MyDetails.Health = "OK"
				}
			}
			$myCol += $MyDetails
		}
		Write-Output $myCol
	}
	
	function Get-ThinDisk {
	<#
	.SYNOPSIS
	  Returns all virtual disks that are Thin
	.DESCRIPTION
	  The function returns all the Thin disks it finds on the datastore(s)
		passed to the function
	.NOTES
	  Authors:	Luc Dekens
	.PARAMETER Datastore
	  On or more datastore objects returned by Get-Datastore
	.PARAMETER Thin
	  If this switch is $true, only Thin virtual disks are returned. If the
	switch is set to $false, all non-Thin virtual disks are returned.
	.EXAMPLE
	  PS> Get-Datastore | Get-ThinDisk
	.EXAMPLE
	  PS> Get-ThinDisk -Datastore (Get-Datastore -Name "DS*")
	#>
	
		param(
		[parameter(valuefrompipeline = $true, mandatory = $true,
		HelpMessage = "Enter a datastore")]
		[VMware.VimAutomation.ViCore.Impl.V1.DatastoreManagement.DatastoreImpl[]]$Datastore,
		[switch]$Thin = $true
		)
	
		begin{
			if((Get-PowerCLIVersion).Build -lt 264274){
				Write-Error "The script requires at least PowerCLI 4.1 !"
				exit
			}
	
			$searchspec = New-Object VMware.Vim.HostDatastoreBrowserSearchSpec
			$query = New-Object VMware.Vim.VmDiskFileQuery
			$query.Details = New-Object VMware.Vim.VmDiskFileQueryFlags
			$query.Details.capacityKb = $true
			$query.Details.controllerType = $true
			$query.Details.diskExtents = $true
			$query.Details.diskType = $true
			$query.Details.hardwareVersion = $true
			$query.Details.thin = $true
			$query.Filter = New-Object VMware.Vim.VmDiskFileQueryFilter
			$query.Filter.Thin = $Thin
			$searchspec.Query += $query
		}
	
		process{
			$Datastore | %{
				$dsBrowser = Get-View $_.Extensiondata.Browser
				$datastorepath = "[" + $_.Name + "]"
	
				$taskMoRef = $dsBrowser.SearchDatastoreSubFolders_Task($datastorePath, $searchSpec)
	
				$task = Get-View $taskMoRef
				while ("running","queued" -contains $task.Info.State){
					$task.UpdateViewData("Info.State")
				}
				$task.UpdateViewData("Info.Result")
				if($task.Info.Result){
					foreach ($folder in $task.Info.Result){
						if($folder.File){
							foreach($file in $folder.File){
								$record = "" | Select DSName,Path,VmdkName
								$record.DSName = $_.Name
								$record.Path = $folder.FolderPath
								$record.VmdkName = $file.Path
								$record
							}
						}
					}
				}
			}
		}
	}
	
	function Find-Username ($username) {
		if ($username -ne $null)
		{
			$root = [ADSI]""
			$filter = ("(&(objectCategory=user)(samAccountName=$Username))")
			$ds = new-object system.DirectoryServices.DirectorySearcher($root,$filter)
			$ds.PageSize = 1000
			$ds.FindOne()
		}
	}
	#endregion Functions (local)
	
	#region Start Script
	#region Connect to VI
	#If ($VIConnection.IsConnected -ne $true){
	#	# Fix for scheduled tasks not running.
	#	$USER = $env:username
	#	$APPPATH = "C:\Documents and Settings\" + $USER + "\Application Data"
	#
	#	#SET THE APPDATA ENVIRONMENT WHEN NEEDED
	#	if ($env:appdata -eq $null -or $env:appdata -eq 0)
	#	{
	#		$env:appdata = $APPPATH
	#	}
	#	$VIConnection = Connect-VIServer $varVIServer -ErrorAction:SilentlyContinue
	#}
	
	Load-Config
	
	# Connect to the server
	if ($varUseCurrentUser)
	{
		$VIConnection = Connect-VIServer $varVIServer -ErrorAction:SilentlyContinue
	}
	else
	{
		#$VIConnection = Connect-VIServer $varVIServer -User $varVIUser -Password $varVIPassword -ErrorAction:SilentlyContinue
	    $creds = Get-VICredentialStoreItem -file $CredFile 
	    $VIConnection = Connect-VIServer -Server $creds.Host -User $creds.User -Password $creds.Password
		$WMICred = New-Object System.Management.Automation.PSCredential([string]$creds.User,([string]$creds.Password|ConvertTo-SecureString -asPlainText -Force))
	}
	
	#endregion Connect to VI
	If ($VIConnection.IsConnected)
	{
		#region Additional VMware Properties
		New-VIProperty -Name PercentFree -ObjectType Datastore -Value {"{0:N2}" -f ($args[0].FreeSpaceMB/$args[0].CapacityMB*100)} -Force
		#endregion Additional VMware Properties
	
		#region Report Scope
		# Scope = Whole Farm
		if ($varScopeWholeFarm)
		{
			$Datacenters = @(Get-Datacenter)
			$VMs = @(Get-VM)
			$Hosts = @(Get-VMHost)
			$Clusters = @(Get-Cluster)
			$Datastores = @(Get-Datastore)
			$FullVM = @(Get-View -ViewType VirtualMachine)
		}
		else
		{
			# Should at least have a datacenter defined
			$Datacenters = @(Get-Datacenter $varScopeDatacenter)
			
			if ($varScopeHost -eq '')
			{
				# Scope = Just Datacenter
				if ($varScopeCluster -eq '') # Scope = Datacenter Level
				{
					$Clusters = (Get-Datacenter $varScopeDatacenter | Get-Cluster)
				}
				# Scope = Datacenter + Cluster
				else 
				{
					$Clusters = @(Get-Cluster $varScopeCluster)
				}
				$Hosts = @()
				Foreach ($Cluster in $Clusters)
				{
					Foreach ($HostServer in (Get-Cluster $Cluster | Get-VMHost))
					{
						$Hosts += $HostServer
					}
				}
			}
			else # Scope = Datacenter + Cluster + Host
			{
				$Clusters = (Get-Datacenter | Get-Cluster $varScopeCluster)
				$Hosts = ($Clusters | Get-VMHost $varScopeHost)
			}
			$VMs = @()
			Foreach ($Cluster in $Clusters)
			{
				Foreach ($VM in (Get-Cluster $Cluster | Get-VM))
				{
					$VMs += $VM
				}
			}
			
			# Get all datastores related with hosts
			$Datastores = $Hosts | Get-Datastore | Select -Unique		
		}
	#endregion Report Scope
	
		$MyReport = Get-CustomHTML "$VIServer Daily Report"
		$MyReport += Get-CustomHeader0 ($varVIServer)
	
		# ---- General Summary Info ----
		$MyReport += Get-CustomHeader "1" "General Details"
		$MyReport += Get-HTMLDetail "Number of Hosts:" (($Hosts).Count)
		$MyReport += Get-HTMLDetail "Number of VMs:" (($VMs).Count)
		$MyReport += Get-HTMLDetail "Number of Clusters:" (($Clusters).Count)
		$MyReport += Get-HTMLDetail "Number of Datastores:" (($Datastores).Count)
		$MyReport += Get-CustomHeaderClose
		
		#region Virtual Center
		# ---- VC Host Services
		if ($varReportVCServices -and $varScopeWholeFarm)
		{
			$ReportToBeGenerated = $true
			$MyReport += Get-CustomHeader "1" "$VIServer Service Details"
			$MyReport += Get-HTMLTable (Get-VIServices)
			$MyReport += Get-CustomHeaderClose
		}
		
		# ---- VC Errors ----	
		if ($varReportVCErrors -and $varScopeWholeFarm)
		{
			# ---- VC Errors
			$VIEvent = Get-VIEvent -maxsamples 10000 -Start (Get-Date).AddDays(-$varReportVCErrorsAge)
			$OutputErrors = $VIEvent  | `
				where {$_.Type -eq "Error"} | `
				Select createdTime, `
					   @{N="User";E={(Find-Username (($_.userName.split("\"))[1])).Properties.displayname}},`
					   fullFormattedMessage
			If (($OutputErrors | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "Error Events (Last $varReportVCErrorsAge Day(s))"
				$MyReport += Get-HTMLTable $OutputErrors
				$MyReport += Get-CustomHeaderClose 
			}
			
			# ---- VMs created or Cloned ----
			if ($varReportVCVMsCreated)
			{
				$OutputCreatedVMs = $VIEvent | where {$_.Gettype().Name -eq "VmCreatedEvent" -or $_.Gettype().Name -eq "VmBeingClonedEvent" -or $_.Gettype().Name -eq "VmBeingDeployedEvent"} | Select createdTime, @{N="User";E={(Find-Username (($_.userName.split("\"))[1])).Properties.displayname}}, fullFormattedMessage
				If (($OutputCreatedVMs | Measure-Object).count -gt 0) {
					$ReportToBeGenerated = $true
					$MyReport += Get-CustomHeader "1" "VMs Created or Cloned (Last $varReportVCErrorsAge Day(s))"
					$MyReport += Get-HTMLTable $OutputCreatedVMs
					$MyReport += Get-CustomHeaderClose
				}
			}
			
			# ---- VMs Removed ----
			if ($varReportVCVMsDeleted)
			{
				$OutputRemovedVMs = $VIEvent | where {$_.Gettype().Name -eq "VmRemovedEvent"}| Select createdTime, @{N="User";E={(Find-Username (($_.userName.split("\"))[1])).Properties.displayname}}, fullFormattedMessage
				If (($OutputRemovedVMs | Measure-Object).count -gt 0) {
					$ReportToBeGenerated = $true
					$MyReport += Get-CustomHeader "1" "VMs Removed (Last $varReportVCEventAge Day(s))"
					$MyReport += Get-HTMLTable $OutputRemovedVMs
					$MyReport += Get-CustomHeaderClose
				}
			}
		}
		#endregion Virtual Center
		
		# Windows Event Logs
		if ($varReportVCEvntlogs -and $varScopeWholeFarm)
		{	
			# Errors
			$ConvDate = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime([DateTime]::Now.AddDays(-$varReportVCEventLogsAge))
			$WMIParameters = @{
				Query = ("Select * from Win32_NTLogEvent Where Type='Error' and TimeWritten >='" + $ConvDate + "'")
				ComputerName = $varVIServer
			}	   
			if ($WMICred -ne $Null) {
				$WmiParameters.Credential = $WMICred
			}  
			$ErrLogs = Get-WmiObject @WMIParameters | Select @{N="TimeGenerated";E={$_.ConvertToDateTime($_.TimeGenerated)}}, Message
			#$ErrLogs = Get-WmiObject @WMIParameters | Where {$_.Message -like "*VMware*"} | Select @{N="TimeGenerated";E={$_.ConvertToDateTime($_.TimeGenerated)}}, Message
			#$ErrLogs = Get-WmiObject -ErrorAction:SilentlyContinue -computer $varVIServer -query ("Select * from Win32_NTLogEvent Where Type='Error' and TimeWritten >='" + $ConvDate + "'") | Where {$_.Message -like "*VMware*"} | Select @{N="TimeGenerated";E={$_.ConvertToDateTime($_.TimeGenerated)}}, Message
			
			#Warnings
			$WMIParameters = @{
				Query = ("Select * from Win32_NTLogEvent Where Type='Warning' and TimeWritten >='" + $ConvDate + "'")
				ComputerName = $varVIServer
			}	   
			if ($WMICred -ne $Null) {
				$WmiParameters.Credential = $WMICred
			}  
			$WarnLogs = Get-WmiObject @WMIParameters | Select @{N="TimeGenerated";E={$_.ConvertToDateTime($_.TimeGenerated)}}, Message 
			#$WarnLogs = Get-WmiObject @WMIParameters | Where {$_.Message -like "*VMware*"} | Select @{N="TimeGenerated";E={$_.ConvertToDateTime($_.TimeGenerated)}}, Message 
			#$WarnLogs = Get-WmiObject -ErrorAction:SilentlyContinue -computer $varVIServer -query ("Select * from Win32_NTLogEvent Where Type='Warning' and TimeWritten >='" + $ConvDate + "'") | Where {$_.Message -like "*VMware*"} | Select @{N="TimeGenerated";E={$_.ConvertToDateTime($_.TimeGenerated)}}, Message 
	
			If (($ErrLogs | Measure-Object).count -gt 0) 
			{
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "$VIServer Windows Event Logs: Error"
				$MyReport += Get-HTMLTable ($ErrLogs)
				$MyReport += Get-CustomHeaderClose
			}
			# Warnings
			If (($WarnLogs | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "$VIServer Windows Event Logs: Warning"
				$MyReport += Get-HTMLTable ($WarnLogs)
				$MyReport += Get-CustomHeaderClose
			}
		}	
	
		#region VMware Hosts	
		# ---- Hosts Not responding ----
		if ($varReportHostNotResponding)
		{
			$RespondHosts = $Hosts | where {$_.State -match "Not"} | Select name,CustomFields
			If (($RespondHosts | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "Hosts not responding"
				$MyReport += Get-HTMLTable $RespondHosts
				$MyReport += Get-CustomHeaderClose
			}
		}
		
		# ---- Hosts in Maintenance Mode ----
		if ($varReportHostsInMaint)
		{
	
			$MaintHosts = $Hosts | where {$_.State -match "Maintenance"} | Select name,CustomFields
			If (($MaintHosts | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "Hosts in Maintenance Mode"
				$MyReport += Get-HTMLTable $MaintHosts
				$MyReport += Get-CustomHeaderClose
			}
		}
	
		# Datastore Report
		if ($varReportHostsDatastore)
		{
			if ($varReportSelective)
			{
				$OutputDatastores = @($Datastores | where {$_.PercentFree -le $varReportHostsDatastoreThreshold} | select-Object Name, Type, CapacityMB, FreeSpaceMB, PercentFree | Sort PercentFree)
			}
			else
			{
				$OutputDatastores = @($Datastores | select-Object Name, Type, CapacityMB, FreeSpaceMB, PercentFree | Sort PercentFree)
			}
			If (($OutputDatastores | Measure-Object).count -gt 0) 
			{
				$ReportToBeGenerated = $true
				if ($varReportSelective)
				{
					$MyReport += Get-CustomHeader "1" "Datastores (Less than $varReportDatastoreThreshold% Free)"				
				}
				else
				{
					$MyReport += Get-CustomHeader "1" "Datastores"
				}
				$MyReport += Get-HTMLTable $OutputDatastores
				$MyReport += Get-CustomHeaderClose
			}
		}
		#endregion VMware Hosts
		
		#region VMware Guests
		# ---- No VM Tools ----
		if ($varReportVMTools)
		{
			# ---- No VM Tools ----
			$NoTools = $FullVM | Where { $_.Runtime.PowerState -eq "poweredOn" } | Select Name, @{N="ToolsVersion"; E={$_.Config.tools.toolsVersion}} | Where { $_.ToolsVersion -eq 0} | Select Name
			If (($NoTools | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "No VMTools"
				$MyReport += Get-HTMLTable $NoTools
				$MyReport += Get-CustomHeaderClose
			}
		}
		
		# ---- CD-Roms Connected ----
		if ($varReportCDConnected)
		{
			# ---- CD-Roms Connected ----
			$CDConn = $VMs| Where { $_ | Get-CDDrive | Where { $_.ConnectionState.Connected -eq "true" } } | Select Name, Host
			If (($CDConn | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "VM: CD-ROM Connected - VMotion Violation"
				$MyReport += Get-HTMLTable $CDConn
				$MyReport += Get-CustomHeaderClose
			}
		}
		
		# ---- Floppys Connected ----
		if ($varReportFloppyConnected)
		{
			$Floppy = $VMs| Where { $_ | Get-FloppyDrive | Where { $_.ConnectionState.Connected -eq "true" } } | Select Name, Host
			If (($Floppy | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "VM:Floppy Drive Connected - VMotion Violation"
				$MyReport += Get-HTMLTable $Floppy
				$MyReport += Get-CustomHeaderClose
			}
		}
	
		# VM Snapshot Report
		if ($varReportVMSnapshots)
		{
			$SnapshotReport = [PSObject]@()
			$OldSnapshotCount = 0
			ForEach ($vm in $VMs)
			{
				# List snaphosts
				$snapshots = Get-Snapshot -VM (Get-VM -Name $vm.Name) -WarningAction SilentlyContinue
	
				if ($snapshots -ne $null)
				{
					ForEach ($snapshot in $snapshots)
					{
						$SnapshotCount = $SnapshotCount + 1
						if ($varReportSelective -and ($snapshot.created -lt (Get-Date).AddDays(-$varReportSnapshotsThreshold)))
						{
							$OldSnapshotCount = $OldSnapshotCount +1
							$SnapshotObj = New-Object PSObject
							$SnapshotObj | Add-Member NoteProperty -Name "Snapshot Name" -Value $snapshot.Name
							$SnapshotObj | Add-Member NoteProperty -Name "VM Name" -Value $vm.Name
							$SnapshotObj | Add-Member NoteProperty -Name "VM Powerstate" -Value $vm.PowerState 
							$SnapshotObj | Add-Member NoteProperty -Name "Created" -Value $snapshot.Created
							$SnapshotReport += $SnapshotObj
						}
						else
						{
							$SnapshotObj = New-Object PSObject
							$SnapshotObj | Add-Member NoteProperty -Name "Snapshot Name" -Value $snapshot.Name
							$SnapshotObj | Add-Member NoteProperty -Name "VM Name" -Value $vm.Name
							$SnapshotObj | Add-Member NoteProperty -Name "VM Powerstate" -Value $vm.PowerState 
							$SnapshotObj | Add-Member NoteProperty -Name "Created" -Value $snapshot.Created
							$SnapshotReport += $SnapshotObj
						}
					}
				}
			}
			if ($SnapshotReport -ne $null)
			{
				if ($OldSnapshotCount -ge 1)
				{
					$ReportToBeGenerated = $true
					$MyReport += Get-CustomHeader "1" "VM Snapshots (Over $varReportSnapshotsThreshold Days Old)"
					$MyReport += Get-HTMLTable $SnapshotReport
					$MyReport += Get-CustomHeaderClose
	
				}
				else
				{
					if (!$varReportSelective)
					{
						$ReportToBeGenerated = $true
						$MyReport += Get-CustomHeader "1" "VM Snapshots"
						$MyReport += Get-HTMLTable $SnapshotReport
						$MyReport += Get-CustomHeaderClose
					}
				}
			}
		}
	
		# VM Thin Provisioned Report
		if ($varReportVMThinProvisioned)
		{
			$ThinDisks = $Datastores | Get-Thindisk
			If (($ThinDisks | Measure-Object).count -gt 0) {
				$ReportToBeGenerated = $true
				$MyReport += Get-CustomHeader "1" "VM:Thin Providioned Disks"
				$MyReport += Get-HTMLTable $ThinDisks
				$MyReport += Get-CustomHeaderClose
			}
		}
		#endregion VMware Guests
		
		$MyReport += Get-CustomHeader0Close
		$MyReport += Get-CustomHTMLClose
		Disconnect-VIServer $varVIServer -Confirm:$false
	}
	else
	{
		$varEmailSubject = "ERROR:" + $varEmailSubject
		$htmlBody = "<p>Script was unable to connect to the VI server, sorry :(</p>"
	}
	#endregion Start Script
	
	#region Script Output
	#  Final Report
	#$ReportOutput = $htmlHead + $htmlBody + $htmlTail
	if ($ReportToBeGenerated)
	{
		if ($varEmailReport -or $varSaveReportsLocally)
		{
			# Send an email
			if ($varSendMail)
			{
				$HTMLmessage = $MyReport | Out-String
				$email= 
				@{
					From = $varEmailSender
					To = $varEmailRecipient
			#		CC = "EMAIL@EMAIL.COM"
					Subject = $varEmailSubject
					SMTPServer = $varSMTPServer
					Body = $HTMLmessage
					Encoding = ([System.Text.Encoding]::UTF8)
					BodyAsHTML = $true
				}
				Send-MailMessage @email
				Sleep -Milliseconds 200
			}
			
			# Save a report
			if ($varSaveReportsLocally)
			{
				$MyReport | Out-File "$varReportFolder\$varReportName"
			}
		}
		else
		{
		   Return $MyReport
		}
	}
	#endregion Script Output
}
#endregion Source: VMware-Report.ps1

#Start the application
Main ($CommandLine)
