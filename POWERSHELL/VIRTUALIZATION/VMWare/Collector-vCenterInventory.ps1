<#
    .SYNOPSIS
        Produce a XML collection file from "VMware vCenter" Server source. (v2.0.104 - September 11, 2017)

    .DESCRIPTION
        Artifact collection file for uploading through the Microsoft WorkSpace
        service for SAM and APEX engagements that require XML documents in a
        specific format.

        Collector-vCenterInventory gets required information by connecting to the
        vCenter's web service and generating an XML artifact in the required format.

        It may require 5-10 minutes to establish an initial connection to the
        vCenter web service.  Please be patient.

     Prerequisite:
        This script uses the Inviso.SystemDiscovery.Discovery.vSphereServiceClient.dll support
        library to communicate with the vCenter web service.  This library file can be downloaded from
        https://mswstep1.blob.core.windows.net/resources/Inviso.SystemDiscovery.Discovery.vSphereServiceClient.zip.
        This file should be unzipped and placed in the same folder as this script or its
        fully qualified location must be specified using the -LibraryPath parameter when executing this script.

        This script requires PowerShell version 3 or greater.  To download PowerShell 3 or greater
        go to the Microsoft Download site (https://www.microsoft.com/download) and search for "PowerShell".

     Note:
        To enable PowerShell script execution, it may be necessary to change the script execution policy.
        To change the execution policy, from the PowerShell command prompt type the following command and press Enter.
        eg. PS C:>Set-ExecutionPolicy Unrestricted -Scope CurrentUser.

     Disclaimer:
        The sample scripts are not supported under any Microsoft standard support program or service.
        The sample scripts are provided AS IS without warranty of any kind. Microsoft further disclaims all
        implied warranties including, without limitation, any implied warranties of merchantability or of
        fitness for a particular purpose. The entire risk arising out of the use or performance of the sample
        scripts and documentation remains with you. In no event shall Microsoft, its authors, or anyone else
        involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever
        (including, without limitation, damages for loss of business profits, business interruption, loss of
        business information, or other pecuniary loss) arising out of the use of or inability to use the sample
        scripts or documentation, even if Microsoft has been advised of the possibility of such damages.

    .PARAMETER vCenter
        The name of the vCenter Server.

    .PARAMETER XMLFilePath
        Fully qualified path to storage location of Xml file to be created. The file name will automatiacally be generated by the application.

    .PARAMETER Protocol
        If included, the script will use the specified protocol to connect to the vCenter web service.  If not specified, the default protocol for secure connections ("https") will be used.

    .PARAMETER Port
        If included, the script will use the specified port to connect to the vCenter web service.  If not specified, the default Port for secure connections (443) will be used.

    .PARAMETER Locale
        If included, the script will use the specified language localization when connecting to the vCenter web service. If not specified it will use the default value "en".

    .PARAMETER  Credential
        If included, this parameter should reference a PSCredential object that includes a valid vCenter Server login (UserName & Password) value.

    .PARAMETER ProgressDisplay
        If included, the command window displays a progress activity indicator.

    .PARAMETER  SuppressLogFile
        A Log file is created by default.  If this switch is included no Log file will be created.

    .PARAMETER LogFilePath
        Fully qualified path to storage location of Log file to be created.  If not specified, the Log file will be created in the same folder as the Xml file. The application will automatically generate the file name. If SuppressLogFile is included this value will be ignored.

    .PARAMETER LibraryPath
        Fully qualified path to location of Inviso.SystemDiscovery.Discovery.vSphereServiceClient.dll support library. If not specified, it will default to the same location as this script.

    .PARAMETER  xDTCall
        This value is used for internal processing and should be ignored when running this script in a PowerShell command window.

    .PARAMETER  DataSource
        This value is used for internal processing and should be ignored when running this script in a PowerShell command window.

    .PARAMETER  AppVersion
        This value is used for internal processing and should be ignored when running this script in a PowerShell command window.

    .EXAMPLE
        C:\TEMP\Collector-vCenterInventory.ps1 "vCenterServer" "C:\TMP\OUTPUT\"

    .EXAMPLE
       C:\TEMP\Collector-vCenterInventory.ps1 -vCenter "vCenterServer" -XMLFilePath "C:\TMP\OUTPUT\" -Protocol "http" -Port 80 -Locale "fr" -SuppressLogFile -LibraryPath "C:\TMP"

    .LINK
       Author: Inviso Corporation
       Website: InvisoCorp.com/SAM
       Support Email: InvisoSA@InvisoCorp.com
#>
[CmdletBinding(SupportsShouldProcess=$true)]

Param (
    [Parameter(Mandatory=$true,Position=0)]
        [string] $vCenter,
    [Parameter(Mandatory=$true,Position=1)]
        [string] $XMLFilePath,
    [Parameter(Position=2)]
        [string] $Protocol = 'https',
    [Parameter(Position=3)]
        [string] $Port = '443',
    [Parameter(Position=4)]
        [string] $Locale = 'en',
    [Parameter(Position=5)]
        [System.Management.Automation.PSCredential] $Credential,
    [Parameter(Position=6)]
        [switch] $ProgressDisplay,
    [Parameter(Position=7)]
        [switch] $SuppressLogFile,
    [Parameter(Position=8)]
        [string] $LogFilePath,
    [Parameter(Position=9)]
        [string] $LibraryPath,
    [Parameter(Position=10)]
        [switch] $xDTCall,
    [Parameter(Position=11)]
        [string] $DataSource,
    [Parameter(Position=12)]
        [string] $AppVersion
)

#region VARIABLES
#region CONSTANTS
#Versioning element constants
Set-Variable -Name ScriptVersion -Option Constant -Value '10';
Set-Variable -Name DataOriginSource -Option Constant -Value 'VMware';
Set-Variable -Name PrimarySourceTool -Option Constant -Value 'Inviso: vCenter';
Set-Variable -Name PrimarySourceToolVersion -Option Constant -Value '2.0.104';
Set-Variable -Name PSVersion -Option Constant -Value $PsVersionTable.PSVersion;
Set-Variable -Name dotNetVersion -Option Constant -Value $PsVersionTable.CLRVersion;
#Processing constants
Set-Variable -Name XmlFileExtension -Option Constant -Value 'xml';
Set-Variable -Name LogFileExtension -Option Constant -Value 'log';
Set-Variable -Name DiscoveryDate -Option Constant -Value (Get-Date -format s);
Set-Variable -Name FileDate -Option Constant -Value (Get-Date -format 'M-d-yyyy H.m.s');
Set-Variable -Name FileNamePrefix -Option Constant -Value 'vcenterinventory';
Set-Variable -Name Tab -Option Constant -Value ([char]9);
#endregion CONSTANTS

#region WORKING VARIABLES
#Set processing variable values
$idVal 	= 0;
$VirtualCenterInstanceName = '';
$MaximumElementCount = 10;
$ProcessedElementCount = 0;
$TotalRowCount = 0;
$StartDate = Get-Date;

#If no errors occurs during processing this falg is set TRUE
$ExecutionSuccess = $false;

#HashTables to hold collected data
$EntityStore = @{};
$HostStore = @{};
$VmStore = @{};
$CrStore = @{};
$DcStore = @{};
$EvStore = @{};
$LicStore = @{};
$LogStore = @{};

$moEntityTypes = @{};
$moEntityTypes.Add('VM', '0');
$moEntityTypes.Add('VIRTUALMACHINE', '0');
$moEntityTypes.Add('HOST', '1');
$moEntityTypes.Add('HOSTSYSTEM', '1');
$moEntityTypes.Add('COMPUTE_RESOURCE', '2');
$moEntityTypes.Add('COMPUTERESOURCE', '2');
$moEntityTypes.Add('CLUSTER_COMPUTE_RESOURCE', '3');
$moEntityTypes.Add('RESOURCE_POOL', '4');
$moEntityTypes.Add('RESOURCEPOOL', '4');
$moEntityTypes.Add('VM_FOLDER', '5');
$moEntityTypes.Add('HOST_FOLDER', '6');
$moEntityTypes.Add('DATACENTER_FOLDER', '7');
$moEntityTypes.Add('DATACENTER', '8');
$moEntityTypes.Add('ALARM', '9');
$moEntityTypes.Add('SCHEDULED_TASK', '10');
$moEntityTypes.Add('TASK', '11');
$moEntityTypes.Add('EXTENSION', '12');
$moEntityTypes.Add('VAPP', '13');
$moEntityTypes.Add('DVSWITCH', '14');
$moEntityTypes.Add('DVPORTGROUP', '15');
$moEntityTypes.Add('DATASTORE_FOLDER', '16');
$moEntityTypes.Add('NETWORK_FOLDER', '17');
$moEntityTypes.Add('DATASTORE', '18');
$moEntityTypes.Add('NETWORK', '19');
$moEntityTypes.Add('FOLDER', '20');

#Initialize Output objects
$XmlHeader = '<?xml version="1.0" standalone="yes"?>';
$XmlRootOpen = '<Root>';
$XmlRootClose = '</Root>';

#Initialize Versioning object
$Versioning = '' | Select-Object 'DataSource', 'AppVersion', 'ScriptVersion', 'DataOriginSource', 'PrimarySourceTool', 'PrimarySourceToolVersion', 'PSVersion', 'dotNetVersion', 'DiscoveryDate', 'AnonymizationIdentifier', 'AnonymizationCheckValue';
$Versioning.DataSource = $DataSource;
$Versioning.AppVersion = $AppVersion;
$Versioning.ScriptVersion = $ScriptVersion
$Versioning.DataOriginSource = $DataOriginSource;
$Versioning.PrimarySourceTool = $PrimarySourceTool;
$Versioning.PrimarySourceToolVersion = $PrimarySourceToolVersion;
$Versioning.PSVersion = $PSVersion;
$Versioning.dotNetVersion = $dotNetVersion;
$Versioning.DiscoveryDate = $DiscoveryDate;

#Initialize ProcessResult object
$ProcessResult = '' | Select-Object 'MaximumControllerCount', 'ProcessedControllerCount', 'TotalRowCount', 'ProcessStartDate', 'ProcessEndDate', 'ProcessTimeInMilliseconds';

#Create a Regex object to remove invalid XML characters from output elements
$invalidXmlCharactersRegex = new-object System.Text.RegularExpressions.Regex('[^\x09\x0A\x0D\x20-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]');

#Initialize WSDL url string
$url = $Protocol + '://' + $vCenter + ':' + $Port + '/sdk/vimservice.wsdl';

#Check file parameters
#Be sure the XML path variable ends with a backslash
If ($XmlFilePath.EndsWith('\') -ne $true)
{
	$XmlFilePath += '\';
}

#Be sure the Log file path is defined and ends with a backslash or set its value equal to the XML path
If(!$LogFilePath)
{
	$LogFilePath = $XmlFilePath;
}
If ($LogFilePath.EndsWith('\') -ne $true)
{
	$LogFilePath += '\';
}

#Set Vim library load information and references
If (!$LibraryPath)
{
	$LibraryPath = $PSScriptRoot;
}
If ($LibraryPath.EndsWith('\') -ne $true)
{
	$LibraryPath += '\';
}
$VimReference = 'Inviso.SystemDiscovery.Discovery.vSphereServiceClient.VimReference'
$VimAssembly = $LibraryPath+'Inviso.SystemDiscovery.Discovery.vSphereServiceClient.dll';

#Create fully qualified XML and LOG file names
$XmlFileName = $XMLFilePath + $FileNamePrefix + '_' + $FileDate + '.' + $XMLFileExtension;
$LogFileName = $LogFilePath + $FileNamePrefix + '_' + $FileDate + '.' + $LogFileExtension;
#endregion WORKING VARIABLES
#endregion VARIABLES

#region FUNCTIONS
Function Get-WebServiceProxy()
{
	Param 
	(
		$url
	)

	$endpointAddress = New-Object System.ServiceModel.EndpointAddress $url;

	$httpBinding = New-Object System.ServiceModel.BasicHttpBinding;
	$httpBinding.AllowCookies = $true;
	$httpBinding.MaxReceivedMessageSize = 2147483647;
	$httpBinding.MaxBufferPoolSize = 2147483647;
	$httpBinding.Security.Mode = 'Transport';

	$PortClient = new-object "$VimReference.VimPortTypeClient"($httpBinding, $endpointAddress);
	$PortClient.Open();

	Return $PortClient;
}

Function Get-MoRefAltType()
{
	Param
	(
		$moRefType,
		$moRefValue,
		$name
	)

	$moRefAlt = @{};

	Try
	{

		If ($($moRefType.ToUpper()) -eq 'FOLDER')
		{
			$moRefAlt['Type'] = switch ($($name.ToUpper()))
			{
				'DATACENTERS'	{'DATACENTER_FOLDER'}
				'DATASTORE'	{'DATASTORE_FOLDER'}
				'HOST'		{'HOST_FOLDER'}
				'VM'		{'VM_FOLDER'}
				'NETWORK'	{'NETWORK_FOLDER'}
				default		{'FOLDER'}
			};
		}
		Else
		{
			$moRefAlt['Type'] = $($moRefType.ToUpper());
		}
		Try
		{
			$altType = $moRefAlt['Type'];
			$moRefAlt['TypeId'] = $moEntityTypes[$altType];
		}
		Catch
		{
			$moRefAlt['TypeId'] = '21';
		}			
	}
	Catch
	{
		$moRefAlt['TypeId'] = '21';
	}
	Return $moRefAlt;
}

Function Get-PropertyValues()
{
	Param
	(
		$ws,
		$mor_vm,			
		$mor_rf,
		$mo_type,
		$prop_arr
	)

#Create the ContainerView Object
	[string[]]$containertypeStrArr = $mo_type;
	$cv = $ws.CreateContainerView($mor_vm,$mor_rf,$containertypeStrArr,$true);

#Create the TraversalSpec[]
	$pfObjectTraversalSpec = new-object "$VimReference.TraversalSpec";
	$pfObjectTraversalSpec.type = $cv.type;
	$pfObjectTraversalSpec.path = 'view';
	$pfObjectTraversalSpecArray = @();
	$pfObjectTraversalSpecArray += $pfObjectTraversalSpec;

#Create the ObjectSpec[]
	$pfObjectSpec = new-object "$VimReference.ObjectSpec";
	$pfObjectSpec.obj = $cv;
	$pfObjectSpec.selectSet = $pfObjectTraversalSpecArray;
	$pfObjectSpec.skip = $true;
	$pfObjectSpec.skipSpecified = $true;
	$pfObjectSpecArray = @();
	$pfObjectSpecArray += $pfObjectSpec;

#Create the PropertySpec[]
	[string[]]$pathSetArray = $prop_arr;
	$pfPropertySpec = new-object "$VimReference.PropertySpec";
	$pfPropertySpec.type = $mo_type;
	$pfPropertySpec.pathSet = $pathSetArray;
	$pfPropertySpecArray = @();
	$pfPropertySpecArray += $pfPropertySpec;

#Create the PropertyFilterSpec[]
	$pfs1 = new-object "$VimReference.PropertyFilterSpec";
	$pfs1.objectSet = $pfObjectSpecArray;
	$pfs1.propset = $pfPropertySpecArray;
	$pfs1.reportMissingObjectsInResults = $true;
	$pfs1.reportMissingObjectsInResultsSpecified = $true;
	$pfsArray = @();
	$pfsArray += $pfs1;

#Get the PropertyCollector
	$mor_si = new-object "$VimReference.ManagedObjectReference";
	$mor_si.type = 'ServiceInstance';
	$mor_si.value = 'ServiceInstance';
	$sc = $ws.RetrieveServiceContent($mor_si);
	$pc = $sc.PropertyCollector;

#Retrieve the Entity Data
	$oc = $ws.RetrieveProperties($pc, $pfsArray);
	
	Return $oc;
}

Function Add-DeletedEntityId()
{
	Param
	(	
		$moRefType,
		$moRefValue,
		$name,
		$itemid
	)

	If ($moRefValue)
	{
		$itemid++;

		If(($name -eq $null) -or ($name -eq ''))
		{
			$name = 'PlaceHolder' + $itemid.ToString();
		}
		$moRefAlt = Get-MoRefAltType $moRefType $moRefValue $name;

		$e = @{};
		$e.id = $itemid;
		$e.name = $name;
		$e.moRefType = $moRefType;
		$e.moRefValue = $moRefValue;
		$e.moRefAltType = $moRefAlt['Type'];
		$e.type_id = $moRefAlt['TypeId'];

		$EntityStore[$moRefValue] = New-Object PSObject -Property $e;
	}
		
#Return the ID
	Return $itemid;
}

Function Get-EntityStore()
{
	Param
	(
		$ws,
		$mor_vm,			
		$mor_rf,
		$itemid
	)

	$mo_type = 'ManagedEntity';
	$prop_arr = 'parent', 'name';
	
	$oc = Get-PropertyValues $ws $mor_vm $mor_rf $mo_type $prop_arr;

	ForEach($o in $oc)
	{
		$moRefType = $o.obj.type;
		$moRefValue	= $o.obj.Value;

		If ($moRefValue)
		{
			$itemid++;

			$nameInfo = $null;
			$parentInfo = $null;
			If ($o.propSet)
			{
				$o.propSet.GetEnumerator() |% `
				{If ($_.val) {If ($_.name -eq 'name') {$nameInfo = $_.val} ElseIf ($_.name -eq 'parent'){$parentInfo = $_.val}}};
			}

			$parentMoRefType = $parentInfo.type;
			$parentMoRefValue = $parentInfo.Value;

			If(!$nameInfo)
			{
				$nameInfo = $('PlaceHolder' + $itemid.ToString());
			}

			$moRefAlt = Get-MoRefAltType $moRefType $moRefValue $nameInfo;

			$e = @{};
			$e.id = $itemid;
			$e.parent_Id = 0;
			$e.name = $nameInfo;
			$e.moRefType = $moRefType;
			$e.moRefValue = $moRefValue;
			$e.parentMoRefType = $parentMoRefType;
			$e.parentMoRefValue = $parentMoRefValue;
			$e.moRefAltType = $moRefAlt['Type'];
			$e.type_id = $moRefAlt['TypeId'];

			If($EntityStore[$moRefValue] -eq $null)
			{
				$EntityStore[$moRefValue] = New-Object PSObject -Property $e;
			}
		}	
	}
#Find the parent id for each entity
	ForEach($me in $EntityStore.GetEnumerator())
	{
		$childMRV = $me.Value.moRefValue;
		$parentMRV = $me.Value.parentMoRefValue;
		
		If ($parentMRV)
		{
			If($EntityStore[$parentMRV])
			{
				$parentMoEntity = $EntityStore[$parentMRV];
				$EntityStore[$childMRV].parent_id = $parentMoEntity.id;
			}
		}
	}
}

Function Get-HostStore()
{
	Param
	(
		$ws,
		$mor_vm,			
		$mor_rf
	)

	$mo_type = 'HostSystem';
	$prop_arr = 'hardware', 'config', 'runtime', 'datastore', 'vm';
	
	$oc = Get-PropertyValues $ws $mor_vm $mor_rf $mo_type $prop_arr;

	If ($oc)
	{
		ForEach($o in $oc)
		{
			$moRefType = $o.obj.type;
			$moRefValue = $o.obj.Value;

			If ($moRefValue)
			{
#Temp stores for the retrieved values
				$vmList = @();
				$cpuList = @();
				$nicList = @();
				$datastore = $null;
				$hardwareInfo = $null;
				$configInfo = $null;
				$runtimeInfo = $null;
				$datastoreInfo = $null;
				$vmInfo = $null;

				$h = @{};

				If ($o.propSet)
				{
					$o.propSet.GetEnumerator() |% {If($_.val){If($_.name -eq 'hardware') {$hardwareInfo = $_.val} ElseIf ($_.name -eq 'config') {$configInfo = $_.val} ElseIf ($_.name -eq 'runtime') {$runtimeInfo = $_.val} ElseIf ($_.name -eq 'datastore') {$datastoreInfo = $_.val} ElseIf ($_.name -eq 'vm') {$vmInfo = $_.val}}};
#Hardware Info
					$model = $hardwareInfo.systemInfo.model;
					$vendor = $hardwareInfo.systemInfo.vendor;
					$UUID = $hardwareInfo.systemInfo.uuid;
					$procCount = $hardwareInfo.cpuInfo.numCpuPackages;
					$coreCount = $hardwareInfo.cpuInfo.numCpuCores;
					$threadCount = $hardwareInfo.cpuInfo.numCpuThreads;
					If ($hardwareInfo.cpuPkg)
					{
						$hardwareInfo.cpuPkg.GetEnumerator() |% {$cpuList += $_.Description};
					}
#Config Info
					$productFullName = $configInfo.product.FullName;
					$productVersion = $configInfo.product.Version;
					If ($configInfo.network.pnic)
					{
						$configInfo.network.pnic.GetEnumerator() |% {$nicList += $_.mac};
					}
#Runtime Info
					$lastBootTime = $runtimeInfo.bootTime;
#Datastore Info
					If ($datastoreInfo)
					{
						$datastoreInfo.GetEnumerator() | select -First 1 |% {$datastore = $_.value};
					}
#Vm Info
					If ($vmInfo)
					{
						$vmInfo.GetEnumerator() |% {$vmList += $_.value};
					}

					$mo = $EntityStore[$datastore];
					If ($mo)
					{
						While(($mo) -and ($mo.type_id -ne '8'))	# 8 is datacenter
						{
							$mo = $EntityStore[$mo.parentMoRefValue];
						}
						If ($mo.id)
						{
							$h.datacenter_id = $mo.id;
						}
					}

					$eo = $EntityStore[$moRefValue];
					$h.id = $eo.id;
					$h.dns_name = $eo.name;
					$h.type_id = $eo.type_id;
					$h.parent_id = $eo.parent_id;

					$h.moRefType = $moRefType;
					$h.moRefValue = $moRefValue;
					$h.datastore = $datastore;
					$h.product_fullname = $productFullName;
					$h.product_version = $productVersion;
					$h.host_model = $model;
					$h.host_vendor= $vendor;
					$h.uuid_bios = $UUID;
					$h.cpu_count = $procCount;
					$h.cpu_core_count = $coreCount;
					$h.cpu_thread_count = $threadCount;
					$h.lastBootTime = $lastBootTime;
					$h.vmList = $vmList;
					$h.cpuList = $cpuList;
					$h.nicList = $nicList;

					$mo = $EntityStore[$datastore];
					If ($mo)
					{
						While(($mo) -and ($mo.type_id -ne '8'))	# 8 is datacenter
						{
							$mo = $EntityStore[$mo.parentMoRefValue];
						}
						If ($mo.id)
						{
							$h.datacenter_id = $mo.id;
						}
					}
					If($HostStore[$moRefValue] -eq $null)
					{
						$HostStore[$moRefValue] = New-Object PSObject -Property $h;
					}
				}
			}
		}
	}
}

Function Get-VmStore()
{
	Param
	(
		$ws,
		$mor_vm,
		$mor_rf
	)

	$mo_type = 'VirtualMachine';
	$prop_arr = 'guest', 'runtime', 'config';
	
	$oc = Get-PropertyValues $ws $mor_vm $mor_rf $mo_type $prop_arr;

	If ($oc)
	{
		ForEach($o in $oc)
		{
			$moRefType = $o.obj.type;
			$moRefValue = $o.obj.Value;

			If ($moRefValue)
			{
#Temp stores for the retrieved values
				$v = @{};
				$nicList = @();
				$hostId	= 0;
				$guestInfo	= $null;
				$runtimeInfo = $null;
				$configInfo = $null;

				If ($o.propSet)
				{
					$o.propSet.GetEnumerator() |% {If($_.val){If($_.name -eq 'guest') {$guestInfo = $_.val} ElseIf ($_.name -eq 'runtime') {$runtimeInfo = $_.val} ElseIf ($_.name -eq 'config') {$configInfo = $_.val}}};
#Guest Info
					$guestHostName = $guestInfo.hostName;
					$guestIPaddress = $guestInfo.ipAddress;
					$guestState = $guestInfo.guestState;
					$guestId = $guestInfo.guestId;
					$guestFullName = $guestInfo.guestFullName;
					If ($guestInfo.net)
					{
						$guestInfo.net.GetEnumerator() |% {$nicList += $_.macAddress};
				}
#Runtime Info
					$guestHost = $runtimeInfo.host.Value;
					$hostMoRefObj = If ($guestHost) {$EntityStore[$guestHost]};
					$hostId = $hostMoRefObj.id;
					$guestLastBootTime = $runtimeInfo.bootTime;
#Config Info
					$guestName = $configInfo.name;
					$guestInstanceUuid = $configInfo.instanceUuid;
					$guestUuid = $configInfo.uuid;
					$guestLProcs = $configInfo.hardware.numCPU;

					$eo = $EntityStore[$moRefValue];
					$v.id = $eo.id;
					$v.dns_name = $eo.name;
					$v.type_id = $eo.type_id;
					$v.parent_id = $eo.parent_id;

					$v.moRefType = $moRefType;
					$v.moRefValue = $moRefValue;
					$v.guestName = $guestName;
					$v.guestHostName = $guestHostName;
					$v.guestIPaddress = $guestIPaddress;
					$v.guest_state = $guestState;
					$v.guest_family = $guestId;
					$v.guest_os = $guestFullName;
					$v.guestHost = $guestHost;
					$v.guestLastBootTime = $guestLastBootTime;
					$v.guestInstanceUuid = $guestInstanceUuid;
					$v.uuid_bios = $guestUuid;
					$v.num_vcpu = $guestLProcs;
					$v.nicList = $nicList;
					$v.host_id = $hostId;

					If($VmStore[$moRefValue] -eq $null)
					{
						$VmStore[$moRefValue] = New-Object PSObject -Property $v;
					}
				}
			}
		}
	}
}

Function Get-CrStore()
{
	Param
	(
		$ws,
		$mor_vm,
		$mor_rf
	)

	$mo_type = 'ComputeResource';
	$prop_arr = 'name', 'configurationEx';
	
	$oc = Get-PropertyValues $ws $mor_vm $mor_rf $mo_type $prop_arr;

	If ($oc)
	{
		ForEach($o in $oc)
		{
			$moRefType = $o.obj.type;
			$moRefValue = $o.obj.Value;

			IF ($moRefValue)
			{

#Temp stores for the retrieved values
				$das_enabled = 0;
				$drs_enabled = 0;

				If ($o.propSet)
				{
					ForEach($p in $o.propSet.GetEnumerator())
					{	
						If (($p.name) -and ($p.val))
						{
							If ($p.name -eq 'configurationEx')
							{
								If ($p.val.dasConfig.enabled -eq $true -and $p.val.dasConfig.enabledSpecified -eq $true)
								{
									$das_enabled = 1;
								}
								If ($p.val.drsConfig.enabled -eq $true -and $p.val.dtsConfig.enabledSpecified -eq $true)
								{
									$drs_enabled = 1;
								}
							}
						}
					}
				}

				$c = @{};
				$c.moRefType = $moRefType;
				$c.moRefValue = $moRefValue;
				$c.das_enabled = $das_enabled;
				$c.drs_enabled = $drs_enabled;

				$eo = $EntityStore[$moRefValue];
				$c.id = $eo.id;
				$c.name = $eo.name;
				$c.type_id = $eo.type_id;
				$c.parent_id = $eo.parent_id;

				If($CrStore[$moRefValue] -eq $null)
				{
					$CrStore[$moRefValue] = New-Object PSObject -Property $c;
				}
			}
		}
	}
}

Function Get-DcStore()
{
	Param
	(
		$ws,
		$mor_vm,
		$mor_rf
	)

	$mo_type = 'Datacenter';
	$prop_arr = 'name';
	
	$oc = Get-PropertyValues $ws $mor_vm $mor_rf $mo_type $prop_arr;

	If ($oc)
	{
		ForEach($o in $oc)
		{
			$d = @{};
#Temp stores for the retrieved values
			$moRefType = $o.obj.type;
			$moRefValue = $o.obj.Value;

			If ($moRefValue)
			{
				$eo = $EntityStore[$moRefValue];
				$d.id = $eo.id;
				$d.name = $eo.name;
				$d.type_id = $eo.type_id;
				$d.parent_id = $eo.parent_id;
				$d.moRefType = $moRefType;
				$d.moRefValue = $moRefValue;

				If($DcStore[$moRefValue] -eq $null)
				{
					$DcStore[$moRefValue] = New-Object PSObject -Property $d;
				}
			}
		}
	}
}

Function Get-EvStore()
{
	Param
	(
		$ws,
		$sc,
		$itemid
	)

	$evTypes = 	'VmMigratedEvent',
			'DrsMigratedEvent',
			'VmClonedEvent',
			'VmCreatedEvent',
			'VmPoweredOffEvent',
			'com.vmware.vc.vm.DstVmMigratedEvent',
			'com.vmware.vc.vm.SrcVmMigratedEvent';

	$today = Get-Date;

#Limit to last 90 days
	$eventFSbyTime = New-Object "$VimReference.EventFilterSpecByTime";
	$eventFSbyTime.beginTime = $today.AddMonths(-3);

	$eventFS = New-Object "$VimReference.EventFilterSpec";
	$eventFS.DisableFullMessage = $true;
	$eventFS.Time = $eventFSbyTime;
	$eventFS.EventTypeId = $evTypes;

	$em = $sc.eventManager;
	$QEvent = $ws.QueryEvents($em,$eventFS);

	ForEach ($e In $QEvent)
	{
#Initialize variables
		$datacenterId = $null;
		$hostId = $null;
		$vmId = $null;
		$computeResourceType = $null;
		$computeResourceId = $null;
		$eventType = $null;
		$createdTime = $null;

#Temp stores for the retrieved values
		$ev = @{};
		$eType = $e.GetType().ToString();
		[String[]] $tokens = $eType.Split('.');

		If ($tokens.Length -gt 0)
		{
			$eventType = $tokens[$tokens.Length-1];
		}
		$datacenterName = $e.Datacenter.Name;
		$dataCenterMoRefType = $e.Datacenter.Datacenter.type;
		$dataCenterMoRefValue = $e.Datacenter.Datacenter.Value;
		$computeResourceName = $e.ComputeResource.Name;
		$computeResourceMoRefType = $e.ComputeResource.ComputeResource.type;
		$computeResourceMoRefValue = $e.ComputeResource.ComputeResource.Value;
		$hostName = $e.Host.Name;
		$hostMoRefType = $e.Host.Host.type;
		$hostMoRefValue = $e.Host.Host.Value;
		$vmName = $e.Vm.Name;
		$vmMoRefType = $e.Vm.Vm.type;
		$vmMoRefValue = $e.Vm.Vm.Value;
		$SourcehostName = $e.SourceHost.Name;
		$SourcehostMoRefType = $e.SourceHost.Host.type;
		$SourcehostMoRefValue = $e.SourceHost.Host.Value;
		$userName = $e.UserName;
		$chainId = $e.ChainId;
		$key = $e.key;
		If ($e.CreatedTime)
		{
			$createdTime = $e.CreatedTime | Get-Date -Format s;
		}

#Find / Create Datacenter ID
		If($datacenterMoRefValue)
		{
			$eo = $EntityStore[$datacenterMoRefValue];
			If ($eo.id)
			{
				$datacenterId = $eo.id;
			}
			If(!$datacenterId)
			{
				$deleteddatacenterId = Add-DeletedEntityId $datacenterMoRefType $datacenterMoRefValue $datacenterName $itemid;
				If ($deleteddatacenterId)
				{
					$datacenterId = $deleteddatacenterId;
					$itemid++;
				}
			}
		}
	
#Find / Create Host ID
		If($hostMoRefValue)
		{				
			$eo = $EntityStore[$hostMoRefValue];
			If ($eo.id)
			{
				$hostId = $eo.id;
			}
			If(!$hostId)
			{
				$deletedhostId = Add-DeletedEntityId $hostMoRefType $hostMoRefValue $hostName $itemid;
				If ($deletedhostId)
				{
					$hostId = $deletedhostId;
					$itemid++;
				}
			}
		}
		
#Find / Create VM ID
		If($vmMoRefValue)
		{
			$eo = $EntityStore[$vmMoRefValue];
			If ($eo.id)
			{
				$vmId = $eo.id;
			}
			If(!$vmId)
			{
				$deletedvmId = Add-DeletedEntityId $vmMoRefType $vmMoRefValue $vmName $itemid;
				If ($deletedvmId)
				{
					$vmId = $deletedvmId;
					$itemid++;
				}
			}
		}

#Find / Create ComputeResource ID
		If($computeResourceMoRefValue)
		{
			$eo = $EntityStore[$computeResourceMoRefValue];
			If ($eo.id)
			{
				$computeResourceId = $eo.id;
			}
			If ($eo.type_id)
			{
				$computeResourceType = $eo.type_id;
			}
			If(!$computeResourceId)
			{
				$deletedcomputeResourceId = Add-DeletedEntityId $computeResourceMoRefType $computeResourceMoRefValue $computeResourceName $itemid;
				If ($deletedcomputeResourceId)
				{
					$computeResourceId = $deletedcomputeResourceId;
					$itemid++;
				}
			}
		}

#Find / Create SourceHost ID
		If($SourcehostMoRefValue)
		{				
			$eo = $EntityStore[$SourcehostMoRefValue];
			If ($eo.id)
			{
				$SourceHostId = $eo.id;
			}
			If(!$SourceHostId)
			{
				$deletedsourcehostId = Add-DeletedEntityId $SourcehostMoRefType $SourcehostMoRefValue $SourcehostName $itemid;
				If ($deletedsourcehostId)
				{
					$SourcehostId = $deletedsourcehostId;
					$itemid++;
				}
			}
		}
		$ev.event_id = $key;
		$ev.event_type = $eventType;
		$ev.create_time = $createdTime;
		$ev.user_name = $userName;
		$ev.vm_id = $vmId;
		$ev.vm_name = $vmName;
		$ev.host_id = $hostId;
		$ev.host_name = $hostName;
		$ev.sourcehost_id = $SourcehostId;
		$ev.sourcehost_name = $SourcehostName;
		$ev.computeresource_id = $computeResourceId;
		$ev.computeresource_type = $computeResourceType;
		$ev.computeresource_name = $computeResourceName;
		$ev.datacenterName = $datacenterName;
		$ev.dataCenterMoRefType = $dataCenterMoRefType;
		$ev.dataCenterMoRefValue = $dataCenterMoRefValue;
		$ev.computeResourceMoRefType = $computeResourceMoRefType;
		$ev.computeResourceMoRefValue = $computeResourceMoRefValue;
		$ev.hostMoRefType = $hostMoRefType;
		$ev.hostMoRefValue = $hostMoRefValue;
		$ev.sourcehostMoRefType = $sourcehostMoRefType;
		$ev.sourcehostMoRefValue = $sourcehostMoRefValue;
		$ev.vmMoRefType = $vmMoRefType;
		$ev.vmMoRefValue = $vmMoRefValue;
		$ev.chainId = $chainId;

		If($EvStore[$e.key] -eq $null)
		{
			$EvStore[$e.key] += New-Object PSObject -Property $ev;
		}
	}
}

Function Get-LicStore()
{
	Param
	(
		$ws
	)

	$lam = new-object "$VimReference.ManagedObjectReference";
	$lam.type = 'LicenseAssignmentManager';
	$lam.value = 'LicenseAssignmentManager';
	$lamLaArr = $ws.QueryAssignedLicenses($lam,'');

	ForEach($la in $lamLaArr)
	{
		$moRefValue	= $la.entityId;
		$productName = $null;
		$productVersion = $null;
		$l = @{};

		If ($moRefValue)
		{
			$entityName	= $la.entityDisplayName;
			$licenseName = $la.assignedLicense.Name;

			$la.properties |% {If($_.value){If($_.key -eq 'ProductName') {$productName = $_.value} ElseIf ($_.key -eq 'ProductVersion') {$productVersion = $_.value}}};

			$l.asset_name = $entityName;
			$l.edition_name = $licenseName;
			$l.product_name = $productName;
			$l.product_version = $productVersion;
			$l.moRefValue = $moRefValue;

			If($LicStore[$moRefValue] -eq $null)
			{
				$LicStore[$moRefValue] = New-Object PSObject -Property $l;
			}
		}
	}
}

Function Get-vCenterInstance()
{
	Param
	(
		$ws,
		$sc
	)

	$VirtualCenterName = '';

	$om = new-object "$VimReference.ManagedObjectReference";
	$om.type = 'OptionManager';
	$om.value = 'VpxSettings';

#Create the ObjectSpec[]
	$pfObjectSpec = new-object "$VimReference.ObjectSpec";
	$pfObjectSpec.obj = $om;
	$pfObjectSpec.skip = $false;
	$pfObjectSpec.skipSpecified = $true;

	$pfObjectSpecArray = @();
	$pfObjectSpecArray += $pfObjectSpec;

#Create the PropertySpec[]
	$pfPropertySpec	= new-object "$VimReference.PropertySpec";
	$pfPropertySpec.type = 'OptionManager';
	$pfPropertySpec.all = $true;
	$pfPropertySpec.allSpecified = $true;

	$pfPropertySpecArray = @();
	$pfPropertySpecArray += $pfPropertySpec;

#Create the PropertyFilterSpec[]
	$pfs1 = new-object "$VimReference.PropertyFilterSpec";
	$pfs1.objectSet = $pfObjectSpecArray;
	$pfs1.propset = $pfPropertySpecArray;
	$pfs1.reportMissingObjectsInResults = $true;
	$pfs1.reportMissingObjectsInResultsSpecified = $true;

	$pfsArray = @();
	$pfsArray += $pfs1;

	$pc = $sc.PropertyCollector;

#Retrieve the Settings
	$oc = $ws.RetrieveProperties($pc, $pfsArray);

	Try 
	{ 
		ForEach($o in $oc)
		{
			ForEach($p in $o.propSet.GetEnumerator())
			{	
				If($p.name -eq 'setting')
				{
					ForEach($v in $p.val)
					{
						If($v.key -eq 'VirtualCenter.InstanceName')
						{
							$VirtualCenterName	= $v.value;
							break;
						}
					}
					If($VirtualCenterName -ne '')
					{
						break;
					}
				}
			}
			If($VirtualCenterName -ne '')
			{
				break;
			}
		}
	}
	Catch
	{}

	Return $VirtualCenterName;
}

Function Add-LogEntry()
{
	Param 
	(
		$LineValue
	)
	$LogStoreLineCount = ($LogStore.Count + 1);
	$LogStore[$LogStoreLineCount] += $LineValue;
}
#endregion FUNCTIONS

#region PROGRAM MAIN
Try
{
#region PREPROCESS VALIDATION
	Add-LogEntry -LineValue $('Processing Begin' + $(': ' + $((Get-Date -format s).Replace('T', ' '))));

#Capture the current parameter settings
	Add-LogEntry -LineValue $($Tab+'List of parameter values used for this script execution');
	Add-LogEntry -LineValue $($Tab+$Tab+'vCenter = (' + $vCenter + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'XmlFilePath = (' + $XmlFilePath + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'Protocol = (' + $Protocol + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'Port = (' + $Port + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'Locale = (' + $Locale + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'Credential = (' + $(If($Credential){'Value Supplied'}Else{'Value Not Supplied'}) + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'ProgressDisplay = (' + $(If($ProgressDisplay){'On'}Else{'Off'}) + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'SuppressLogFile = (' + $(If($SuppressLogFile){'On'}Else{'Off'}) + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'LogFilePath = (' + $LogFilePath + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'LibraryPath = (' + $LibraryPath + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'xDTCall = (' + $(If($xDTCall){'On'}Else{'Off'}) + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'PSVersion = (' + $PSVersion + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'dotNetVersion = (' + $dotNetVersion + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'DataSource = (' + $DataSource + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'AppVersion = (' + $AppVersion + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'DataOriginName = (' + $DataOriginSource + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'ScriptVersion = (' + $ScriptVersion + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'PrimarySourceTool = (' + $PrimarySourceTool + ')');
	Add-LogEntry -LineValue $($Tab+$Tab+'PrimarySourceToolVersion = (' + $PrimarySourceToolVersion + ')');

	Try
	{
#Perform initial validation checks before continuing
		Add-LogEntry -LineValue $($Tab+'Validating parameters');
		If ($ProgressDisplay)
		{
			Write-Progress -Id 0 -Activity $('Validating Parameters');
		}
#Verify the VimAssembly library file reference is correct
		If ($(Test-Path $VimAssembly) -eq $false)
		{
			$ErrorMessage = 'Could not find Inviso.SystemDiscovery.Discovery.vSphereServiceClient.dll support library. If it is not in the script directory, use the LibraryPath parameter to specify its path.';
		}
#Verify we are running on PS Version 3 or greater
		ElseIf($PSVersionTable.PSVersion.Major -le 2)
		{
			$ErrorMessage = 'This script requires PowerShell version 3 or greater to run';
		}
#Validate that XML file path value is accessible
		ElseIf ($(Test-Path $XMLFilePath) -eq $false)
		{
			$ErrorMessage = 'Invalid XMLFilePath specified';
		}
#Validate that LOG file path value is accessible
		ElseIf ($(Test-Path $LogFilePath) -eq $false)
		{
			$ErrorMessage = 'Invalid LogFilePath specified';
		}
#See if the $Credential object exists
		ElseIf (!$Credential) 
		{
#If no $Credential object and the script is not being called by the xDT app have user enter it here
			If (!$xDTCall)
			{
				Try
				{
					$Credential = Get-Credential -Message 'vSphere console log on credentials';
				}
				Catch
				{
					$ErrorMessage = 'Cannot complete login due to an incorrect user name or password';
				}
			}
		}
#Ping vCenter Server
		If (!(Test-Connection $vCenter -Count 2 -Quiet))
		{
			$PingTestResults = $($vCenter + ' failed ping test.');
			Add-LogEntry -LineValue $($Tab+$Tab+$PingTestResults);
		}
	}
	Catch
	{
		$ErrorMessage = $_.Exception.Message;
	}
	Add-LogEntry -LineValue $($Tab+'Validating User credentials entered');
	If (!$ErrorMessage -and !$Credential.UserName)
	{
		$ErrorMessage = 'Cannot complete login due to an incorrect user name or password';
	}
#endregion PREPROCESS VALIDATION

#region SERVER CONNECT
	If (!$ErrorMessage)
	{
		Try
		{
#Set remote Certificate Server Validation Callback to True
			[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};

#Load support library references
			[void][system.Reflection.Assembly]::LoadWithPartialName('system.web.services');
			[void][system.Reflection.Assembly]::LoadWithPartialName('System.ServiceModel');
			[void][system.Reflection.Assembly]::LoadFile($VimAssembly);

#Begin data collection
			Add-LogEntry -LineValue $($Tab+'Creating Proxy Connection to '+ $url);
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Creating Proxy Connection to '+ $url) -Status $('This may take a few minutes.  Please be patient.');
			}
#Get Proxy
			$StartUnitDate = Get-Date;

			$Proxy = Get-WebServiceProxy $url;

			$EndUnitDate = Get-Date;
			$TimeDiff = $EndUnitDate - $StartUnitDate;
			$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
			If($Proxy)
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'Proxy Connection Created in ' + $TimeMilliSeconds + ' milliseconds');
#Initialise a session manager object	
				Add-LogEntry -LineValue $($Tab+'Initializing Session Manager');
				If ($ProgressDisplay)
				{
					Write-Progress -Id 0 -Activity $('Initializing Session Manager');
				}
				$mor_sm = new-object "$VimReference.ManagedObjectReference";
				$mor_sm.type = 'SessionManager';
				$mor_sm.value = 'SessionManager';
#Establish Session
				Add-LogEntry -LineValue $($Tab+'Establishing Session');
				If ($ProgressDisplay)
				{
					Write-Progress -Id 0 -Activity $('Establishing Session');
				}
				Try
				{
					$us = New-Object "$VimReference.UserSession";
					$us = $Proxy.Login($mor_sm, $Credential.UserName, $Credential.GetNetworkCredential().Password, $Locale);
				}
				Catch
				{
					If ($_.Exception.InnerException -match 'Cannot complete login due to an incorrect user name or password.')
					{
						$Errormessage = $_.Exception.InnerException.Message;
					}
					ElseIf ($_.Exception.InnerException -match 'There was no endpoint listening')
					{
						$Errormessage = $_.Exception.InnerException.Message
					}
					Else
					{
						$Errormessage = $_.Exception.Message;
					}
				}
				If (!$Errormessage)
				{
					If($us)
					{
						$mor_si = new-object "$VimReference.ManagedObjectReference";
						$mor_si.type = 'ServiceInstance';
						$mor_si.value = 'ServiceInstance';

						$sc = $Proxy.RetrieveServiceContent($mor_si);
						$mor_rf = $sc.rootFolder;
						$mor_vm = $sc.viewManager;
					}
					Else
					{
						$ErrorMessage = 'Unable to log into vCenter Server';
					}
				}
			}
			Else
			{
				$ErrorMessage = 'Unable to create Proxy connection';
			}
		}
		Catch
		{
			$ErrorMessage = $_.Exception.Message;
		}
	}
#endregion SERVER CONNECT

#region COLLECT DATA
#If the ViewManager MO is initialized, retrieve inventory
	If (!$ErrorMessage)
	{
		Try
		{
#Entity data collection
			Add-LogEntry -LineValue $($Tab+'Collecting Entity Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting Entity Inventory');
			}
			Try
			{
				$StartUnitDate = Get-Date;
				Get-EntityStore $Proxy $mor_vm $mor_rf $idVal;
				$idVal += $EntityStore.Count;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $EntityStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#Host data collection
			Add-LogEntry -LineValue $($Tab+'Collecting Host Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting Host Inventory');
			}
			Try
			{
				$StartUnitDate = Get-Date;
				Get-HostStore $Proxy $mor_vm $mor_rf;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $HostStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#VM data collection
			Add-LogEntry -LineValue $($Tab+'Collecting VM Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting VM Inventory');
			}
			Try
			{
				$StartUnitDate = Get-Date;
				Get-VmStore $Proxy $mor_vm $mor_rf;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $VmStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#ComputeResource data collection
			Add-LogEntry -LineValue $($Tab+'Collecting ComputeResource Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting ComputeResource Inventory');
			}
			Try
			{					
				$StartUnitDate = Get-Date;
				Get-CrStore $Proxy $mor_vm $mor_rf;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $CrStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#DataCenter data collection
			Add-LogEntry -LineValue $($Tab+'Collecting DataCenter Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting DataCenter Inventory');
			}
			Try
			{
				$StartUnitDate = Get-Date;
				Get-DcStore $Proxy $mor_vm $mor_rf;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $DcStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#Event data collection
			Add-LogEntry -LineValue $($Tab+'Collecting Event Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting Event Inventory');
			}
			Try
			{
				$StartUnitDate = Get-Date;
				Get-EvStore $Proxy $sc $idVal;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $EvStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#License Inventory data collection
			Add-LogEntry -LineValue $($Tab+'Collecting License Inventory');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting License Inventory');
			}
			Try
			{
				$StartUnitDate = Get-Date;
				Get-LicStore $Proxy;
				$EndUnitDate = Get-Date;
				$TimeDiff = $EndUnitDate - $StartUnitDate;
				$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
				$ElementRowCount = $LicStore.Count;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' inventory entries collected in ' + $TimeMilliSeconds + ' milliseconds');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
#vCenter Instance Name collection
			Add-LogEntry -LineValue $($Tab+'Collecting vCenter Instance Name');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Collecting vCenter Instance Name');
			}
			Try
			{
				$VirtualCenterInstanceName = Get-vCenterInstance $Proxy $sc;
				Add-LogEntry -LineValue $($Tab+$Tab+$Tab+'vCenter Instance Name collected');
			}
			Catch
			{
				Add-LogEntry -LineValue $($Tab+$Tab+'ERROR: '+$_.Exception.Message);
			}
		}
		Catch
		{
			$ErrorMessage = $('Data collection incomplete.  Error captured - ' +  $_.Exception.Message);
		}
	}
#endregion COLLECT DATA

#region OPEN XML FILE
	If (!$ErrorMessage)
	{
#Begin Create Xml File process
		Add-LogEntry -LineValue $($Tab+'Creating XML File');
		If ($ProgressDisplay)
		{
			Write-Progress -Id 0 -Activity $('Opening XML File stream for writing');
		}
#Opening XmlFileName stream
		Add-LogEntry -LineValue $($Tab+$Tab+'Opening XML File stream for writing');
		If ($ProgressDisplay)
		{
			Write-Progress -Id 0 -Activity $('Opening XML File stream for writing');
		}
		Try
		{
			$XMLFileStream = New-Object System.IO.StreamWriter $XmlFileName;
			$XMLFileStream.AutoFlush = $true;
		}
		Catch
		{
			$ErrorMessage = 'Could not create XML File';
		}
	}
#endregion OPEN XML FILE

#region WRITE XML DATA
	If (!$ErrorMessage)
	{
		Try
		{
#Output Header Elements
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding Xml Header element');
			$XMLFileStream.WriteLine($XmlHeader);
#Output Opening Root element
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding opening Root element');
			$XMLFileStream.WriteLine($XmlRootOpen);
#Output Versioning element
			$Table = 'Versioning';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' element');
			$Versioning |% {$_.psobject.properties |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $_.value + '</' + $_.name + '>'))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Write "Vpx_Entity" elements
			$Table = 'Vpx_Entity';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $EntityStore.GetEnumerator() | Sort {$_.Value.id})
			{
				$WriteList = 'id', 'name', 'type_id', 'parent_id';
#Add to file
				$Ent.Value | Select $WriteList |% {$_.psobject.properties | Where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Vm" elements
			$Table = 'Vpx_Vm';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $VmStore.GetEnumerator() | Sort-Object {$_.Value.id})
			{
				$WriteList = 'id', 'dns_name', 'uuid_bios', 'guest_state', 'guest_family', 'guest_os', 'num_vcpu', 'host_id';
#Add to file
				$Ent.Value | Select $WriteList |% {$_.psobject.properties | Where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Host" elements
			$Table = 'Vpx_Host';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $HostStore.GetEnumerator() | Sort-Object {$_.Value.id})
			{
				$WriteList = 'id', 'datacenter_id', 'dns_name', 'uuid_bios', 'product_fullname', 'product_version', 'cpu_count', 'cpu_core_count', 'cpu_thread_count', 'host_model', 'host_vendor';
				$Ent.Value | Select $WriteList |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Event" elements
			$Table = 'Vpx_Event';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $EvStore.GetEnumerator() | Sort-Object { $_.Value.key })
			{
				$WriteList = 'event_id', 'event_type', 'create_time', 'username', 'vm_id', 'vm_name', 'host_id', 'host_name', 'computeresource_id', 'computeresource_type', 'computeresource_name';
				$Ent.Value | Select $WriteList |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Event_Arg" elements
			$Table = 'Vpx_Event_Arg';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$Arg_Id = 1;
			$ElementRowCount = 0;
			ForEach($Ent in $EvStore.GetEnumerator() | Sort-Object { $_.Value.key })
			{
				$Host_id = $Ent.Value.sourcehost_id;
				$Obj_Name = $Ent.Value.sourcehost_name;
				If ($Host_id)
				{
					$WriteList = @{Name='arg_id';Expression={$Arg_Id}}, 'event_id', @{Name='host_id';Expression={$Host_Id}}, @{Name='obj_name';Expression={$Obj_Name}};
					$Ent.Value | Select $WriteList |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
					$ElementRowCount++;
				}
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Compute_Resource" elements
			$Table = 'Vpx_Compute_Resource';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $CrStore.GetEnumerator() | Sort-Object { $_.Value.id })
			{
				$WriteList = 'id', 'das_enabled', 'drs_enabled';
				$Ent.Value | Select $WriteList |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Host_Cpu" elements
			$Table = 'Vpx_Host_Cpu';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $HostStore.GetEnumerator() | Sort-Object {$_.Value.id})
			{
				$inst = $Ent.Value;
				If($inst.id -ne '0')
				{
					ForEach($cpu in $inst.cpuList)
					{
						$Store = '' | Select 'host_id', 'description';
						$Store.host_id = $inst.id;
						$Store.description = $cpu;
#Add to file
						$Store |% {$_.psobject.properties | where {$_.value -ne $null -and $_.value -ne '-'} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
						$ElementRowCount++;
					}
				}
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write Host "Vpx_Nic" elements
			$Table = 'Vpx_Nic';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding Host '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $HostStore.GetEnumerator() | Sort-Object { $_.Value.id })
			{
				$inst = $Ent.Value;
				If($inst.id -ne '0')
				{
					ForEach($nic in $inst.nicList)
					{
						$Store = '' | Select 'entity_id', 'mac_address';
						$Store.entity_id = $inst.id;
						$Store.mac_address = $nic;
#Add to file
						$Store |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
						$ElementRowCount++;
					}
				}
			}
#Special counter variable as we are potentially writing to this table twice but don't want to log is as two elements 
			$ElementRowNicCountTotal = $ElementRowCount;

			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write VM "Vpx_Nic" elements
			$Table = 'Vpx_Nic';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding VM '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $VmStore.GetEnumerator() | Sort-Object { $_.Value.id })
			{
				$inst = $Ent.Value;
				If($inst.id -ne '0')
				{
					ForEach($nic in $inst.nicList)
					{
						$Store = '' | Select 'entity_id', 'mac_address';
						$Store.entity_id = $inst.id;
						$Store.mac_address = $nic;
#Add to file
						$Store |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
						$ElementRowCount++;
					}
				}
			}
			$ElementRowNicCountTotal += $ElementRowCount;
			If ($ElementRowNicCountTotal -gt 0)
			{
				$TotalRowCount += $ElementRowNicCountTotal;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpx_Parameter" element
			$Table = 'Vpx_Parameter';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			If(($VirtualCenterInstanceName -ne $null) -and ($VirtualCenterInstanceName -ne ''))
			{
				$Store = '' | Select 'virtualcenterinstancename';
				$Store.virtualcenterinstancename = $VirtualCenterInstanceName;
#Add to file
				$Store |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Write "Vpxv_Lic_Usage_History" elements
			$Table = 'Vpxv_Lic_Usage_History';
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding '+$Table+' elements');
			If ($ProgressDisplay)
			{
				Write-Progress -Id 0 -Activity $('Writing elements to file') -Status $('Processing element '+$Table);
			}
			$ElementRowCount = 0;
			ForEach($Ent in $LicStore.GetEnumerator() | Sort-Object { $_.Value.entityName })
			{
				$WriteList = 'asset_name', 'edition_name', 'product_name', 'product_version';
				$Ent.Value | Select $WriteList |% {$_.psobject.properties | where {$_.value -ne $null} |% {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $($invalidXmlCharactersRegex.Replace($($_.value), '').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace("'", '&apos;').replace('"', '&quot;') + '</' + $_.name + '>')))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Add entry to processed row count
				$ElementRowCount++;
			}
			If ($ElementRowCount -gt 0)
			{
				$TotalRowCount += $ElementRowCount;
				$ProcessedElementCount++;
			}
			Add-LogEntry -LineValue $($Tab+$Tab+$Tab+$ElementRowCount + ' element entries added.');
#Complete file write
			$EndDate = Get-Date;
			$TimeDiff = $EndDate - $StartDate;
			$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;

# Write ProcessResult element
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding ProcessResult element');
			$Table = 'ProcessResult';
			$WriteList = 'ElementsCollected', 'ElementsRequested', 'ElementItemsTotal', 'ProcessTimeStart', 'ProcessTimeEnd', 'ProcessTimeInMilliseconds', 'ExecutionStatus', 'ExecutionStatusMessage';
			$i=@{};
			$i.ElementsCollected = $ProcessedElementCount;
			$i.ElementsRequested = $MaximumElementCount;
			$i.ElementItemsTotal = $TotalRowCount;
			$i.ProcessTimeStart = $(Get-Date $StartDate -format s);
			$i.ProcessTimeEnd = $(Get-Date $EndDate -format s);
			$i.ProcessTimeInMilliseconds = $TimeMilliSeconds;
			If ($ProcessedElementCount -ne $MaximumElementCount)
			{
				$i.ExecutionStatus = 'Incomplete';
				$i.ExecutionStatusMessage = 'Missing elements.';
			}
			Else
			{
				$i.ExecutionStatus = 'Success';
				$i.ExecutionStatusMessage = 'All elements collected.';
			}
			$ProcessResult = New-Object PSObject -Property $i;
			$ProcessResult | Select-Object $WriteList | ForEach-Object {$_.psobject.properties | ForEach-Object {$XMLFileStream.WriteLine($Tab + '<' + $Table + '>')} {$XMLFileStream.WriteLine($($Tab + $Tab + '<' + $_.name + '>' + $_.value + '</' + $_.name + '>'))} {$XMLFileStream.WriteLine($Tab + '</' + $Table + '>')}};
#Output Closing Root element
			Add-LogEntry -LineValue $($Tab+$Tab+'Adding closing Root element');
			$XMLFileStream.WriteLine($XmlRootClose);
		}
		Catch
		{
			$ErrorMessage = $_.Exception.Message;
		}
	}
#endregion WRITE XML DATA

#region PROCESS SUCCESS FLAG
	If (!$ErrorMessage)
	{
#Logoff web service
		Add-LogEntry -LineValue $($Tab+$Tab+'Logout out of vCenter session');
		$Proxy.Logout($mor_sm);
#If we made it all the way to the end without terminating set ExecutionSuccess status to true
		$ExecutionSuccess = $true;
	}
#endregion PROCESS SUCCESS FLAG
}	
Catch
{
	$ErrorMessage = $_.Exception.Message;
}
Finally
{
#Close XML Stream
	Try
	{
		If ($XMLFileStream)
		{
			$XMLFileStream.Close();
			Add-LogEntry -LineValue $($Tab+'Xml file ' + $XmlFilename + ' created.');
		}
	}
	Catch
	{
		If ($ErrorMessage)
		{
			$ErrorMessage += ': Failed to properly close of XML File.';
		}
		Else
		{
			$ErrorMessage = 'Failed to properly close of XML File';
		}
	}
	
#Create and write Log file if not Suppressed
	If (!$SuppressLogFile)
	{
#If we fell into the PROGRAM MAIN Catch we need to close our processing time stamp
		If (!$EndDate)
		{
			$EndDate = Get-Date;
			$TimeDiff = $EndDate - $StartDate;
			$TimeMilliSeconds = [int]$TimeDiff.TotalMilliSeconds;
		}
#Write log file
		Try
		{
			$LogFileStream = New-Object System.IO.StreamWriter $LogFileName;
			$LogFileStream.AutoFlush = $true;
			Add-LogEntry -LineValue $($Tab+'Script processing time in milliseconds: ' + $TimeMilliSeconds);
			If (!$ExecutionSuccess)
			{
#If the script is exited with a Ctrl+C the flag will not be set and no error will have been generated
				If (!$ErrorMessage)
				{
					$ErrorMessage = 'Script execution terminated - file write incomplete.';
				}
				Add-LogEntry -LineValue $($Tab+'ExecutionStatus = Failure');
				Add-LogEntry -LineValue $($Tab+'ExecutionStatusMessage = ERROR: ' + $ErrorMessage);
			}

			If ($ProcessedElementCount -ne $MaximumElementCount)
			{
				Add-LogEntry -LineValue $($Tab+'ExecutionStatus = Incomplete');
				Add-LogEntry -LineValue $($Tab+'ExecutionStatusMessage = Missing elements.');
			}
			Else
			{
				Add-LogEntry -LineValue $($Tab+'ExecutionStatus = Success');
				Add-LogEntry -LineValue $($Tab+'ExecutionStatusMessage = All elements collected.');
			}
			Add-LogEntry -LineValue $('Processing End: ' + $((Get-Date -format s).Replace('T', ' ')));

			$LogStore.GetEnumerator() | Sort Name |% {$LogFileStream.WriteLine($_.Value)} -ErrorAction SilentlyContinue;
			$LogFileStream.Close();
		}
		Catch
		{
			If (!$xDTCall)
			{
				If ($ErrorMessage)
				{
					$ErrorMessage += ': Could not create LOG File';
				}
				Else
				{
					$ErrorMessage = $('Could not create LOG File');
				}
			}
		}
	}
	$CollectionResults = '' | Select-Object 'CollectionSuccess', 'FileName', 'Error';
	$CollectionResults.CollectionSuccess = $ExecutionSuccess;
	$CollectionResults.FileName = $XmlFileName;
	$CollectionResults.Error = $ErrorMessage;
}
#endregion PROGRAM MAIN
If ($xDTCall)
{
	Return $CollectionResults;
}
Else
{
	$CollectionResults | fl;
}

# SIG # Begin signature block
# MIIkAwYJKoZIhvcNAQcCoIIj9DCCI/ACAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCAwBFmXiWBA/zeN
# WLxer1GoSbDqTB2z3jjCjB1EP6cfAqCCDYIwggYAMIID6KADAgECAhMzAAAAww6b
# p9iy3PcsAAAAAADDMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMTcwODExMjAyMDI0WhcNMTgwODExMjAyMDI0WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQC7V9c40bEGf0ktqW2zY596urY6IVu0mK6N1KSBoMV1xSzvgkAqt4FTd/NjAQq8
# zjeEA0BDV4JLzu0ftv2AbcnCkV0Fx9xWWQDhDOtX3v3xuJAnv3VK/HWycli2xUib
# M2IF0ZWUpb85Iq2NEk1GYtoyGc6qIlxWSLFvRclndmJdMIijLyjFH1Aq2YbbGhEl
# gcL09Wcu53kd9eIcdfROzMf8578LgEcp/8/NabEMC2DrZ+aEG5tN/W1HOsfZwWFh
# 8pUSoQ0HrmMh2PSZHP94VYHupXnoIIJfCtq1UxlUAVcNh5GNwnzxVIaA4WLbgnM+
# Jl7wQBLSOdUmAw2FiDFfCguLAgMBAAGjggF/MIIBezAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUpxNdHyGJVegD7p4XNuryVIg1Ga8w
# UQYDVR0RBEowSKRGMEQxDDAKBgNVBAsTA0FPQzE0MDIGA1UEBRMrMjMwMDEyK2M4
# MDRiNWVhLTQ5YjQtNDIzOC04MzYyLWQ4NTFmYTIyNTRmYzAfBgNVHSMEGDAWgBRI
# bmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3
# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEt
# MDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIw
# MTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAE2X
# TzR+8XCTnOPVGkucEX5rJsSlJPTfRNQkurNqCImZmssx53Cb/xQdsAc5f+QwOxMi
# 3g7IlWe7bn74fJWkkII3k6aD00kCwaytWe+Rt6dmAA6iTCXU3OddBwLKKDRlOzmD
# rZUqjsqg6Ag6HP4+e0BJlE2OVCUK5bHHCu5xN8abXjb1p0JE+7yHsA3ANdkmh1//
# Z+8odPeKMAQRimfMSzVgaiHnw40Hg16bq51xHykmCRHU9YLT0jYHKa7okm2QfwDJ
# qFvu0ARl+6EOV1PM8piJ858Vk8gGxGNSYQJPV0gc9ft1Esq1+fTCaV+7oZ0NaYMn
# 64M+HWsxw+4O8cSEQ4fuMZwGADJ8tyCKuQgj6lawGNSyvRXsN+1k02sVAiPGijOH
# OtGbtsCWWSygAVOEAV/ye8F6sOzU2FL2X3WBRFkWOCdTu1DzXnHf99dR3DHVGmM1
# Kpd+n2Y3X89VM++yyrwsI6pEHu77Z0i06ELDD4pRWKJGAmEmWhm/XJTpqEBw51sw
# THyA1FBnoqXuDus9tfHleR7h9VgZb7uJbXjiIFgl/+RIs+av8bJABBdGUNQMbJEU
# fe7K4vYm3hs7BGdRLg+kF/dC/z+RiTH4p7yz5TpS3Cozf0pkkWXYZRG222q3tGxS
# /L+LcRbELM5zmqDpXQjBRUWlKYbsATFtXnTGVjELMIIHejCCBWKgAwIBAgIKYQ6Q
# 0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
# Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
# dCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNh
# dGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5
# WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
# UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQD
# Ex9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0B
# AQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4
# BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe
# 0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato
# 88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v
# ++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDst
# rjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN
# 91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4ji
# JV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmh
# D+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbi
# wZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8Hh
# hUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaI
# jAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTl
# UAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
# HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQF
# TuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29m
# dC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNf
# MjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5t
# aWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNf
# MjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcC
# ARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnlj
# cHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5
# AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oal
# mOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0ep
# o/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1
# HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtY
# SWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInW
# H8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZ
# iWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMd
# YzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7f
# QccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKf
# enoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOpp
# O6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZO
# SEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzTGCFdcwghXTAgEBMIGVMH4xCzAJ
# BgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
# MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
# c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAADDDpun2LLc9ywAAAAAAMMw
# DQYJYIZIAWUDBAIBBQCggcYwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYK
# KwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcNAQkEMSIEIB7omvcl
# MGfXSajSQJLNpHhpyXBJKrKRk8yi23m7FnPOMFoGCisGAQQBgjcCAQwxTDBKoDCA
# LgBXAG8AcgBrAFMAcABhAGMAZQAgAEMAbwBtAHAAYQBuAGkAbwBuACAAQQBwAHCh
# FoAUaHR0cDovL21zd29ya3NwYWNlLyAwDQYJKoZIhvcNAQEBBQAEggEAcDm64j6V
# 55up8z4lydpO9DvlKc/KGa/3tDwvWizuNhuVdycha7LYeAvonf/3yNfLlMwfA/1b
# NhdAufrQ1ZdP7v+k9GMELUOom7ybQEdpmLaotnanK3u2g77i27T+pWCyfrP3mJl2
# V4pH+oZxcRs+rDcSY1COGhX1VZTafPLEHdlRxsiHhM0CRQ3IqytTKQs1Aqh25shD
# yYeJAGvQE+ccouFWaqaZywK0/r9s68RyubGl2G94x08bIg5+XxdRxdktdmNFXhly
# pGYJH+qGoYZmz8KaxHYJmHS9m3StgGgDLDUDX6auJTwm3hX95KzYK3rLIzB7rA0N
# XqQqD2/B/NqPuaGCE0kwghNFBgorBgEEAYI3AwMBMYITNTCCEzEGCSqGSIb3DQEH
# AqCCEyIwghMeAgEDMQ8wDQYJYIZIAWUDBAIBBQAwggE8BgsqhkiG9w0BCRABBKCC
# ASsEggEnMIIBIwIBAQYKKwYBBAGEWQoDATAxMA0GCWCGSAFlAwQCAQUABCCeVok3
# PXpXqsTF0VJHIsOooSKMKvhvqQU15q9VUB13lQIGWgC5C+uCGBMyMDE3MTExMzE5
# MzkwMS4xMjdaMAcCAQGAAgH0oIG4pIG1MIGyMQswCQYDVQQGEwJVUzETMBEGA1UE
# CBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
# b2Z0IENvcnBvcmF0aW9uMQwwCgYDVQQLEwNBT0MxJzAlBgNVBAsTHm5DaXBoZXIg
# RFNFIEVTTjpGNkZGLTJEQTctQkI3NTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUt
# U3RhbXAgU2VydmljZaCCDs0wggZxMIIEWaADAgECAgphCYEqAAAAAAACMA0GCSqG
# SIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
# MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
# MTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkg
# MjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0yNTA3MDEyMTQ2NTVaMHwxCzAJBgNVBAYT
# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
# aW1lLVN0YW1wIFBDQSAyMDEwMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
# AQEAqR0NvHcRijog7PwTl/X6f2mUa3RUENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYr
# W/AVUycEMR9BGxqVHc4JE458YTBZsTBED/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaC
# o0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50YWeRX4FUsc+TTJLBxKZd0WETbijGGvmG
# gLvfYfxGwScdJGcSchohiq9LZIlQYrFd/XcfPfBXday9ikJNQFHRD5wGPmd/9WbA
# A5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaRtogINeh4HLDpmc085y9Euqf03GS9pAHB
# IAmTeM38vMDJRF1eFpwBBU8iTQIDAQABo4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMC
# AQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQM
# HgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1Ud
# IwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0
# dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0Nl
# ckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKG
# Pmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0
# XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSABAf8EgZUwgZIwgY8GCSsGAQQBgjcuAzCB
# gTA9BggrBgEFBQcCARYxaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL1BLSS9kb2Nz
# L0NQUy9kZWZhdWx0Lmh0bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQ
# AG8AbABpAGMAeQBfAFMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsF
# AAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Ehb7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq
# 3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7uVOMzPRgEop2zEBAQZvcXBf/XPleFzWY
# JFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqRUgCvOA8X9S95gWXZqbVr5MfO9sp6AG9L
# MEQkIjzP7QOllo9ZKby2/QThcJ8ySif9Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9q
# Yn/dxUoLkSbiOewZSnFjnXshbcOco6I8+n99lmqQeKZt0uGc+R38ONiU9MalCpaG
# pL2eGq4EQoO4tYCbIjggtSXlZOz39L9+Y1klD3ouOVd2onGqBooPiRa6YacRy5rY
# DkeagMXQzafQ732D8OE7cQnfXXSYIghh2rBQHm+98eEA3+cxB6STOvdlR3jo+KhI
# q/fecn5ha293qYHLpwmsObvsxsvYgrRyzR30uIUBHoD7G4kqVDmyW9rIDVWZeodz
# OwjmmC3qjeAzLhIp9cAvVCch98isTtoouLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDT
# u3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx16HSxVXjad5XwdHeMMD9zOZN+w2/XU/p
# nR4ZOC+8z1gFLu8NoFA12u8JJxzVs341Hgi62jbb01+P3nSISRIwggTZMIIDwaAD
# AgECAhMzAAAApUgXcif5cL5jAAAAAAClMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNV
# BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
# HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29m
# dCBUaW1lLVN0YW1wIFBDQSAyMDEwMB4XDTE2MDkwNzE3NTY1MFoXDTE4MDkwNzE3
# NTY1MFowgbIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
# VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAK
# BgNVBAsTA0FPQzEnMCUGA1UECxMebkNpcGhlciBEU0UgRVNOOkY2RkYtMkRBNy1C
# Qjc1MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjAN
# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNqS1L1MXvDbVwffWWGBOia20xiz
# acP9+8wjb9INzNMbVhbMUE2+wxL7XNbBNLPCOcm0+yH6MtdhbAoKXm5PvgqXL9Gt
# AuTh0O9pgZ8fMsZNhCb94nuo0iIsPPHMKzkyL/4b7J5Pb/2Lx1TzhZ1+gktSEo7u
# D2M9tjdE+k5bu1/dj/7mhdcDUhGewZT/NfuHMvYTIJGnmjeh8k+kMlRL4CgU5ech
# hu3Ww5qZNCEmMHUHmKBl6FO30JlalBJmu9tWVjTURJFhidC41F86TuWAOsfyUps6
# ddfcdqggUyDHGbcUVXV8+8oCIg6hS4HzsOZZxRqlC4HKFwI+asULjr/BtwIDAQAB
# o4IBGzCCARcwHQYDVR0OBBYEFOITq0vy7bFguHjxhaBR/nLnsS+kMB8GA1UdIwQY
# MBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6
# Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1RpbVN0YVBD
# QV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0
# dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3RhUENBXzIw
# MTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYBBQUHAwgw
# DQYJKoZIhvcNAQELBQADggEBADZ9bXkrxi4vJCDKJfU0FYzc8ktHB/SjPu6GeAje
# e4fWBsVY6fvL8xdOH+kxoMbQwmYDn67N8OycK1mTglO6kREcCp7HYhpao9UWyy2m
# 6sDytP95fvsO8DPqThuuXNr0UC7oS6hnGQarx9/BfWEFIjBhzqWYwMACKH1pMSmZ
# IG6kNufilNKEbNwNGknJ9eM2VW1t99VbEdQ5ugDfptEky0kxvCWAgmCk6xnmIYJp
# L0iSslDFDw6dN98evP64cuuTQ/5bxh8bXqBoXd4OFOQi1GoVVuTo4uetj8onOGJm
# 1mzbJhIvCYPFrnBB4jkehC0Lse+JcCZSBDLpPAwDnmxs+G6hggN3MIICXwIBATCB
# 4qGBuKSBtTCBsjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
# BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEM
# MAoGA1UECxMDQU9DMScwJQYDVQQLEx5uQ2lwaGVyIERTRSBFU046RjZGRi0yREE3
# LUJCNzUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiJQoB
# ATAJBgUrDgMCGgUAAxUAm8I13fuyJisaFDFlUC8dU5Rpgm+ggcEwgb6kgbswgbgx
# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xDDAKBgNVBAsTA0FP
# QzEnMCUGA1UECxMebkNpcGhlciBOVFMgRVNOOjI2NjUtNEMzRi1DNURFMSswKQYD
# VQQDEyJNaWNyb3NvZnQgVGltZSBTb3VyY2UgTWFzdGVyIENsb2NrMA0GCSqGSIb3
# DQEBBQUAAgUA3bPlFzAiGA8yMDE3MTExMzA5MzIwN1oYDzIwMTcxMTE0MDkzMjA3
# WjB3MD0GCisGAQQBhFkKBAExLzAtMAoCBQDds+UXAgEAMAoCAQACAgpaAgH/MAcC
# AQACAhgsMAoCBQDdtTaXAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkK
# AwGgCjAIAgEAAgMW42ChCjAIAgEAAgMHoSAwDQYJKoZIhvcNAQEFBQADggEBAFZ2
# EduIWGHYGtEBMCiLqKjukv3yLppxF3CeqqF3wqL2CVseXN7ECVh5576XZ+dGQjaX
# dhKgK8gbEHoo11UlvqRoTbFkLGvG7gyKywOyrKXeGVytWe7VnWbQcUOdTeBwJbLH
# 5bxt9CasLCUc12YzmOfjVTDm41f0bfmlFDu59iNVbo9ZXntxPt2onxLlGvS5nt1p
# x8jRUuYHblCMuxQt97+OhPCoywWJIHZZOjcs5hgOaIshRXE9F6e7DMqirvzz2p/E
# o/YCFnm5oCb40eQG8qdz34CV9cU3ZFlaN/DEKjNh+0IMxtDWM8QP1Osezq4Qawel
# lxPtVoIKFT6WSqVgs9IxggL1MIIC8QIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEG
# A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
# cm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFt
# cCBQQ0EgMjAxMAITMwAAAKVIF3In+XC+YwAAAAAApTANBglghkgBZQMEAgEFAKCC
# ATIwGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCCU
# aeUQspzX7mF4QP0ymMdaTjDWplKSRhOo4Ib4b31LWTCB4gYLKoZIhvcNAQkQAgwx
# gdIwgc8wgcwwgbEEFJvCNd37siYrGhQxZVAvHVOUaYJvMIGYMIGApH4wfDELMAkG
# A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
# HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9z
# b2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAClSBdyJ/lwvmMAAAAAAKUwFgQU
# Ee4Tkg0rEmMadoCzNgT/U9nP+8EwDQYJKoZIhvcNAQELBQAEggEAQ2QhSabX4FHz
# EDIeKtc5mk+Z6kxMEoetJurEF3vZ9E/DMfSmFVQZRUq1dwGIVLVT3n9hTJS48x9+
# OlNCUCGQzHYbHhc7+lZaeeqGrgCwYmOXvK9lSsDEccmusY5HvvmfU//ur67kA3ee
# g2TflZSZjulL0gIxCD7f86l0ZmHWoaNAzVPyELgWlNLhHIGUALI3cDbW4tLjBQJM
# qzZJNkBUKUB7FP6A0IgUpNgZ/WYMWhsRaDcjcn6LY2XOfrJvF04QNWqaVFH3RwMK
# +Kv/irJJpa0FA+A3g2YiSj9TBNk0Jad5zEM23roX7PSKdfORqoatJNrmHmVVhrRb
# t26XzxO27Q==
# SIG # End signature block