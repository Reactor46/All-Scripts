<PUBLIC:COMPONENT tagName="application" literalcontent="true">

  <PUBLIC:ATTACH EVENT ="oncontentready"  FOR="element" ONEVENT="htcReadyHandler()" />

  <PUBLIC:ATTACH EVENT ="ondocumentready" FOR="element" ONEVENT="docReadyHandler()"  />

  <PUBLIC:ATTACH EVENT="onbeforeunload" FOR="WINDOW" ONEVENT="htcCleanUp()" />

  <PUBLIC:METHOD NAME="updateStatus"    INTERNALNAME="sb_updateStatusBar" />

  <PUBLIC:METHOD NAME="showHelp"        INTERNALNAME="htcShowHelp" />

  <PUBLIC:METHOD NAME="populateFiles"   INTERNALNAME="fl_populateFiles"  />

  <PUBLIC:METHOD NAME="fileOpen"        INTERNALNAME="my_fileOpen"  />

  <PUBLIC:METHOD NAME="fileSaveAs"      INTERNALNAME="my_fileSaveAs" />

  <PUBLIC:METHOD NAME="showPopUp"       INTERNALNAME="my_showPopUp" />

</PUBLIC:COMPONENT>

<SCRIPT Language="Javascript">
<!--
var _myTBTable;		// Toolbar
var _myStatusBar;	// StatusBar
var _myPageContent;	// PageContent
var timerId

var strPgmName;
var strRegPath;
var strPgmPath;

var bHasMenu;
var bHasToolBar;
var bHasStatBar; 
var bHasClock;

var m_strPgmHeight;
var m_strPgmWidth;

var _sbClockRunning

// var pageContentStyle = "Position:absolute;Width:100%;padding : 5 5 5 5;background-color:#FFFFCC;overflow:auto;" 
// var pageContentStyle = "Position:absolute;Width:100%;padding : 5 5 5 5;background-color:#FFFFCC;overflow:auto;border-bottom: 2px solid buttonshadow;border-right: 2px solid buttonshadow;border-Left: 2px solid buttonshadow;border-Top: 2px solid buttonshadow;" 
var pageContentStyle = "Width:100%;" 
var div_Toolbar      = "Position:absolute;Left:0;Height:32px; Width:100%; margin: 0; padding:0; background: buttonface; border-top: 1px solid buttonhighlight; border-left: 1px solid buttonhighlight; border-bottom: 1px solid buttonshadow; border-right: 1px solid buttonshadow; text-align:left;cursor:hand;"
var div_Statusbar    = "Position:absolute;Top:expression( parseInt(window.document.body.clientHeight-26));Left:1px;Height:24px;Width:expression( parseInt(window.document.body.clientWidth-1)); margin:0; padding:0; background:buttonface;border-top: 1px solid buttonshadow;"
var starBarDefStyle  = "Font-Family:Verdana,Arial;Font-Size:8pt;Font-Weight:normal;Color:black;"

			// Style information for toolbar buttons
var btnNormalStyle   = "background: buttonface;  border: 1px solid buttonface; margin: 1;"
var btnHoverStyle    = "border-top: 1px solid buttonhighlight; border-left: 1px solid buttonhighlight; border-bottom: 1px solid buttonshadow; border-right: 1px solid buttonshadow; background: buttonface; margin: 1;"
var btnPressedStyle  = "border-top: 1px solid buttonshadow; border-left: 1px solid buttonshadow; border-bottom: 1px solid buttonhighlight; border-right: 1px solid buttonhighlight; background: buttonface; margin-top:2px;margin-left:2px;cursor:hand;"
var SeparatorStyle   = "border-left-width:1px;border-left-style:solid;border-left-color:buttonshadow;border-right-width:1px;border-right-style:solid;border-right-color:buttonhighlight;margin-left:2px;margin-right:2px;width:2px;overflow:hidden;";

var fso;


//====================================================
// Public Methods - General
//====================================================

//----------------------------------------------------
// function : htcShowHelp()
//
//  purpose : simple function used to display a help
//            file specified in host application
//----------------------------------------------------
function htcShowHelp()
{
  var strHFile = window.strHelpFile; 

  hType = (strHFile.toLowerCase().indexOf("txt") != -1) ? "txt" : "html";

  if(strHFile != null)					// IF the Help file WAS Specified
  {
    if ( fso.FileExists(strHFile) )
    {
      switch(hType.toLowerCase())
      {
        case "html":
	  var L = window.screenLeft + 3; 
          var T = window.screenTop + 3;
	  var W = window.document.body.clientWidth - 4;
	  var H = window.document.body.clientHeight - 30;
	  sFeatures = "dialogTop:" + parseInt(T) + "px; DialogLeft:" + parseInt(L) + "px; dialogHeight: " + parseInt(H) + "px; dialogWidth : " + parseInt(W) + "px; edge: Raised; center: Yes; resizable: Yes; status: Yes;"
	  window.showModalDialog(strHFile,"ssssss",sFeatures)
	  break;

        case "txt":
	  var objShell = new ActiveXObject("WScript.Shell");
	  objShell.Run ("notepad.exe " + strHFile);
      }
    }
     else
    {
      // File does NOT Exists
      my_showPopUp("The Help File specified for this application can not be located.\n" + strHFile, 0, 0, 16)
      return;    
    }
  }
   else
  { 
   my_showPopUp("The Help File for this application has not been defined.", 0, 0, 16)
  }
}


//----------------------------------------------------
// function : my_showPopUp(sMsg, btns, mType)
//
//  purpose : simple function wrapper to the WshShell
//            PopUp function
//----------------------------------------------------
function my_showPopUp(sMsg, btns, mType, bDef)
{
  var bError   = false;
  var WshShell = new ActiveXObject("Wscript.Shell");
  // Default Selected Buttons
  // 0=1st Btn   256=2nd Btn   512=3rd Btn    768=4th Btn
  if (isNumeric(btns))
  {
    if (isNumeric(mType)) 
    {
      var btn = WshShell.PopUp(sMsg, 3, strPgmName, btns + mType + bDef);
    }
     else bError = true;
  }
  else { bError = true; }
  if (bError)
  {
    alert("Improper call\n\nshowPopUp('your message/question', ##=what buttons, ##=what icon)\n\nex: showPopUp('Ready to tango ?', 4, 32)");
  }
  return btn;
}


//----------------------------------------------------
// function : sb_updateStatusBar(sWhere, sWhat)
//
//  purpose : this method is called from the host page
//            to update a specifc panel on the statBar
//----------------------------------------------------
function sb_updateStatusBar(sWhere, sWhat)
{
  var eSrc = getTarget(sWhere);
  switch (sWhere.toLowerCase())
  {
    case "error":
	var eSrc = getTarget("sbError");
	break;
    case "message" :
	var eSrc = getTarget("sbMessage");
	break;
    case "filler" :
	var eSrc = getTarget("sbFiller");
	break;
    case "clock" :
	var eSrc = getTarget("sbClock");
	break;
  }
  if (eSrc != null) { eSrc.children(0).innerHTML = sWhat;  }
}


//----------------------------------------------------
// function : my_fileOpen()
//
//  purpose : use the fileOpen dialog
//----------------------------------------------------
function my_fileOpen()
{
  try 
  {  
    var objFiles = new ActiveXObject("UserAccounts.CommonDialog")
    objFiles.FilterIndex = 1        
    objFiles.Flags = 8		// restore prior current directory on exit
    objFiles.Filter = "Text Files|*.txt|All Files|*.*"
    objFiles.InitialDir = getCurPath(window.location) & "\Shared"
    intResult = objFiles.showOpen()
    if (intResult == true)
    {  return objFiles.FileName }
    return "";
  }
  catch (Err)
  {
    alert("Error instantiating the CommonDialogs object");
  }
}

//----------------------------------------------------
// function :  my_fileSave(strDefName, strDefType)
//
//  purpose : use the fileSave dialog
//----------------------------------------------------
function my_fileSaveAs(strDefName, strDefType)
{
  if(arguments.length== 0) { strDefName = ""; strDefType = ""; }
  try 
  { 
    var objDialog = new ActiveXObject("SAFRCFileDlg.FileSave");
    objDialog.FileName = (strDefName == "") ? "NewFile.txt" : strDefName;
    objDialog.FileType = (strDefType == "") ? "TXT" : strDefType;
    var intRtn = objDialog.OpenFileSaveDlg();
    if (intRtn) { return objDialog.FileName; }
    return "";
  }
  catch (Err)
  {
    alert("Error instantiating the 'SAFRCFileDlg.FileSave' object");
  }
}

//====================================================
// End of Public Methods 
//====================================================



//----------------------------------------------------
// function : htcReadyHandler()
//
//  purpose : called once the element has been loaded
//            executes first, BEFORE docReady
//----------------------------------------------------
function htcReadyHandler()
{
  objContent = element.document.createElement("span");
  objContent.innerHTML = element.innerHTML;
  fso  = new ActiveXObject("Scripting.FileSystemObject");
  var eSrc     = window.document.getElementsByTagName("APPLICATION");
  strRegPath   = "HKEY_LOCAL_MACHINE\\SOFTWARE\\HTA Applications\\" + eSrc[0].applicationName;
  var WshShell = new ActiveXObject("Wscript.Shell");
  strPgmPath   =  WshShell.CurrentDirectory.toUpperCase();


  bHasMenu    = ( hasElement(objContent, "mainmenu") != null);
  bHasToolBar = ( hasElement(objContent, "toolbar") != null);
  bHasStatBar = ( hasElement(objContent, "statusbar") != null);

  if (bHasStatBar) { createStatusBar(objContent);   }
  if (bHasToolBar) { createToolBar(objContent);     }

  if(hasElement(objContent, "pagecontent") != null)  { createPageContent(objContent); }

}


//----------------------------------------------------
// function : htcCleanUp()
//
//  purpose : user closed the HTA Application. Save
//            necessary data to the registry
//----------------------------------------------------
function htcCleanUp()
{
  var h;var w;
  h = parseInt(window.document.body.clientHeight) + 36;
  w = parseInt(window.document.body.clientWidth) + 12;
  var WshShell = new ActiveXObject("Wscript.Shell");
  WshShell.RegWrite(strRegPath + "\\Height", h, "REG_DWORD");
  WshShell.RegWrite(strRegPath + "\\Left", window.screenLeft-1, "REG_DWORD");
  WshShell.RegWrite(strRegPath + "\\Top", window.screenTop, "REG_DWORD");
  WshShell.RegWrite(strRegPath + "\\Path", strPgmPath);
  WshShell.RegWrite(strRegPath + "\\Width", w, "REG_DWORD");
}


//----------------------------------------------------
// function : docReadyHandler()
//
//  purpose : the HTA Application is fully drawn and
//            is ready for program exeucution
//----------------------------------------------------
function docReadyHandler()
{
  htcGetRegData();
}


//----------------------------------------------------
// function : htcGetRegData()       //getHTARegData()
//
//  purpose : read application data from the registry
//            so we can size and palce the window
//----------------------------------------------------
function htcGetRegData()
{
  var WshShell = new ActiveXObject("Wscript.Shell");
  try 
  {
    window.isRegistered = true;
    // this line will fail if this is the first time the application is run
    //---------------------------------------------------------------------
    var rH = WshShell.RegRead(strRegPath + "\\Height");
    m_strPgmHeight = ( rH != null ? rH + 2 :  500 );
    var rW = WshShell.RegRead(strRegPath + "\\Width");
    m_strPgmWidth = ( rW != null ? rW  :  880 );
    var rT = WshShell.RegRead(strRegPath + "\\Top");
    var TopPos = ( rT != null ? rT-29 :  10 );
    var rL = WshShell.RegRead(strRegPath + "\\Left");
    var LeftPos = ( rL != null ? rL-3 :  10 );
    var sP = WshShell.RegRead(strRegPath + "\\Path");
    strPgmPath = ( sP != null ? sP : strPgmPath);
  }
  catch (Err)
  {
    window.isRegistered = false;
    m_strPgmHeight = 500;   m_strPgmWidth  = 880;
    TopPos         = 10;    LeftPos        = 10;
    WshShell.RegWrite(strRegPath + "\\Height", m_strPgmHeight, "REG_DWORD");
    WshShell.RegWrite(strRegPath + "\\Width", m_strPgmWidth, "REG_DWORD");
    WshShell.RegWrite(strRegPath + "\\Top", window.screenTop, "REG_DWORD");
    WshShell.RegWrite(strRegPath + "\\Left", window.screenLeft, "REG_DWORD");
    WshShell.RegWrite(strRegPath + "\\Path", strPgmPath);
  }
  if (LeftPos < 0 ) { LeftPos = 0; }
  if (TopPos < 0 )  { TopPos = 0; }
  window.moveTo (LeftPos, TopPos);
  window.resizeTo (parseInt(m_strPgmWidth), parseInt(m_strPgmHeight) );
}




//====================================================
// TOOLBAR
//====================================================

//----------------------------------------------------
// function : createToolBar(objSource)
//
//  purpose : used to parse our custom element and
//            create the toolbar for host page
//----------------------------------------------------
function createToolBar(objSource)
{
  var objToolBarHolder = element.document.createElement("DIV");
  objToolBarHolder.attachEvent("onselectstart", cancelSelect);
  objToolBarHolder.id            = "toolbar";
  objToolBarHolder.className     = "toolbar";
  objToolBarHolder.style.cssText = div_Toolbar + "Top:0;";
  element.document.body.appendChild(objToolBarHolder);
  objNode =  hasElement(objSource, "toolbar")
  var objTBTable = element.document.createElement("TABLE");		// insert a table into the DIV
  objTBTable.border="0";
  _myTBTable = objTBTable;	
  objTBTable.attachEvent("onmouseover",   tbMouseEvent);  
  objTBTable.attachEvent("onmouseout",    tbMouseEvent);  
  objTBTable.attachEvent("onmousedown",   tbMouseEvent);  
  objTBTable.attachEvent("onmouseup",     tbMouseEvent);  
  objTBTable.attachEvent("onselectstart", cancelSelect);
  var objTBody = element.document.createElement("TBODY");
  var objRow = element.document.createElement("TR");
  objRow.attachEvent("onselectstart", cancelSelect);

  for (idx=0;idx<objNode.childNodes.length;idx++)
  {

    if ( objNode.childNodes[idx].tagName != null)
    {
      switch(objNode.childNodes[idx].tagName.toLowerCase())
      {
   
        case "toolbarbutton" :
	  var objCell = createToolBarButton(objNode);
	  objRow.appendChild(objCell);
	  break;

	case "toolbarseparator":
	  var objCell = createToolBarSeparator(objNode);
	  objRow.appendChild(objCell);
	  break;

	case "toolbarcheckgroup" :
	  createToolBarCheckgroup(objRow, objNode);
	  break;

	case "toolbartextbox" :
          var objCell = createToolBarTextBox(objNode);
          objRow.appendChild(objCell);
	  break;

	case "toolbardropdown" :
          var objCell = createToolBarDropDown(objNode);
	  objRow.appendChild(objCell);
	  break;

        case "toolbarmsgarea":
	  var objCell = createToolBarMsgArea(objNode);
          objRow.appendChild(objCell);
	  break;
      }
    }
  }
  objTBody.appendChild(objRow);
  objTBTable.appendChild(objTBody);
  objToolBarHolder.appendChild(objTBTable);
}


//----------------------------------------------------
// function : createToolBarButton(sNodes)
//
//  purpose : create and return a toolbarbutton item
//            inside a TD element
//----------------------------------------------------
function createToolBarButton(sNodes)
{
  var objCell = element.document.createElement("TD");
  strSrc = sNodes.childNodes[idx].getAttribute("src");
  strAlt = sNodes.childNodes[idx].getAttribute("text");
  strCmd = sNodes.childNodes[idx].getAttribute("cmd");
  strKey = sNodes.childNodes[idx].getAttribute("accesskey");
  strId  = ( sNodes.childNodes[idx].getAttribute("id") != null) ? "cmd" + strCmd : sNodes.childNodes[idx].getAttribute("id");
  var objBtn = element.document.createElement("IMG");
  objBtn.setAttribute("SRC", strSrc, 0);
  objBtn.setAttribute("ALT", strAlt, 0);
  objBtn.setAttribute("CMD", strCmd, 0);
  objBtn.setAttribute("TEXT", strAlt, 0);
  objBtn.setAttribute("id", strId, 0);
  if (strKey> "") { objBtn.setAttribute("ACCESSKEY", strKey, 0); }
  objBtn.disabled = sNodes.childNodes[idx].getAttribute("disabled");
  objBtn._type    = "button";
  objBtn._hoverStyle   = btnHoverStyle;
  objBtn.style.cssText = btnNormalStyle;
  objBtn.attachEvent("onclick", tbMouseEvent);
  objBtn.attachEvent("onselectstart", cancelSelect);
  objCell.appendChild(objBtn);
  return objCell;
}

//----------------------------------------------------
// function : createToolBarSeparator(sNodes)
//
//  purpose : create and return a toolbar separator
//            inside a TD tag
//----------------------------------------------------
function createToolBarSeparator(sNodes)
{
  var objCell  = element.document.createElement("TD");
  var objBar   = element.document.createElement("DIV");
  objBar._type = "separator";
  objBar.style.cssText = SeparatorStyle;
  objCell.appendChild(objBar);
  return objCell;
}

//----------------------------------------------------
// function : tbMouseEvent()
//
//  purpose : respond to all known mouse events for
//            the toolbar in the HTA application
//----------------------------------------------------
function tbMouseEvent()
{
  event.cancelBubble = true;
  var objCell = getParentCell(event.srcElement);
  if( event.srcElement._type == "button")
  {
    sb_updateStatusBar("message", "Use this button to " + event.srcElement.getAttribute("Text") );
    switch(event.type)
    {
      case "mouseover":
        objCell.style.cssText = btnHoverStyle; 
        break;

      case "mouseout":
	objCell.style.cssText = btnNormalStyle;

sb_updateStatusBar("message", "");
  	break;

      case "mousedown":
	objCell.style.cssText = btnPressedStyle;
	break;

      case "mouseup":
	objCell.style.cssText = btnHoverStyle; 
	break;

      case "click":
	window.commandHandler(window.event.srcElement.getAttribute("cmd"));
	break;

    }
  }
}


//-----------------------------------------------------------
// function : getParentCell(objNode)
//
//  purpose : determines which cell is selected when you
//            click on an item (the parent of the image, etc)
//-----------------------------------------------------------
function getParentCell(objNode)
{
  while (objNode != null)
  {
    if (objNode._type != null)
      return objNode;
    objNode = objNode.offsetParent;
  }
  return null;
}
//====================================================
// END OF TOOLBAR
//====================================================


//====================================================
// PAGE CONTENT
//====================================================

//----------------------------------------------------
// function : createPageContent(objContent)
//
//  purpose :
//
//----------------------------------------------------
function createPageContent(objContent)
{
  if(hasElement(objContent, "pagecontent") != null) 
  {
    objPGC= hasElement(objContent, "pagecontent");
    strStyle = objPGC.getAttribute("DefaultStyle");
    var objPGHolder           = element.document.createElement("DIV");
    objPGHolder.id            = "pageContent";
    objPGHolder.className     = "pageContent";
    if (bHasMenu == false)
    {
      var pgStyle = ( strStyle == null) ? pageContentStyle : pageContentStyle  + strStyle + ";";
      pgStyle += "Top:45;Height:expression( parseInt(window.document.body.clientHeight-72)); "
      objPGHolder.style.cssText = pgStyle;    
    }
     else
    {
    var pgStyle = ( strStyle == null) ? pageContentStyle : pageContentStyle  + strStyle + ";";
    pgStyle += "Top:66;Height:expression( parseInt(window.document.body.clientHeight-90));"
    objPGHolder.style.cssText = pgStyle; 
    }
   
    objPGHolder.innerHTML     = objPGC.innerHTML;
    _myPageContent = objPGHolder;
    element.document.body.appendChild(objPGHolder);
  }
}

//====================================================
// END OF PAGECONTENT
//====================================================


//====================================================
// STATUSBAR
//====================================================

//----------------------------------------------------
// function : createStatusBar(objContent)
//
//  purpose : create a statusbar element for the
//            host page
//----------------------------------------------------
function createStatusBar(objSource)
{
  bHasClock = false;
  var objStatusBarHolder = element.document.createElement("DIV");
  objStatusBarHolder.className     = "statusbar";
  objStatusBarHolder.id            = "statusbar";
  objStatusBarHolder.style.cssText = div_Statusbar;
  element.document.body.appendChild(objStatusBarHolder);
  objNode =  hasElement(objSource, "statusbar")
  var objSBTable = element.document.createElement("TABLE");		// insert a table into the DIV
  objSBTable.width = "100%";
  objSBTable.attachEvent("onselectstart", cancelSelect);
  objSBTable.border="1";
  _myStatusBar = objSBTable;
  var objTBody = element.document.createElement("TBODY");
  var objRow = element.document.createElement("TR");
  strDefStyle = ( objNode.getAttribute("Defaultstyle") == null) ? "" : objNode.getAttribute("Defaultstyle");			// style specified for the entire statusBar
  objSBTable.style.csstext =  "table-layout:fixed;" + strDefStyle ;
  objSBTable.style.tableLayout = "fixed";
  nNumNodes =  objNode.childNodes.length;				// number of statusBar panels
  var defWidth = 100 / nNumNodes + "%";

  for (var jdx=0;jdx<objNode.childNodes.length;jdx++)
  {
    sText = ( objNode.childNodes[jdx].getAttribute("TEXT") == null) ? "&nbsp;" : objNode.childNodes[jdx].getAttribute("TEXT");
    sType = ( objNode.childNodes[jdx].getAttribute("TYPE") == null) ? "filler" : objNode.childNodes[jdx].getAttribute("TYPE");
    strWidth             = objNode.childNodes[jdx].getAttribute("width");
    var objCell          = element.document.createElement("TD");
    objCell.noWrap       = true;
    var objDiv           = element.document.createElement("DIV");
    objDiv.className     = "sb" + sType;
    objDiv.style.cssText = "padding-left:5px;padding-right:5px;";
    objDiv.style.cursor  = "default";
    objCell.className    = "sb" + sType;
    
    objCell.style.width  = strWidth;
    objCell.width = strWidth;
    var sBorder          = ( objNode.children[jdx].getAttribute("Border")  == null) ? "inset;" : objNode.children[jdx].getAttribute("Border") ;
    
    switch( sType.toLowerCase() )
    {
      case "clock":
	objDiv._type = "sbclock";
        objDiv.className = "sbclock";
	bHasClock = true;
	// timerId = window.setInterval(updateClock, 30000);
	timerId = window.setInterval(updateClock, 100);
	break;

      case "message" :
	objDiv._type = "sbmessage";
	objDiv.className = "sbmessage";
	break;

      case "filler":
	objDiv._type = "sbfiller";
        objDiv.style.cssText = "cursor:default;";
        sText = "<TABLE Width='97%' Border='0' Style='font:family:Verdana;Font-size:8pt;'><TR><TD></TD></TR></TABLE>";
        objDiv.className = "sbfiller";
	break;

      case "error":
	objDiv._type = "sberror";
        objDiv.className = "sberror";
	break;

      default : 
        alert ( "Unknown panel type specified : " + sType.toLowerCase() + "\n\nPlease use clock, filler, message or error.\n\n<myHTA:statBarPanel Type=" + sType + ">" );
	break;

    }
    sStyle = ( objNode.childNodes[jdx].getAttribute("defaultStyle") ==null) ? "" : objNode.childNodes[jdx].getAttribute("defaultStyle");
    objCell.style.cssText = starBarDefStyle + sStyle;
    objDiv.innerHTML = sText;  
    objCell.appendChild(objDiv);
    objRow.appendChild(objCell);
  }
    objTBody.appendChild(objRow);
    objSBTable.appendChild(objTBody);
    objStatusBarHolder.appendChild(objSBTable);
    if (bHasClock) 
    { 
      _sbClockRunning = true;
      updateClock(); 
    }
}

//----------------------------------------------------
// function : updateClock()
//
//  purpose : this function is called (using a timer)
//            to update the clock of the statusbar if
//            one was found during the onload
//----------------------------------------------------
function updateClock()
{
  var eSrc = _myStatusBar;
  var eRow = eSrc.children(0).children(0);
  for(idx=0;idx<eRow.children.length;idx++)
  {
    if (eRow.children[idx].className.toLowerCase()  == "sbclock")
    {
      var s;
      var d = new Date();
       // s = d.toTimeString().substring(0,5) + "&nbsp;&nbsp;";		// the time
       // s += (d.getMonth() + 1) + "/";            			// Get month
       // s += d.getDate() + "/";                   			// Get day
       
       // s = d.toTimeString().substring(0,8) + "&nbsp;&nbsp;";		// the time
       // s += d.getDate() + "/";                   			// Get day
       // s += (d.getMonth() + 1) + "/";            			// Get month
       // s += d.getYear(); 						// Get year

       s = d.getDate() + "/";                   			// Get day
       s += (d.getMonth() + 1) + "/";            			// Get month
       s += d.getYear(); 						// Get year
       s += "&nbsp;&nbsp;" + d.toTimeString().substring(0,8);		// the time

      eRow.children[idx].children(0).innerHTML = "<NOBR>" + s + "</NOBR>";
    }
  }
}

//====================================================
// Internal Support Routines Used
//====================================================

//----------------------------------------------------
// function : cancelSelect()
//
//  purpose : prevent the user from being able to 
//            select any text on the statusbar
//----------------------------------------------------
function cancelSelect()
{
  if (window.event.srcElement.tagName != "INPUT") return false;
  if (window.event.srcElement._type == "textbox") return ;
  return false;
}

//----------------------------------------------------
// function : getTarget(s)
//
//  purpose : internal function used to locate the
//            proper panel on a statusbar
//----------------------------------------------------
function getTarget(s)
{
  var eSrc = _myStatusBar;
  var eRow = eSrc.children(0).children(0);
  for(idx=0;idx<eRow.children.length;idx++)
  {
    if (eRow.children[idx].className.toLowerCase() == s.toLowerCase()) 
    { 
       return eRow.children[idx];
       break;
    }
  }
  return null;
}

//----------------------------------------------------
// function : hasElement(cNodes)
//
//  purpose : look inside the myHTA:Application tag to
//            see if there is a particular element
//            'toolbar', 'pageContent', 'statusbar'
//----------------------------------------------------
function hasElement(cNodes, sFind)
{
  var bFound = null;
  var nNumNodes = (cNodes.childNodes == null) ? 0 : cNodes.childNodes.length;
  for (var jdx=0;jdx<nNumNodes; jdx++)
  {
    if(cNodes.childNodes[jdx].tagName != null)
    {
      if(cNodes.childNodes[jdx].tagName.toLowerCase() == sFind) { bFound = cNodes.childNodes[jdx]; }
    }
  }
  return bFound;
}

//----------------------------------------------------
// function : isNumeric(sText)
//
//  purpose : simple func to check for numerics
//
//----------------------------------------------------
function isNumeric(sText)
{
  if (sText == null) { return false; }
  var validChars = "0123456789";
  var isNumber = true;
  var Char;
  for (i=0; i<sText.length && isNumber == true; i++)
  {
    Char = sText.charAt(i);
    if (validChars.indexOf(Char) == -1) { isNumber = false; }
  }
  return isNumber;
}



//-->
</SCRIPT>
