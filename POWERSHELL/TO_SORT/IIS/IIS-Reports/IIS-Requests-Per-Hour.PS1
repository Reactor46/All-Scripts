##################################
# Generated by Log Parser Studio #
##################################

#Name: IIS: Request per Hour
#Log Type: IISW3WC
#Generated: 6/5/2023 1:44:57 PM

Param(
    [parameter(Mandatory=$false)]
    [Bool]$AutoOpen,
	[parameter(Mandatory=$false)]
    [String]$OutFile,
	[parameter(Mandatory=$false)]
    [Bool]$IgnoreInParams,
	[parameter(Mandatory=$false)]
    [Bool]$IgnoreOutParams) 
	
$Error.Clear()
$DefaultFolder= "D:\Reports" #[Environment]::GetFolderPath("MyDocuments")
$Destination = "IIS Request per Hour.CSV"
$Destination = $DefaultFolder + "\" + $Destination

if($OutFile -ne [String]::Empty)
{
	$OutFileType = [System.IO.Path]::GetExtension($OutFile.ToUpper())
	$OriginalFileType = [System.IO.Path]::GetExtension($Destination.ToUpper())
	if($OutFileType -ne $OriginalFileType)
	{
		Write-Host "You have chosen" $OutFileType "as the output, but this script was originally generated as" $OriginalFileType -ForegroundColor Red
		Write-Host "Either change -OutFile to" $OriginalFileType "or generate the script again with the output as" $OutFileType  -ForegroundColor Red
		Write-Host "You can also modify the OutputFormat variable in this script to match the correct Log Parser 2.2 COM output format." -ForegroundColor Red
		[System.Environment]::NewLine
		return
	}
	else
	{
		if($true -ne $OutFile.Contains("\"))
		{
		  $Destination = $DefaultFolder + "\" + $OutFile
		}
		else
		{
		  $Destination = $OutFile
		}
	}
}
$logFiles = Get-ChildItem "C:\inetpub\logs\LogFiles\W3SVC*\" -Recurse

ForEach($log in $logFiles){
$LogQuery = New-Object -ComObject "MSUtil.LogQuery"
$InputFormat = New-Object -ComObject "MSUtil.LogQuery.IISW3CInputFormat"
$OutputFormat = New-Object -ComObject "MSUtil.LogQuery.CSVOutputFormat"

if($IgnoreInParams-eq $false){
     $InputFormat.iCodePage=0
     $InputFormat.recurse=-1
     $InputFormat.minDateMod="1900-01-01 12:00:00"
     $InputFormat.dirTime=0
     $InputFormat.consolidateLogs=1
     $InputFormat.useDirectiveDateTime=0
     $InputFormat.useDoubleQuotes=0
}

if($IgnoreOutParams -eq $false){
     $OutputFormat.Headers="AUTO"
     $OutputFormat.oDQuotes="AUTO"
     $OutputFormat.tabs=0
     $OutputFormat.oTsFormat="yyyy-MM-dd hh:mm:ss"
     $OutputFormat.oCodepage=0
     $OutputFormat.fileMode=1
}
Write-Progress -Activity "Executing query, please wait..."  -Status " "

$SQLQuery = "SELECT QUANTIZE(TO_TIMESTAMP(date, time), 3600) AS Hour, COUNT(*) AS Total, SUM(sc-bytes) AS TotBytesSent  INTO '" + $Destination + "' FROM  $logFiles GROUP BY Hour ORDER BY Hour "
$rtnVal = $LogQuery.ExecuteBatch($SQLQuery, $InputFormat, $OutputFormat);
$OutputFormat = $null;
$InputFormat = $null;
$LogQuery = $null;
}

if($AutoOpen)
{
	try
	{
		Start-Process($Destination)
	}
	catch
	{
		Write-Host $_.Exception.Message  -ForegroundColor Red
		Write-Host $_.Exception.GetType().FullName  -ForegroundColor Red
		Write-Host "NOTE: No output file will be created if the query returned zero records!"  -ForegroundColor Gray
	}	
}