<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="$ver = $host | select version&#xD;&#xA;if($Ver.version.major -gt 1) {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;if(!(Get-PSSnapin Microsoft.SharePoint.PowerShell -ea 0))&#xD;&#xA;{&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;#  &#xD;&#xA;In order to perform multiple iterations of this bulk file upload to SharePoint, create multiple iterations of the following script block:&#xD;&#xA;$SourceFolder = &quot;PowerShell Scripts&quot;&#xD;&#xA;$DestinationLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Shared Documents&quot;}&#xD;&#xA;ImportFiles ($Directory + &quot;\&quot; + $SourceFolder) $DestinationLibrary&#xD;&#xA;&#xD;&#xA;This script does assume that all source folders are the child of one root folder and appends $SourceFolder to $Directory.  &#xD;&#xA;This script could be modified with minimal effort to accept files from multiple unrelated source directories.&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Set Variables&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;$SiteURL = &quot;http://Contoso.com&quot;&#xD;&#xA;$Directory = &quot;C:\FilesToImport&quot;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Define Functions&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;Function TrimDirectory ($Directory)&#xD;&#xA;{&#xD;&#xA;    #If the loging direcotry ends with a slash, remove the trailing slash&#xD;&#xA;    if($Directory.EndsWith(&quot;\&quot;))&#xD;&#xA;    {&#xD;&#xA;        #Remove the last character, which will be a slash, from the specified directory&#xD;&#xA;        Set-Variable -Name Directory -Value ($Directory.Substring(0, ($Directory.Length -1))) -Scope Script&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function ImportFiles($SourceFolder, $SPList)&#xD;&#xA;{&#xD;&#xA;    $RootFolder = Get-Item $SourceFolder&#xD;&#xA;    $AllFolders = Get-ChildItem -Recurse $RootFolder | ? {!$_.psIsContainer -eq $False} | foreach -Process {$_.FullName}&#xD;&#xA;    $AllFiles = Get-ChildItem $RootFolder | ? {$_.psIsContainer -eq $False} | foreach -Process {$_.FullName}&#xD;&#xA;    &#xD;&#xA;    foreach($File in $AllFiles)&#xD;&#xA;    {&#xD;&#xA;        $Stream = (Get-Item $File).openread()&#xD;&#xA;        $newfile = $MasterPageGallery.RootFolder.Files.Add(((get-item $File).name), $Stream, $True)&#xD;&#xA;        $NewFile.CheckIn($True)&#xD;&#xA;        $NewFile.Publish($True)&#xD;&#xA;        $NewFile.Approve($True)&#xD;&#xA;        $NewFile.Update()&#xD;&#xA;    }&#xD;&#xA;    foreach ($Folder in $AllFolders)&#xD;&#xA;    {&#xD;&#xA;        if($ParentFolderPath)&#xD;&#xA;        {&#xD;&#xA;            Remove-Variable ParentFolderPath&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $CurrentFolder = Get-Item $Folder&#xD;&#xA;        &#xD;&#xA;        $FolderRelativePath = (Get-Item $CurrentFolder).FullName.Substring($SourceFolder.length)&#xD;&#xA;        &#xD;&#xA;        $i = 0&#xD;&#xA;         &#xD;&#xA;        $FolderPathChunks = $FolderRelativePath.Split(&quot;\&quot;)&#xD;&#xA;        &#xD;&#xA;        while($I -lt ($FolderPathChunks.count -1))&#xD;&#xA;        {&#xD;&#xA;            $ParentFolderPath = (&quot;$ParentFolderPath/&quot; + $FolderPathChunks[$I])&#xD;&#xA;            $I++&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        if($ParentFolderPath -eq &quot;/&quot;)&#xD;&#xA;        {&#xD;&#xA;            $FolderURL = $SiteURL + &quot;/&quot; + ($SPList.RootFolder.url)&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            $FolderURL = $SiteURL + &quot;/&quot; + ($SPList.RootFolder.url) + ($ParentFolderPath.Substring(1))&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $SiteFolder = $SPList.Folders.Add($FolderURL, [Microsoft.SharePoint.SPFileSystemObjectType]::Folder, (Get-Item $CurrentFolder).Name)&#xD;&#xA;        $SiteFolder.Update()&#xD;&#xA;        $SiteFolder[&quot;_ModerationStatus&quot;] = 0&#xD;&#xA;        $SiteFolder.Update()&#xD;&#xA;        $FilesInFolder = Get-ChildItem $CurrentFolder | ? {$_.PsIsContainer -eq $False}&#xD;&#xA;        foreach($File in $FilesInFolder)&#xD;&#xA;        {&#xD;&#xA;            $Stream = (Get-Item $File.fullname).openread()&#xD;&#xA;            $NewFile = $SiteFolder.Folder.Files.Add($File.Name, $Stream, $True)&#xD;&#xA;            $NewFile.CheckIn($True)&#xD;&#xA;            $NewFile.Publish($True)&#xD;&#xA;            $NewFile.Approve($True)&#xD;&#xA;            $NewFile.Update()&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Start Script&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;$DefaultErrorHandling = $ErrorActionPreference&#xD;&#xA;&#xD;&#xA;$ErrorActionPreference = &quot;SilentlyContinue&quot;&#xD;&#xA;&#xD;&#xA;TrimDirectory $Directory&#xD;&#xA;$Site = Get-SPSite $SiteURL&#xD;&#xA;&#xD;&#xA;$SourceFolder = &quot;Documents&quot;&#xD;&#xA;$DestinationLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Shared Documents&quot;}&#xD;&#xA;ImportFiles ($Directory + &quot;\&quot; + $SourceFolder) $DestinationLibrary&#xD;&#xA;&#xD;&#xA;$ErrorActionPreference = $DefaultErrorHandling&#xD;&#xA;&#xD;&#xA;Write-Host &quot;File Copy Completed&quot;" />
  <Code Content="$ver = $host | select version&#xD;&#xA;if($Ver.version.major -gt 1) {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;if(!(Get-PSSnapin Microsoft.SharePoint.PowerShell -ea 0))&#xD;&#xA;{&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;#  &#xD;&#xA;In order to perform multiple iterations of this bulk file upload to SharePoint, create multiple iterations of the following script block:&#xD;&#xA;$SourceFolder = &quot;PowerShell Scripts&quot;&#xD;&#xA;$DestinationLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Shared Documents&quot;}&#xD;&#xA;ImportFiles ($Directory + &quot;\&quot; + $SourceFolder) $DestinationLibrary&#xD;&#xA;&#xD;&#xA;This script does assume that all source folders are the child of one root folder and appends $SourceFolder to $Directory.  &#xD;&#xA;This script could be modified with minimal effort to accept files from multiple unrelated source directories.&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Set Variables&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;$SiteURL = &quot;http://Contoso.com&quot;&#xD;&#xA;$Directory = &quot;C:\FilesToImport&quot;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Define Functions&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;Function TrimDirectory ($Directory)&#xD;&#xA;{&#xD;&#xA;    #If the loging direcotry ends with a slash, remove the trailing slash&#xD;&#xA;    if($Directory.EndsWith(&quot;\&quot;))&#xD;&#xA;    {&#xD;&#xA;        #Remove the last character, which will be a slash, from the specified directory&#xD;&#xA;        Set-Variable -Name Directory -Value ($Directory.Substring(0, ($Directory.Length -1))) -Scope Script&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function ImportFiles($SourceFolder, $SPList)&#xD;&#xA;{&#xD;&#xA;    $RootFolder = Get-Item $SourceFolder&#xD;&#xA;    $AllFolders = Get-ChildItem -Recurse $RootFolder | ? {!$_.psIsContainer -eq $False} | foreach -Process {$_.FullName}&#xD;&#xA;    $AllFiles = Get-ChildItem $RootFolder | ? {$_.psIsContainer -eq $False} | foreach -Process {$_.FullName}&#xD;&#xA;    &#xD;&#xA;    foreach($File in $AllFiles)&#xD;&#xA;    {&#xD;&#xA;        $Stream = (Get-Item $File).openread()&#xD;&#xA;        $newfile = $MasterPageGallery.RootFolder.Files.Add(((get-item $File).name), $Stream, $True)&#xD;&#xA;        $NewFile.CheckIn($True)&#xD;&#xA;        $NewFile.Publish($True)&#xD;&#xA;        $NewFile.Approve($True)&#xD;&#xA;        $NewFile.Update()&#xD;&#xA;    }&#xD;&#xA;    foreach ($Folder in $AllFolders)&#xD;&#xA;    {&#xD;&#xA;        if($ParentFolderPath)&#xD;&#xA;        {&#xD;&#xA;            Remove-Variable ParentFolderPath&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $CurrentFolder = Get-Item $Folder&#xD;&#xA;        &#xD;&#xA;        $FolderRelativePath = (Get-Item $CurrentFolder).FullName.Substring($SourceFolder.length)&#xD;&#xA;        &#xD;&#xA;        $i = 0&#xD;&#xA;         &#xD;&#xA;        $FolderPathChunks = $FolderRelativePath.Split(&quot;\&quot;)&#xD;&#xA;        &#xD;&#xA;        while($I -lt ($FolderPathChunks.count -1))&#xD;&#xA;        {&#xD;&#xA;            $ParentFolderPath = (&quot;$ParentFolderPath/&quot; + $FolderPathChunks[$I])&#xD;&#xA;            $I++&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        if($ParentFolderPath -eq &quot;/&quot;)&#xD;&#xA;        {&#xD;&#xA;            $FolderURL = $SiteURL + &quot;/&quot; + ($SPList.RootFolder.url)&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            $FolderURL = $SiteURL + &quot;/&quot; + ($SPList.RootFolder.url) + ($ParentFolderPath.Substring(1))&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $SiteFolder = $SPList.Folders.Add($FolderURL, [Microsoft.SharePoint.SPFileSystemObjectType]::Folder, (Get-Item $CurrentFolder).Name)&#xD;&#xA;        $SiteFolder.Update()&#xD;&#xA;        $SiteFolder[&quot;_ModerationStatus&quot;] = 0&#xD;&#xA;        $SiteFolder.Update()&#xD;&#xA;        $FilesInFolder = Get-ChildItem $CurrentFolder | ? {$_.PsIsContainer -eq $False}&#xD;&#xA;        foreach($File in $FilesInFolder)&#xD;&#xA;        {&#xD;&#xA;            $Stream = (Get-Item $File.fullname).openread()&#xD;&#xA;            $NewFile = $SiteFolder.Folder.Files.Add($File.Name, $Stream, $True)&#xD;&#xA;            $NewFile.CheckIn($True)&#xD;&#xA;            $NewFile.Publish($True)&#xD;&#xA;            $NewFile.Approve($True)&#xD;&#xA;            $NewFile.Update()&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Start Script&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;$DefaultErrorHandling = $ErrorActionPreference&#xD;&#xA;&#xD;&#xA;$ErrorActionPreference = &quot;SilentlyContinue&quot;&#xD;&#xA;&#xD;&#xA;TrimDirectory $Directory&#xD;&#xA;$Site = Get-SPSite $SiteURL&#xD;&#xA;&#xD;&#xA;$SourceFolder = &quot;Documents&quot;&#xD;&#xA;$DestinationLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Shared Documents&quot;}&#xD;&#xA;ImportFiles ($Directory + &quot;\&quot; + $SourceFolder) $DestinationLibrary&#xD;&#xA;&#xD;&#xA;$ErrorActionPreference = $DefaultErrorHandling&#xD;&#xA;&#xD;&#xA;Write-Host &quot;File Copy Completed&quot;" />
</CodeSnippets>