<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="Function Get-OSCSPListItem&#xD;&#xA;{&#xD;&#xA;&#x9;&lt;#&#xD;&#xA;&#x9;&#x9;.SYNOPSIS&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem is an advanced function which can be used to retrieve the list data in Microsoft SharePoint 2010.&#xD;&#xA;&#x9;&#x9;.PARAMETER SiteURL&#xD;&#xA;&#x9;&#x9;Indicates the URL of a SharePoint site, in the form http://server_Name/sites/sitename.&#xD;&#xA;&#x9;&#x9;.PARAMETER ListName&#xD;&#xA;&#x9;&#x9;Indicates the Name of a SharePoint site list, for example, &quot;Shared Documents&quot;, &quot;Calendar&quot;, &quot;Tasks&quot;, &quot;Site Pages&quot;.&#xD;&#xA;&#x9;&#x9;.PARAMETER Property&#xD;&#xA;&#x9;&#x9;Indicates the properties of a SharePoint site list item which will be returned by Get-OSCSPListItem.&#xD;&#xA;&#x9;&#x9;For example, &quot;ID&quot;, &quot;Name&quot;, &quot;ParentList&quot;. Wildcard is accepted if you want get all properties.&#xD;&#xA;&#x9;&#x9;.PARAMETER ListAllItems&#xD;&#xA;&#x9;&#x9;Indicates Get-OSCSPListItem will return all items in a specified list.&#xD;&#xA;&#x9;&#x9;.PARAMETER ItemID&#xD;&#xA;&#x9;&#x9;Indicates Get-OSCSPListItem will return a item with the specified ID.&#xD;&#xA;&#x9;&#x9;.PARAMETER StartID&#xD;&#xA;&#x9;&#x9;Indicates the start ID of an ID range.&#xD;&#xA;&#x9;&#x9;.PARAMETER EndID&#xD;&#xA;&#x9;&#x9;Indicates the end ID of an ID range&#xD;&#xA;&#x9;&#x9;.PARAMETER ItemURL&#xD;&#xA;&#x9;&#x9;Indicates a URL of an Item which will be downloaded.&#xD;&#xA;&#x9;&#x9;.PARAMETER DownloadPath&#xD;&#xA;&#x9;&#x9;Indicates a local path which will be used to save the item.&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Get all items from a list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ListAllItems -Property &quot;ID&quot;,&quot;Name&quot;,&quot;ParentList&quot;&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Get a single item with all properties from a list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ItemID 1 -Property *&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Get multiple items from a list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -StartID 4 -EndID 5 -Property &quot;ID&quot;,&quot;Name&quot;&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Download a file from a document library list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ItemURL &quot;Shared Documents/NewWordDoc.docx&quot; -DownloadPath &quot;C:\Data&quot; -Verbose&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Download multiple files from a document library list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ListAllItems -Property &quot;Name&quot;,&quot;URL&quot;,&quot;ParentList&quot; | ForEach-Object {&#xD;&#xA;&#x9;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName $_.ParentList -ItemURL $_.Url -DownloadPath &quot;C:\Data&quot; -Verbose&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;.LINK&#xD;&#xA;&#x9;&#x9;Windows PowerShell Advanced Function&#xD;&#xA;&#x9;&#x9;http://technet.microsoft.com/en-us/library/dd315326.aspx&#xD;&#xA;&#x9;&#x9;.LINK&#xD;&#xA;&#x9;&#x9;Microsoft.SharePoint.SPWeb class&#xD;&#xA;&#x9;&#x9;http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spweb.aspx&#xD;&#xA;&#x9;&#x9;.LINK&#xD;&#xA;&#x9;&#x9;Microsoft.SharePoint.SPList class&#xD;&#xA;&#x9;&#x9;http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.splist.aspx&#xD;&#xA;&#x9;#&gt;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;[CmdletBinding(SupportsShouldProcess=$true,DefaultParameterSetName=&quot;SingleID&quot;)]&#xD;&#xA;    Param&#xD;&#xA;    (&#xD;&#xA;&#x9;&#x9;#Define parameters and parameter sets&#xD;&#xA;        [Parameter(Mandatory=$true,Position=1)]&#xD;&#xA;        [string]$SiteURL,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true,Position=2)]&#xD;&#xA;        [string]$ListName,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$false,Position=3)]&#xD;&#xA;        [string[]]$Property=&quot;*&quot;,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true,Position=4,ParameterSetName=&quot;ListAllItems&quot;)]&#xD;&#xA;        [switch]$ListAllItems=$true,&#xD;&#xA;        [Parameter(Mandatory=$true,Position=4,ParameterSetName=&quot;SingleID&quot;)]&#xD;&#xA;        [int]$ItemID,&#xD;&#xA;        [Parameter(Mandatory=$true,Position=4,ParameterSetName=&quot;MultipleID&quot;)]&#xD;&#xA;        [int]$StartID,       &#xD;&#xA;        [Parameter(Mandatory=$true,Position=5,ParameterSetName=&quot;MultipleID&quot;)]&#xD;&#xA;        [int]$EndID,       &#xD;&#xA;        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=4,ParameterSetName=&quot;SaveItem&quot;)]&#xD;&#xA;        [string]$ItemURL,&#xD;&#xA;        [Parameter(Mandatory=$true,Position=5,ParameterSetName=&quot;SaveItem&quot;)]&#xD;&#xA;        [string]$DownloadPath&#xD;&#xA;    )&#xD;&#xA;&#x9;Process&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Try&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;#Use Get-SPSite to get a Microsoft SharePoint site object&#xD;&#xA;&#x9;&#x9;&#x9;$spSite = Get-SPSite -Identity $SiteURL -ErrorAction Stop -Verbose:$false&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;Catch &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;#If Get-SPSite failed for any reason, this function will be terminated.&#xD;&#xA;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;-ExceptionString $Error[0] `&#xD;&#xA;&#x9;&#x9;&#x9;-ErrorCategory ResourceUnavailable -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#xD;&#xA;&#x9;&#x9;&#x9;return $null&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;#Get the specified web site,$spWeb is a instance of Microsoft.SharePoint.SPWeb class&#xD;&#xA;&#x9;&#x9;$spWeb = $spSite.OpenWeb()&#xD;&#xA;&#x9;&#x9;#Get the specified list, $spList is a instance of Microsoft.SharePoint.SPList class&#xD;&#xA;&#x9;&#x9;$spList = $spWeb.Lists[$ListName]&#xD;&#xA;&#x9;&#x9;#If the specified list exists, keep on processing, otherwise display an error message&#xD;&#xA;&#x9;&#x9;if ($spList -ne $null) {&#xD;&#xA;&#x9;&#x9;&#x9;#Check the parameter set name&#xD;&#xA;&#x9;&#x9;&#x9;Switch ($pscmdlet.ParameterSetName) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;ListAllItems&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get all items from a list by default&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$spList.Items | Select-Object -Property $Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;SingleID&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get a single item from a list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (-not (($ItemID -lt 0) -or ($ItemID -gt $spList.Items.Count))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spList.GetItemByID($ItemID) | Select-Object -Property $Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $Messages.CannotFindItem `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory ObjectNotFound -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;MultipleID&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get multiple items from a list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (-not (($StartID -lt 0) -or ($EndID -gt $spList.Items.Count))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ($id = $StartID;$id -le $EndID;$id++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spList.GetItemByID($id) | Select-Object -Property $Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $Messages.CannotFindItemRange `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory ObjectNotFound -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;SaveItem&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Download a file from a document library list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#User cannot download file from a non-dcoument library list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($spList.BaseType -ne &quot;DocumentLibrary&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $Messages.CannotDLFromNonDocList `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory NotSpecified -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#spFile is a instance of Microsoft.SharePoint.SPFile class&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spFile = $spWeb.GetFile($ItemURL)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (-not $spFile.Exists) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#If file not exists, an error message will be displayed.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$errMsg = $Messages.CannotFindSpeciedItem -replace &quot;Placeholder01&quot;,$ItemURL&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $errMsg `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory NotSpecified -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#If file exists, use static method WriteAllBytes of System.IO.Path class &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#for saving the file to a local path.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spContent = $spFile.OpenBinary()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (($DownloadPath.SubString($DownloadPath.length - 1,1)) -ne &quot;\&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spTempFile = $DownloadPath + &quot;\&quot; + $spFile.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spTempFile = $DownloadPath + $spFile.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$verboseMessage = $Messages.SaveFilePrompt&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$verboseMessage = $verboseMessage -replace &quot;Placeholder01&quot;,$($spFile.Name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$verboseMessage = $verboseMessage -replace &quot;Placeholder02&quot;,$spTempFile&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteVerbose($verboseMessage)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[System.IO.File]::WriteAllBytes($spTempFile,$spContent)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;#If list not exists, an error message will be displayed.&#xD;&#xA;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;-ExceptionString &quot;Cannot find the specified list: `&quot;$ListName`&quot;.&quot; `&#xD;&#xA;&#x9;&#x9;&#x9;-ErrorCategory ResourceUnavailable -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;#Dispose SPSite and SPWeb object according to the article:&#xD;&#xA;&#x9;&#x9;#Microsoft Press: Using Windows PowerShell to Perform and Automate Farm Administrative Tasks&#xD;&#xA;&#x9;&#x9;#Memory Considerations When Using Windows PowerShell &#xD;&#xA;&#x9;&#x9;$spWeb.Dispose()&#xD;&#xA;&#x9;&#x9;$spSite.Dispose()&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;" />
  <Code Content="Function Get-OSCSPListItem&#xD;&#xA;{&#xD;&#xA;&#x9;&lt;#&#xD;&#xA;&#x9;&#x9;.SYNOPSIS&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem is an advanced function which can be used to retrieve the list data in Microsoft SharePoint 2010.&#xD;&#xA;&#x9;&#x9;.PARAMETER SiteURL&#xD;&#xA;&#x9;&#x9;Indicates the URL of a SharePoint site, in the form http://server_Name/sites/sitename.&#xD;&#xA;&#x9;&#x9;.PARAMETER ListName&#xD;&#xA;&#x9;&#x9;Indicates the Name of a SharePoint site list, for example, &quot;Shared Documents&quot;, &quot;Calendar&quot;, &quot;Tasks&quot;, &quot;Site Pages&quot;.&#xD;&#xA;&#x9;&#x9;.PARAMETER Property&#xD;&#xA;&#x9;&#x9;Indicates the properties of a SharePoint site list item which will be returned by Get-OSCSPListItem.&#xD;&#xA;&#x9;&#x9;For example, &quot;ID&quot;, &quot;Name&quot;, &quot;ParentList&quot;. Wildcard is accepted if you want get all properties.&#xD;&#xA;&#x9;&#x9;.PARAMETER ListAllItems&#xD;&#xA;&#x9;&#x9;Indicates Get-OSCSPListItem will return all items in a specified list.&#xD;&#xA;&#x9;&#x9;.PARAMETER ItemID&#xD;&#xA;&#x9;&#x9;Indicates Get-OSCSPListItem will return a item with the specified ID.&#xD;&#xA;&#x9;&#x9;.PARAMETER StartID&#xD;&#xA;&#x9;&#x9;Indicates the start ID of an ID range.&#xD;&#xA;&#x9;&#x9;.PARAMETER EndID&#xD;&#xA;&#x9;&#x9;Indicates the end ID of an ID range&#xD;&#xA;&#x9;&#x9;.PARAMETER ItemURL&#xD;&#xA;&#x9;&#x9;Indicates a URL of an Item which will be downloaded.&#xD;&#xA;&#x9;&#x9;.PARAMETER DownloadPath&#xD;&#xA;&#x9;&#x9;Indicates a local path which will be used to save the item.&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Get all items from a list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ListAllItems -Property &quot;ID&quot;,&quot;Name&quot;,&quot;ParentList&quot;&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Get a single item with all properties from a list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ItemID 1 -Property *&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Get multiple items from a list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -StartID 4 -EndID 5 -Property &quot;ID&quot;,&quot;Name&quot;&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Download a file from a document library list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ItemURL &quot;Shared Documents/NewWordDoc.docx&quot; -DownloadPath &quot;C:\Data&quot; -Verbose&#xD;&#xA;&#x9;&#x9;.EXAMPLE&#xD;&#xA;&#x9;&#x9;#Download multiple files from a document library list&#xD;&#xA;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName &quot;Shared Documents&quot; -ListAllItems -Property &quot;Name&quot;,&quot;URL&quot;,&quot;ParentList&quot; | ForEach-Object {&#xD;&#xA;&#x9;&#x9;&#x9;Get-OSCSPListItem -SiteURL &quot;http://server_name/sites/sitename&quot; -ListName $_.ParentList -ItemURL $_.Url -DownloadPath &quot;C:\Data&quot; -Verbose&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;.LINK&#xD;&#xA;&#x9;&#x9;Windows PowerShell Advanced Function&#xD;&#xA;&#x9;&#x9;http://technet.microsoft.com/en-us/library/dd315326.aspx&#xD;&#xA;&#x9;&#x9;.LINK&#xD;&#xA;&#x9;&#x9;Microsoft.SharePoint.SPWeb class&#xD;&#xA;&#x9;&#x9;http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.spweb.aspx&#xD;&#xA;&#x9;&#x9;.LINK&#xD;&#xA;&#x9;&#x9;Microsoft.SharePoint.SPList class&#xD;&#xA;&#x9;&#x9;http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.splist.aspx&#xD;&#xA;&#x9;#&gt;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;[CmdletBinding(SupportsShouldProcess=$true,DefaultParameterSetName=&quot;SingleID&quot;)]&#xD;&#xA;    Param&#xD;&#xA;    (&#xD;&#xA;&#x9;&#x9;#Define parameters and parameter sets&#xD;&#xA;        [Parameter(Mandatory=$true,Position=1)]&#xD;&#xA;        [string]$SiteURL,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true,Position=2)]&#xD;&#xA;        [string]$ListName,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$false,Position=3)]&#xD;&#xA;        [string[]]$Property=&quot;*&quot;,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true,Position=4,ParameterSetName=&quot;ListAllItems&quot;)]&#xD;&#xA;        [switch]$ListAllItems=$true,&#xD;&#xA;        [Parameter(Mandatory=$true,Position=4,ParameterSetName=&quot;SingleID&quot;)]&#xD;&#xA;        [int]$ItemID,&#xD;&#xA;        [Parameter(Mandatory=$true,Position=4,ParameterSetName=&quot;MultipleID&quot;)]&#xD;&#xA;        [int]$StartID,       &#xD;&#xA;        [Parameter(Mandatory=$true,Position=5,ParameterSetName=&quot;MultipleID&quot;)]&#xD;&#xA;        [int]$EndID,       &#xD;&#xA;        [Parameter(Mandatory=$true,ValueFromPipelineByPropertyName=$true,Position=4,ParameterSetName=&quot;SaveItem&quot;)]&#xD;&#xA;        [string]$ItemURL,&#xD;&#xA;        [Parameter(Mandatory=$true,Position=5,ParameterSetName=&quot;SaveItem&quot;)]&#xD;&#xA;        [string]$DownloadPath&#xD;&#xA;    )&#xD;&#xA;&#x9;Process&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Try&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;#Use Get-SPSite to get a Microsoft SharePoint site object&#xD;&#xA;&#x9;&#x9;&#x9;$spSite = Get-SPSite -Identity $SiteURL -ErrorAction Stop -Verbose:$false&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;Catch &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;#If Get-SPSite failed for any reason, this function will be terminated.&#xD;&#xA;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;-ExceptionString $Error[0] `&#xD;&#xA;&#x9;&#x9;&#x9;-ErrorCategory ResourceUnavailable -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#xD;&#xA;&#x9;&#x9;&#x9;return $null&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;#Get the specified web site,$spWeb is a instance of Microsoft.SharePoint.SPWeb class&#xD;&#xA;&#x9;&#x9;$spWeb = $spSite.OpenWeb()&#xD;&#xA;&#x9;&#x9;#Get the specified list, $spList is a instance of Microsoft.SharePoint.SPList class&#xD;&#xA;&#x9;&#x9;$spList = $spWeb.Lists[$ListName]&#xD;&#xA;&#x9;&#x9;#If the specified list exists, keep on processing, otherwise display an error message&#xD;&#xA;&#x9;&#x9;if ($spList -ne $null) {&#xD;&#xA;&#x9;&#x9;&#x9;#Check the parameter set name&#xD;&#xA;&#x9;&#x9;&#x9;Switch ($pscmdlet.ParameterSetName) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;ListAllItems&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get all items from a list by default&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$spList.Items | Select-Object -Property $Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;SingleID&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get a single item from a list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (-not (($ItemID -lt 0) -or ($ItemID -gt $spList.Items.Count))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spList.GetItemByID($ItemID) | Select-Object -Property $Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $Messages.CannotFindItem `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory ObjectNotFound -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;MultipleID&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get multiple items from a list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (-not (($StartID -lt 0) -or ($EndID -gt $spList.Items.Count))) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for ($id = $StartID;$id -le $EndID;$id++) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spList.GetItemByID($id) | Select-Object -Property $Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $Messages.CannotFindItemRange `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory ObjectNotFound -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;SaveItem&quot; {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Download a file from a document library list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#User cannot download file from a non-dcoument library list&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($spList.BaseType -ne &quot;DocumentLibrary&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $Messages.CannotDLFromNonDocList `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory NotSpecified -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#spFile is a instance of Microsoft.SharePoint.SPFile class&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spFile = $spWeb.GetFile($ItemURL)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (-not $spFile.Exists) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#If file not exists, an error message will be displayed.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$errMsg = $Messages.CannotFindSpeciedItem -replace &quot;Placeholder01&quot;,$ItemURL&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ExceptionString $errMsg `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-ErrorCategory NotSpecified -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#If file exists, use static method WriteAllBytes of System.IO.Path class &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#for saving the file to a local path.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spContent = $spFile.OpenBinary()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (($DownloadPath.SubString($DownloadPath.length - 1,1)) -ne &quot;\&quot;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spTempFile = $DownloadPath + &quot;\&quot; + $spFile.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$spTempFile = $DownloadPath + $spFile.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$verboseMessage = $Messages.SaveFilePrompt&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$verboseMessage = $verboseMessage -replace &quot;Placeholder01&quot;,$($spFile.Name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$verboseMessage = $verboseMessage -replace &quot;Placeholder02&quot;,$spTempFile&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$pscmdlet.WriteVerbose($verboseMessage)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[System.IO.File]::WriteAllBytes($spTempFile,$spContent)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;#If list not exists, an error message will be displayed.&#xD;&#xA;&#x9;&#x9;&#x9;$customError = New-OSCPSCustomErrorRecord `&#xD;&#xA;&#x9;&#x9;&#x9;-ExceptionString &quot;Cannot find the specified list: `&quot;$ListName`&quot;.&quot; `&#xD;&#xA;&#x9;&#x9;&#x9;-ErrorCategory ResourceUnavailable -ErrorID 1 -TargetObject $pscmdlet&#xD;&#xA;&#x9;&#x9;&#x9;$pscmdlet.WriteError($customError)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;#Dispose SPSite and SPWeb object according to the article:&#xD;&#xA;&#x9;&#x9;#Microsoft Press: Using Windows PowerShell to Perform and Automate Farm Administrative Tasks&#xD;&#xA;&#x9;&#x9;#Memory Considerations When Using Windows PowerShell &#xD;&#xA;&#x9;&#x9;$spWeb.Dispose()&#xD;&#xA;&#x9;&#x9;$spSite.Dispose()&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;" />
</CodeSnippets>