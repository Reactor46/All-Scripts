<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="param (&#xD;&#xA;    [Parameter(Mandatory=$true)]&#xD;&#xA;    [string]$importfile = &quot;&quot;,&#xD;&#xA;    [string]$logpath = &quot;&quot;&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;#Check SharePoint major build version.    &#xD;&#xA;[Void][System.Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SharePoint&quot;)&#xD;&#xA;$SPFarm = [Microsoft.SharePoint.Administration.SPfarm]::Local&#xD;&#xA;$version = $SPFarm.BuildVersion.Major&#xD;&#xA;&#xD;&#xA;#Set up the STSADM command path regarding what is the major build version&#xD;&#xA;$stsadmpath = &quot;c:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\$version\BIN\&quot;&#xD;&#xA;&#xD;&#xA;#Set location where we are.&#xD;&#xA;$location = Get-Location&#xD;&#xA;Set-Location $location&#xD;&#xA;&#xD;&#xA;#Create a log folder if we signed, anyway set it default location.&#xD;&#xA;if ($logpath -ne &quot;&quot;) &#xD;&#xA;    {New-Item -ItemType directory -Path $logpath -erroraction SilentlyContinue | &#xD;&#xA;    Write-Host &gt; $null }&#xD;&#xA;    else&#xD;&#xA;    {$logpath += $location}&#xD;&#xA;&#xD;&#xA;#Start working...&#xD;&#xA;$title = &quot;Work with SP sites&quot;&#xD;&#xA;$message = &quot;What do you want to do with the site collection?&quot;&#xD;&#xA;&#xD;&#xA;#Create all choice for jobs as backup, delete, restore and quite.&#xD;&#xA;$backup = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Backup&quot;, `&#xD;&#xA;    &quot;Backup all site collection from source list.&quot;&#xD;&#xA;&#xD;&#xA;$delete = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Delete&quot;, `&#xD;&#xA;    &quot;Delete all site collection from source list.&quot;&#xD;&#xA;    &#xD;&#xA;$restore = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Restore&quot;, `&#xD;&#xA;    &quot;Restore all site collection from source list.&quot;&#xD;&#xA;&#xD;&#xA;$quit = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Quit&quot;, `&#xD;&#xA;    &quot;Quit.&quot;    &#xD;&#xA;   &#xD;&#xA;#Initiate the menu.&#xD;&#xA;$options = [System.Management.Automation.Host.ChoiceDescription[]]($backup, $delete, $restore, $quit)&#xD;&#xA;&#xD;&#xA;#Do the jobs until you want to quit.&#xD;&#xA;:OuterLoop do&#xD;&#xA;{&#xD;&#xA; #Initiate a prompt for choice.&#xD;&#xA; $result = $host.ui.PromptForChoice($title, $message, $options, 0) &#xD;&#xA; &#xD;&#xA; #Do the job what you choose.&#xD;&#xA; switch ($result)&#xD;&#xA;  {&#x9;&#xD;&#xA;   #Create a backup from all site collection what are in the .csv file.&#xD;&#xA;   0 {&quot;BACKUP&quot;&#xD;&#xA;     $DateStr = &quot;{0:ddMMyyyyhhmmss}&quot; -f (get-date)&#xD;&#xA;     $stsadmpath&#xD;&#xA;     Write-Host -ForegroundColor green &quot;Opening SharePoint site...&quot;&#xD;&#xA;&#xD;&#xA;     ipcsv $importfile | &#xD;&#xA;     foreach {&#xD;&#xA;        Set-Location $stsadmpath&#xD;&#xA;        $site = $_.Site&#xD;&#xA;        $file = &quot;$location\&quot; + $_.Site.Replace(&quot;http://&quot;,&quot;&quot;).Replace(&quot;https://&quot;,&quot;&quot;).Replace(&quot;/&quot;,&quot;_&quot;).Replace(&quot;;&quot;,&quot;_&quot;) + &quot;.bak&quot;&#xD;&#xA;        $result = .\stsadm.exe -o backup -url $site -filename $file -overwrite&#xD;&#xA;        $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;        if ($result -eq &quot;Operation completed successfully.&quot;)&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green  &quot;The &quot; -nonewline &#xD;&#xA;            write-host -ForegroundColor magenta $site -nonewline &#xD;&#xA;            write-host -ForegroundColor green &quot; has been backed up to &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor yellow $file -nonewline&#xD;&#xA;            write-host -ForegroundColor green `n $result&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site has been backed up to `&quot;$file`&quot;&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $result | out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor red $site -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; site could not be found!&quot; `n $result&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site site could not be found!&quot; | &#xD;&#xA;&#x9;&#x9;&#x9;out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-backup.log&quot; -Append                        &#xD;&#xA;            $result = &quot;The site not found!&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $site | out-file $logpath\$DateStr&quot;-sitesnotfound.log&quot; -Append                        &#xD;&#xA;&#x9;        }&#xD;&#xA;        }&#xD;&#xA;        Write-Host -ForegroundColor green &quot;Done.&quot;&#xD;&#xA;        Set-Location $location&#xD;&#xA;     }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;   #Delete all site collection what are in the .csv file&#xD;&#xA;   1 {&quot;DELETE&quot;&#xD;&#xA;     $DateStr = &quot;{0:ddMMyyyyhhmmss}&quot; -f (get-date)&#xD;&#xA;     $stsadmpath&#xD;&#xA;     Write-Host -ForegroundColor green &quot;Opening SharePoint site...&quot;&#xD;&#xA;&#xD;&#xA;     ipcsv $importfile | &#xD;&#xA;     foreach {&#xD;&#xA;        Set-Location $stsadmpath&#xD;&#xA;        $site = $_.Site&#xD;&#xA;        $result = .\stsadm.exe -o deletesite -url $site&#xD;&#xA;        $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;        if ($result -eq &quot;Operation completed successfully.&quot;)&#xD;&#xA;        &#x9;{&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green  &quot;The &quot; -nonewline &#xD;&#xA;            write-host -ForegroundColor magenta $site -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; has been deleted! &quot; `n $result &#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site has been deleted!&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result | out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor red $site -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; site could not be found!&quot; `n $result&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site site could not be found! $result&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result = &quot;The site not found!&quot; |  &#xD;&#xA;&#x9;&#x9;&#x9;out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $site | out-file $logpath\$DateStr&quot;-sitesnotfound.log&quot; -Append&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        write-host -ForegroundColor green &quot;Done.&quot;&#xD;&#xA;        Set-Location $location&#xD;&#xA;     }&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;#Restore all site collection what are in the .csv file. &#xD;&#xA;&#x9;#WARNING: Check the connection of sites and backups!  &#xD;&#xA;    2 {&quot;RESTORE&quot;&#xD;&#xA;      $DateStr = &quot;{0:ddMMyyyyhhmmss}&quot; -f (get-date)&#xD;&#xA;      $stsadmpath&#xD;&#xA;      Write-Host -ForegroundColor green &quot;Opening SharePoint site...&quot;&#xD;&#xA;&#xD;&#xA;      ipcsv $importfile | &#xD;&#xA;      foreach {&#xD;&#xA;        Set-Location $stsadmpath&#xD;&#xA;        $site = $_.Site&#xD;&#xA;        $file = &quot;$location\&quot; + $_.Site.Replace(&quot;http://&quot;,&quot;&quot;).Replace(&quot;https://&quot;,&quot;&quot;).Replace(&quot;/&quot;,&quot;_&quot;).Replace(&quot;;&quot;,&quot;_&quot;) + &quot;.bak&quot;&#xD;&#xA;        $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;        if ((Test-Path $file) -eq $True)&#xD;&#xA;        &#x9;{&#xD;&#xA;            $result = .\stsadm.exe -o restore -url $site -filename $file -overwrite&#xD;&#xA;            $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;            if ($result -eq &quot;Operation completed successfully.&quot;)&#xD;&#xA;            &#x9;{&#xD;&#xA;                .\stsadm.exe -o refreshsitedms -url $site | out-null&#xD;&#xA;                .\stsadm.exe -o setsitelock -url $site -lock none | out-null&#xD;&#xA;                write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;                write-host -ForegroundColor green  &quot;The &quot; -nonewline &#xD;&#xA;                write-host -ForegroundColor magenta $site -nonewline &#xD;&#xA;                write-host -ForegroundColor green &quot; has been restored from &quot; -nonewline &#xD;&#xA;                write-host -ForegroundColor yellow $file -nonewline&#xD;&#xA;                write-host -ForegroundColor green `n $result&#xD;&#xA;                $logentry = &quot;[$DateStrForLog] The $site has been restored from `&quot;$file`&quot;&quot; | &#xD;&#xA;                out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result | out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;                write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;                write-host -ForegroundColor red $site -nonewline&#xD;&#xA;                write-host -ForegroundColor green &quot; site could not be found!&quot; `n $result&#xD;&#xA;                $logentry = &quot;[$DateStrForLog] The $site site has not been restored correctly! $result&quot; | &#xD;&#xA;                out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result = &quot;The site has not been restored correctly!&quot; |  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $site | out-file $logpath\$DateStr&quot;-sitesnotfound.log&quot; -Append&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor red $file -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; backup file could not be found!&quot;`n&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $file backup file could not be found!&quot; |  &#xD;&#xA;            out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;            }   &#xD;&#xA;        }&#xD;&#xA;        Write-Host -ForegroundColor green &quot;Done.&quot;&#xD;&#xA;        Set-Location $location&#xD;&#xA;      }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;#Quit from job.&#xD;&#xA;    3 {&quot;QUIT&quot;&#xD;&#xA;      Set-Location $location;&#xD;&#xA;      break OuterLoop&#xD;&#xA;      }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;while ($y -ne 100)" />
  <Code Content="param (&#xD;&#xA;    [Parameter(Mandatory=$true)]&#xD;&#xA;    [string]$importfile = &quot;&quot;,&#xD;&#xA;    [string]$logpath = &quot;&quot;&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;#Check SharePoint major build version.    &#xD;&#xA;[Void][System.Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SharePoint&quot;)&#xD;&#xA;$SPFarm = [Microsoft.SharePoint.Administration.SPfarm]::Local&#xD;&#xA;$version = $SPFarm.BuildVersion.Major&#xD;&#xA;&#xD;&#xA;#Set up the STSADM command path regarding what is the major build version&#xD;&#xA;$stsadmpath = &quot;c:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\$version\BIN\&quot;&#xD;&#xA;&#xD;&#xA;#Set location where we are.&#xD;&#xA;$location = Get-Location&#xD;&#xA;Set-Location $location&#xD;&#xA;&#xD;&#xA;#Create a log folder if we signed, anyway set it default location.&#xD;&#xA;if ($logpath -ne &quot;&quot;) &#xD;&#xA;    {New-Item -ItemType directory -Path $logpath -erroraction SilentlyContinue | &#xD;&#xA;    Write-Host &gt; $null }&#xD;&#xA;    else&#xD;&#xA;    {$logpath += $location}&#xD;&#xA;&#xD;&#xA;#Start working...&#xD;&#xA;$title = &quot;Work with SP sites&quot;&#xD;&#xA;$message = &quot;What do you want to do with the site collection?&quot;&#xD;&#xA;&#xD;&#xA;#Create all choice for jobs as backup, delete, restore and quite.&#xD;&#xA;$backup = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Backup&quot;, `&#xD;&#xA;    &quot;Backup all site collection from source list.&quot;&#xD;&#xA;&#xD;&#xA;$delete = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Delete&quot;, `&#xD;&#xA;    &quot;Delete all site collection from source list.&quot;&#xD;&#xA;    &#xD;&#xA;$restore = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Restore&quot;, `&#xD;&#xA;    &quot;Restore all site collection from source list.&quot;&#xD;&#xA;&#xD;&#xA;$quit = New-Object System.Management.Automation.Host.ChoiceDescription &quot;&amp;Quit&quot;, `&#xD;&#xA;    &quot;Quit.&quot;    &#xD;&#xA;   &#xD;&#xA;#Initiate the menu.&#xD;&#xA;$options = [System.Management.Automation.Host.ChoiceDescription[]]($backup, $delete, $restore, $quit)&#xD;&#xA;&#xD;&#xA;#Do the jobs until you want to quit.&#xD;&#xA;:OuterLoop do&#xD;&#xA;{&#xD;&#xA; #Initiate a prompt for choice.&#xD;&#xA; $result = $host.ui.PromptForChoice($title, $message, $options, 0) &#xD;&#xA; &#xD;&#xA; #Do the job what you choose.&#xD;&#xA; switch ($result)&#xD;&#xA;  {&#x9;&#xD;&#xA;   #Create a backup from all site collection what are in the .csv file.&#xD;&#xA;   0 {&quot;BACKUP&quot;&#xD;&#xA;     $DateStr = &quot;{0:ddMMyyyyhhmmss}&quot; -f (get-date)&#xD;&#xA;     $stsadmpath&#xD;&#xA;     Write-Host -ForegroundColor green &quot;Opening SharePoint site...&quot;&#xD;&#xA;&#xD;&#xA;     ipcsv $importfile | &#xD;&#xA;     foreach {&#xD;&#xA;        Set-Location $stsadmpath&#xD;&#xA;        $site = $_.Site&#xD;&#xA;        $file = &quot;$location\&quot; + $_.Site.Replace(&quot;http://&quot;,&quot;&quot;).Replace(&quot;https://&quot;,&quot;&quot;).Replace(&quot;/&quot;,&quot;_&quot;).Replace(&quot;;&quot;,&quot;_&quot;) + &quot;.bak&quot;&#xD;&#xA;        $result = .\stsadm.exe -o backup -url $site -filename $file -overwrite&#xD;&#xA;        $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;        if ($result -eq &quot;Operation completed successfully.&quot;)&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green  &quot;The &quot; -nonewline &#xD;&#xA;            write-host -ForegroundColor magenta $site -nonewline &#xD;&#xA;            write-host -ForegroundColor green &quot; has been backed up to &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor yellow $file -nonewline&#xD;&#xA;            write-host -ForegroundColor green `n $result&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site has been backed up to `&quot;$file`&quot;&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $result | out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor red $site -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; site could not be found!&quot; `n $result&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site site could not be found!&quot; | &#xD;&#xA;&#x9;&#x9;&#x9;out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-backup.log&quot; -Append                        &#xD;&#xA;            $result = &quot;The site not found!&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-backup.log&quot; -Append&#xD;&#xA;            $site | out-file $logpath\$DateStr&quot;-sitesnotfound.log&quot; -Append                        &#xD;&#xA;&#x9;        }&#xD;&#xA;        }&#xD;&#xA;        Write-Host -ForegroundColor green &quot;Done.&quot;&#xD;&#xA;        Set-Location $location&#xD;&#xA;     }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;   #Delete all site collection what are in the .csv file&#xD;&#xA;   1 {&quot;DELETE&quot;&#xD;&#xA;     $DateStr = &quot;{0:ddMMyyyyhhmmss}&quot; -f (get-date)&#xD;&#xA;     $stsadmpath&#xD;&#xA;     Write-Host -ForegroundColor green &quot;Opening SharePoint site...&quot;&#xD;&#xA;&#xD;&#xA;     ipcsv $importfile | &#xD;&#xA;     foreach {&#xD;&#xA;        Set-Location $stsadmpath&#xD;&#xA;        $site = $_.Site&#xD;&#xA;        $result = .\stsadm.exe -o deletesite -url $site&#xD;&#xA;        $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;        if ($result -eq &quot;Operation completed successfully.&quot;)&#xD;&#xA;        &#x9;{&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green  &quot;The &quot; -nonewline &#xD;&#xA;            write-host -ForegroundColor magenta $site -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; has been deleted! &quot; `n $result &#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site has been deleted!&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result | out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor red $site -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; site could not be found!&quot; `n $result&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $site site could not be found! $result&quot; | &#xD;&#xA;            out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result = &quot;The site not found!&quot; |  &#xD;&#xA;&#x9;&#x9;&#x9;out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-delete.log&quot; -Append&#xD;&#xA;            $site | out-file $logpath\$DateStr&quot;-sitesnotfound.log&quot; -Append&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        write-host -ForegroundColor green &quot;Done.&quot;&#xD;&#xA;        Set-Location $location&#xD;&#xA;     }&#xD;&#xA;&#x9;&#x9;  &#xD;&#xA;&#x9;#Restore all site collection what are in the .csv file. &#xD;&#xA;&#x9;#WARNING: Check the connection of sites and backups!  &#xD;&#xA;    2 {&quot;RESTORE&quot;&#xD;&#xA;      $DateStr = &quot;{0:ddMMyyyyhhmmss}&quot; -f (get-date)&#xD;&#xA;      $stsadmpath&#xD;&#xA;      Write-Host -ForegroundColor green &quot;Opening SharePoint site...&quot;&#xD;&#xA;&#xD;&#xA;      ipcsv $importfile | &#xD;&#xA;      foreach {&#xD;&#xA;        Set-Location $stsadmpath&#xD;&#xA;        $site = $_.Site&#xD;&#xA;        $file = &quot;$location\&quot; + $_.Site.Replace(&quot;http://&quot;,&quot;&quot;).Replace(&quot;https://&quot;,&quot;&quot;).Replace(&quot;/&quot;,&quot;_&quot;).Replace(&quot;;&quot;,&quot;_&quot;) + &quot;.bak&quot;&#xD;&#xA;        $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;        if ((Test-Path $file) -eq $True)&#xD;&#xA;        &#x9;{&#xD;&#xA;            $result = .\stsadm.exe -o restore -url $site -filename $file -overwrite&#xD;&#xA;            $DateStrForLog = &quot;{0:dd/MM/yyyy hh:mm:ss}&quot; -f (get-date)&#xD;&#xA;            if ($result -eq &quot;Operation completed successfully.&quot;)&#xD;&#xA;            &#x9;{&#xD;&#xA;                .\stsadm.exe -o refreshsitedms -url $site | out-null&#xD;&#xA;                .\stsadm.exe -o setsitelock -url $site -lock none | out-null&#xD;&#xA;                write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;                write-host -ForegroundColor green  &quot;The &quot; -nonewline &#xD;&#xA;                write-host -ForegroundColor magenta $site -nonewline &#xD;&#xA;                write-host -ForegroundColor green &quot; has been restored from &quot; -nonewline &#xD;&#xA;                write-host -ForegroundColor yellow $file -nonewline&#xD;&#xA;                write-host -ForegroundColor green `n $result&#xD;&#xA;                $logentry = &quot;[$DateStrForLog] The $site has been restored from `&quot;$file`&quot;&quot; | &#xD;&#xA;                out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result | out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;                write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;                write-host -ForegroundColor red $site -nonewline&#xD;&#xA;                write-host -ForegroundColor green &quot; site could not be found!&quot; `n $result&#xD;&#xA;                $logentry = &quot;[$DateStrForLog] The $site site has not been restored correctly! $result&quot; | &#xD;&#xA;                out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result = &quot;The site has not been restored correctly!&quot; |  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;                $site | out-file $logpath\$DateStr&quot;-sitesnotfound.log&quot; -Append&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;            write-host -ForegroundColor magenta &quot;[$DateStrForLog] &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot;The &quot; -nonewline&#xD;&#xA;            write-host -ForegroundColor red $file -nonewline&#xD;&#xA;            write-host -ForegroundColor green &quot; backup file could not be found!&quot;`n&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;            $logentry = &quot;[$DateStrForLog] The $file backup file could not be found!&quot; |  &#xD;&#xA;            out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;            $result = &quot;&quot; |  out-file $logpath\$DateStr&quot;-restore.log&quot; -Append&#xD;&#xA;            }   &#xD;&#xA;        }&#xD;&#xA;        Write-Host -ForegroundColor green &quot;Done.&quot;&#xD;&#xA;        Set-Location $location&#xD;&#xA;      }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;#Quit from job.&#xD;&#xA;    3 {&quot;QUIT&quot;&#xD;&#xA;      Set-Location $location;&#xD;&#xA;      break OuterLoop&#xD;&#xA;      }&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;while ($y -ne 100)" />
</CodeSnippets>