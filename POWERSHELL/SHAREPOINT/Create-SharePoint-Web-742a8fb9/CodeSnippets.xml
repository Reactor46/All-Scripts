<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="$ver = $host | select version&#xD;&#xA;if ($ver.Version.Major -gt 1)  {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;Add-PsSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;Import-Module WebAdministration -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;$WebApplicationURL = &quot;http://Contoso.com&quot;&#xD;&#xA;&#xD;&#xA;$WebApplicationName = &quot;Contoso Web Application&quot;&#xD;&#xA;&#xD;&#xA;$ContentDatabase = &quot;Contoso_ContentDB&quot;&#xD;&#xA;&#xD;&#xA;$ApplicationPoolDisplayName = &quot;Contoso App Pool&quot;&#xD;&#xA;&#xD;&#xA;$ApplicationPoolIdentity = &quot;Contoso\ContentAppPool&quot;&#xD;&#xA;&#xD;&#xA;$ApplicationPoolPassword = &quot;Passw0rd1&quot;&#xD;&#xA;&#xD;&#xA;$PortalSuperReader = &quot;Contoso\SuperReader&quot;&#xD;&#xA;&#xD;&#xA;$PortalSuperUser = &quot;Contoso\SuperUser&quot;&#xD;&#xA;&#xD;&#xA;$AppPoolStatus = $False&#xD;&#xA;&#xD;&#xA;if(get-spwebapplication $WebApplicationURL -ErrorAction SilentlyContinue)&#xD;&#xA;{&#xD;&#xA;    Write-Host &quot;Aborting: Web Application $WebApplicationURL Already Exists&quot; -ForegroundColor Red&#xD;&#xA;    sleep 5&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    &#xD;&#xA;    if(Get-SPServiceApplicationPool $ApplicationPoolDisplayName -ErrorAction SilentlyContinue)&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name AppPoolStatus -Value &quot;IsSharePoint&quot; -scope &quot;script&quot;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if((Test-Path IIS:\AppPools\$ApplicationPoolDisplayName).tostring() -eq &quot;True&quot;)&#xD;&#xA;        {&#xD;&#xA;           Set-Variable -Name AppPoolStatus -Value &quot;IsNotSharePoint&quot; -scope &quot;script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;    if($AppPoolStatus -eq &quot;IsNotSharePoint&quot;)&#xD;&#xA;    {&#xD;&#xA;        Write-Host &quot;Aborting: Application Pool $ApplicationPoolDisplayName already exists on the server and is not a SharePoint Application Pool&quot; -ForegroundColor Red&#xD;&#xA;    }&#xD;&#xA;    elseif($AppPoolStatus -eq &quot;IsSharePoint&quot;)&#xD;&#xA;    {&#xD;&#xA;        if($WebApplicationURL.StartsWith(&quot;http://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(7)&#xD;&#xA;            $HTTPPort = &quot;80&quot;&#xD;&#xA;        }&#xD;&#xA;        elseif($WebApplicationURL.StartsWith(&quot;https://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(8)&#xD;&#xA;            $HTTPPort = &quot;443&quot;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        Set-Variable -Name AppPool -Value (Get-SPServiceApplicationPool $ApplicationPoolDisplayName) -scope &quot;script&quot;&#xD;&#xA;        &#xD;&#xA;        $WebApp = New-SPWebApplication -ApplicationPool $ApplicationPoolDisplayName -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader&#xD;&#xA;        &#xD;&#xA;        $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = $PortalSuperUser&#xD;&#xA;        $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = $PortalSuperReader&#xD;&#xA;        &#xD;&#xA;        $SuperUserPolicy = $WebApp.Policies.Add($PortalSuperUser, &quot;Portal Super User Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperUserPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy = $WebApp.Policies.Add($PortalSuperReader, &quot;Portal Super Reader Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead))&#xD;&#xA;        &#xD;&#xA;        $WebApp.update()&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        if(get-spmanagedaccount $ApplicationPoolIdentity)&#xD;&#xA;        {&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (Get-SPManagedAccount $ApplicationPoolIdentity | select username) -scope &quot;Script&quot;&#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account $ApplicationPoolIdentity) -scope &quot;Script&quot;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            $AppPoolCredentials = New-Object System.Management.Automation.PSCredential $ApplicationPoolIdentity, (ConvertTo-SecureString $ApplicationPoolPassword -AsPlainText -Force)&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (New-SPManagedAccount -Credential $AppPoolCredentials) -scope &quot;Script&quot;&#xD;&#xA;            &#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account (get-spmanagedaccount $ApplicationPoolIdentity)) -scope &quot;Script&quot;&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        if($WebApplicationURL.StartsWith(&quot;http://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(7)&#xD;&#xA;            $HTTPPort = &quot;80&quot;&#xD;&#xA;        }&#xD;&#xA;        elseif($WebApplicationURL.StartsWith(&quot;https://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(8)&#xD;&#xA;            $HTTPPort = &quot;443&quot;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $WebApp = New-SPWebApplication -ApplicationPool $AppPool.Name -ApplicationPoolAccount $AppPoolManagedAccount.Username -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = $PortalSuperUser&#xD;&#xA;        $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = $PortalSuperReader&#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;        $SuperUserPolicy = $WebApp.Policies.Add($PortalSuperUser, &quot;Portal Super User Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperUserPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy = $WebApp.Policies.Add($PortalSuperReader, &quot;Portal Super Reader Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead))&#xD;&#xA;        &#xD;&#xA;       &#xD;&#xA;&#xD;&#xA;        $WebApp.update()&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;}" />
  <Code Content="$ver = $host | select version&#xD;&#xA;if ($ver.Version.Major -gt 1)  {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;Add-PsSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;Import-Module WebAdministration -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;$WebApplicationURL = &quot;http://Contoso.com&quot;&#xD;&#xA;&#xD;&#xA;$WebApplicationName = &quot;Contoso Web Application&quot;&#xD;&#xA;&#xD;&#xA;$ContentDatabase = &quot;Contoso_ContentDB&quot;&#xD;&#xA;&#xD;&#xA;$ApplicationPoolDisplayName = &quot;Contoso App Pool&quot;&#xD;&#xA;&#xD;&#xA;$ApplicationPoolIdentity = &quot;Contoso\ContentAppPool&quot;&#xD;&#xA;&#xD;&#xA;$ApplicationPoolPassword = &quot;Passw0rd1&quot;&#xD;&#xA;&#xD;&#xA;$PortalSuperReader = &quot;Contoso\SuperReader&quot;&#xD;&#xA;&#xD;&#xA;$PortalSuperUser = &quot;Contoso\SuperUser&quot;&#xD;&#xA;&#xD;&#xA;$AppPoolStatus = $False&#xD;&#xA;&#xD;&#xA;if(get-spwebapplication $WebApplicationURL -ErrorAction SilentlyContinue)&#xD;&#xA;{&#xD;&#xA;    Write-Host &quot;Aborting: Web Application $WebApplicationURL Already Exists&quot; -ForegroundColor Red&#xD;&#xA;    sleep 5&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;    &#xD;&#xA;    if(Get-SPServiceApplicationPool $ApplicationPoolDisplayName -ErrorAction SilentlyContinue)&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name AppPoolStatus -Value &quot;IsSharePoint&quot; -scope &quot;script&quot;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if((Test-Path IIS:\AppPools\$ApplicationPoolDisplayName).tostring() -eq &quot;True&quot;)&#xD;&#xA;        {&#xD;&#xA;           Set-Variable -Name AppPoolStatus -Value &quot;IsNotSharePoint&quot; -scope &quot;script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;    if($AppPoolStatus -eq &quot;IsNotSharePoint&quot;)&#xD;&#xA;    {&#xD;&#xA;        Write-Host &quot;Aborting: Application Pool $ApplicationPoolDisplayName already exists on the server and is not a SharePoint Application Pool&quot; -ForegroundColor Red&#xD;&#xA;    }&#xD;&#xA;    elseif($AppPoolStatus -eq &quot;IsSharePoint&quot;)&#xD;&#xA;    {&#xD;&#xA;        if($WebApplicationURL.StartsWith(&quot;http://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(7)&#xD;&#xA;            $HTTPPort = &quot;80&quot;&#xD;&#xA;        }&#xD;&#xA;        elseif($WebApplicationURL.StartsWith(&quot;https://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(8)&#xD;&#xA;            $HTTPPort = &quot;443&quot;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        Set-Variable -Name AppPool -Value (Get-SPServiceApplicationPool $ApplicationPoolDisplayName) -scope &quot;script&quot;&#xD;&#xA;        &#xD;&#xA;        $WebApp = New-SPWebApplication -ApplicationPool $ApplicationPoolDisplayName -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader&#xD;&#xA;        &#xD;&#xA;        $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = $PortalSuperUser&#xD;&#xA;        $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = $PortalSuperReader&#xD;&#xA;        &#xD;&#xA;        $SuperUserPolicy = $WebApp.Policies.Add($PortalSuperUser, &quot;Portal Super User Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperUserPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy = $WebApp.Policies.Add($PortalSuperReader, &quot;Portal Super Reader Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead))&#xD;&#xA;        &#xD;&#xA;        $WebApp.update()&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        if(get-spmanagedaccount $ApplicationPoolIdentity)&#xD;&#xA;        {&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (Get-SPManagedAccount $ApplicationPoolIdentity | select username) -scope &quot;Script&quot;&#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account $ApplicationPoolIdentity) -scope &quot;Script&quot;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            $AppPoolCredentials = New-Object System.Management.Automation.PSCredential $ApplicationPoolIdentity, (ConvertTo-SecureString $ApplicationPoolPassword -AsPlainText -Force)&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (New-SPManagedAccount -Credential $AppPoolCredentials) -scope &quot;Script&quot;&#xD;&#xA;            &#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account (get-spmanagedaccount $ApplicationPoolIdentity)) -scope &quot;Script&quot;&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        if($WebApplicationURL.StartsWith(&quot;http://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(7)&#xD;&#xA;            $HTTPPort = &quot;80&quot;&#xD;&#xA;        }&#xD;&#xA;        elseif($WebApplicationURL.StartsWith(&quot;https://&quot;))&#xD;&#xA;        {&#xD;&#xA;            $HostHeader = $WebApplicationURL.Substring(8)&#xD;&#xA;            $HTTPPort = &quot;443&quot;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $WebApp = New-SPWebApplication -ApplicationPool $AppPool.Name -ApplicationPoolAccount $AppPoolManagedAccount.Username -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = $PortalSuperUser&#xD;&#xA;        $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = $PortalSuperReader&#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;        $SuperUserPolicy = $WebApp.Policies.Add($PortalSuperUser, &quot;Portal Super User Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperUserPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy = $WebApp.Policies.Add($PortalSuperReader, &quot;Portal Super Reader Account&quot;)&#xD;&#xA;&#xD;&#xA;        $SuperReaderPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead))&#xD;&#xA;        &#xD;&#xA;       &#xD;&#xA;&#xD;&#xA;        $WebApp.update()&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;}" />
</CodeSnippets>