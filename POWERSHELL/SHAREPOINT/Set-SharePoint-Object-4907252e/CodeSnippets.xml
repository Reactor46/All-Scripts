<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;&lt;#&#xD;&#xA;.SYNOPSIS&#xD;&#xA;Helper function to set the the SharePoint object cache accounts.&#x9;&#xD;&#xA;&#xD;&#xA;.DESCRIPTION&#xD;&#xA;This function sets the SharePoint web application super user/reader object cache accounts to the accounts provided.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts -WebAppURL http://www.example.com -SuperUser &quot;DOMAIN\superuser&quot; -SuperReader &quot;DOMAIN\superreader&quot;&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for the http://www.example.com web application to DOMAIN\superuser and DOMAIN\superreader, respectively.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts -WebAppURL http://www.example.com&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for the http://www.example.com web application back to SharePoint's defaults: NT Authority\System and NT Authority\Local Service, respectively.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for all the web applications back to SharePoint's defaults: NT Authority\System and NT Authority\Local Service, respectively.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts -SuperUser &quot;DOMAIN\superuser&quot; -SuperReader &quot;DOMAIN\superreader&quot;&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for all the web applications to DOMAIN\superuser and DOMAIN\superreader, respectively.&#xD;&#xA;&#xD;&#xA;.NOTES&#xD;&#xA;NAME: Set-SPObjectCacheAccounts&#xD;&#xA;AUTHOR: Wes Kroesbergen&#xD;&#xA;&#xD;&#xA;.LINK&#xD;&#xA;http://www.kroesbergens.com&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;Function Set-SPObjectCacheAccounts &#xD;&#xA;{&#xD;&#xA;&#x9;Param([Parameter(Position=0,Mandatory=$false)][string] $WebAppURL,&#xD;&#xA;&#x9;[Parameter(Position=1,Mandatory=$false)][string] $SuperUser,&#xD;&#xA;&#x9;[Parameter(Position=2,Mandatory=$false)][string] $SuperReader)&#xD;&#xA;&#xD;&#xA;    # Check if there is a URL specified&#xD;&#xA;&#x9;if ($WebAppURL -notlike &quot;&quot;)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$WebApp = Get-SPWebApplication $WebAppURL&#xD;&#xA;&#x9;&#x9;$WebApps = @($WebApp)&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;    # If no URL specified, let's ask user if we should update all web apps&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;        $Response = &quot;&quot;&#xD;&#xA;&#xD;&#xA;        # Validate a y/n response&#xD;&#xA;        While ($Response -notmatch '^(Y|N)$')&#xD;&#xA;        {&#xD;&#xA;            $Response = Read-Host &quot;No webapp specified, update all of them? (y/n)&quot;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        # If user selects Y, then update all&#xD;&#xA;        if ($Response -like &quot;Y&quot;)&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Updating all web applications!&quot;  -fore yellow &#xD;&#xA;            $WebApps = Get-SPWebApplication&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        # If user selects N, cancel&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Update cancelled.&quot;&#xD;&#xA;            $WebApps = @()&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;foreach ($WebApp in $WebApps)&#xD;&#xA;&#x9;{&#xD;&#xA;&#xD;&#xA;        # Check if web app is claims&#xD;&#xA;&#x9;    $IsClaims = $WebApp.UseClaimsAuthentication&#xD;&#xA;&#xD;&#xA;        # Get descriptive URL for user feedback&#xD;&#xA;&#x9;    $URL = $WebApp.URL&#xD;&#xA;&#xD;&#xA;        # Ensure user has not already set claims format of username&#xD;&#xA;&#x9;    $SuperUser = $SuperUser.Replace(&quot;i:0#.w|&quot;,&quot;&quot;)&#xD;&#xA;&#x9;    $SuperReader = $SuperReader.Replace(&quot;i:0#.w|&quot;,&quot;&quot;)&#xD;&#xA;&#xD;&#xA;&#x9;    if ($SuperUser -like &quot;&quot;)&#xD;&#xA;&#x9;    {&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Super User wasn't defined, resetting to SharePoint defaults...&quot;&#xD;&#xA;&#x9;&#x9;    $SuperUser = &quot;NT Authority\System&quot;&#xD;&#xA;&#x9;    }&#xD;&#xA;&#xD;&#xA;&#x9;    if ($SuperReader -like &quot;&quot;)&#xD;&#xA;&#x9;    {&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Super Reader wasn't defined, resetting to SharePoint defaults...&quot;&#xD;&#xA;&#x9;&#x9;    $SuperReader = &quot;NT Authority\Local Service&quot;&#xD;&#xA;&#x9;    }&#xD;&#xA;&#xD;&#xA;                # If web app was claims, update format of username accordingly, as long as they are not the default accounts&#xD;&#xA;&#x9;    if ($IsClaims -eq $true -and $SuperUser -notlike &quot;*System&quot; -and $SuperReader -notlike &quot;*Service&quot;)&#xD;&#xA;&#x9;    {&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Web application uses claims, ensuring user identities have correct prefix...&quot;&#xD;&#xA;&#x9;&#x9;    $SuperUser = (&quot;i:0#.w|&quot; + $SuperUser)&#xD;&#xA;&#x9;&#x9;    $SuperReader = (&quot;i:0#.w|&quot; + $SuperReader)&#xD;&#xA;&#x9;    }&#xD;&#xA;&#xD;&#xA;&#x9;    try &#xD;&#xA;&#x9;    { &#xD;&#xA;            # Update web app User Policy&#xD;&#xA;&#x9;&#x9;    $SUpolicy = $WebApp.Policies.Add($SuperUser,&quot;Super User&quot;) &#xD;&#xA;&#x9;&#x9;    $SUpolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl)) &#xD;&#xA;&#x9;&#x9;    $SRpolicy = $WebApp.Policies.Add($SuperReader,&quot;Super Reader&quot;) &#xD;&#xA;&#x9;&#x9;    $SRpolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead)) &#xD;&#xA;&#xD;&#xA;            # Update the actual web app object cache accounts&#xD;&#xA;&#x9;&#x9;    $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = [string]$SuperUser &#xD;&#xA;&#x9;&#x9;    $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = [string]$SuperReader&#xD;&#xA;&#xD;&#xA;            # Commit our changes&#xD;&#xA;&#x9;&#x9;    $WebApp.Update()&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Object cache accounts for $URL have been updated.&quot; &#xD;&#xA;&#x9;    } &#xD;&#xA;&#x9;    catch &#xD;&#xA;&#x9;    { &#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Error adding the object cache accounts for $URL!&quot; -fore red &#xD;&#xA;&#x9;    } &#xD;&#xA;&#x9;}&#xD;&#xA;} " />
  <Code Content="Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;&lt;#&#xD;&#xA;.SYNOPSIS&#xD;&#xA;Helper function to set the the SharePoint object cache accounts.&#x9;&#xD;&#xA;&#xD;&#xA;.DESCRIPTION&#xD;&#xA;This function sets the SharePoint web application super user/reader object cache accounts to the accounts provided.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts -WebAppURL http://www.example.com -SuperUser &quot;DOMAIN\superuser&quot; -SuperReader &quot;DOMAIN\superreader&quot;&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for the http://www.example.com web application to DOMAIN\superuser and DOMAIN\superreader, respectively.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts -WebAppURL http://www.example.com&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for the http://www.example.com web application back to SharePoint's defaults: NT Authority\System and NT Authority\Local Service, respectively.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for all the web applications back to SharePoint's defaults: NT Authority\System and NT Authority\Local Service, respectively.&#xD;&#xA;&#xD;&#xA;.EXAMPLE&#xD;&#xA;Set-SPObjectCacheAccounts -SuperUser &quot;DOMAIN\superuser&quot; -SuperReader &quot;DOMAIN\superreader&quot;&#xD;&#xA;&#xD;&#xA;This command sets the object cache accounts for all the web applications to DOMAIN\superuser and DOMAIN\superreader, respectively.&#xD;&#xA;&#xD;&#xA;.NOTES&#xD;&#xA;NAME: Set-SPObjectCacheAccounts&#xD;&#xA;AUTHOR: Wes Kroesbergen&#xD;&#xA;&#xD;&#xA;.LINK&#xD;&#xA;http://www.kroesbergens.com&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;Function Set-SPObjectCacheAccounts &#xD;&#xA;{&#xD;&#xA;&#x9;Param([Parameter(Position=0,Mandatory=$false)][string] $WebAppURL,&#xD;&#xA;&#x9;[Parameter(Position=1,Mandatory=$false)][string] $SuperUser,&#xD;&#xA;&#x9;[Parameter(Position=2,Mandatory=$false)][string] $SuperReader)&#xD;&#xA;&#xD;&#xA;    # Check if there is a URL specified&#xD;&#xA;&#x9;if ($WebAppURL -notlike &quot;&quot;)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$WebApp = Get-SPWebApplication $WebAppURL&#xD;&#xA;&#x9;&#x9;$WebApps = @($WebApp)&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;    # If no URL specified, let's ask user if we should update all web apps&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;        $Response = &quot;&quot;&#xD;&#xA;&#xD;&#xA;        # Validate a y/n response&#xD;&#xA;        While ($Response -notmatch '^(Y|N)$')&#xD;&#xA;        {&#xD;&#xA;            $Response = Read-Host &quot;No webapp specified, update all of them? (y/n)&quot;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        # If user selects Y, then update all&#xD;&#xA;        if ($Response -like &quot;Y&quot;)&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Updating all web applications!&quot;  -fore yellow &#xD;&#xA;            $WebApps = Get-SPWebApplication&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        # If user selects N, cancel&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Update cancelled.&quot;&#xD;&#xA;            $WebApps = @()&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;foreach ($WebApp in $WebApps)&#xD;&#xA;&#x9;{&#xD;&#xA;&#xD;&#xA;        # Check if web app is claims&#xD;&#xA;&#x9;    $IsClaims = $WebApp.UseClaimsAuthentication&#xD;&#xA;&#xD;&#xA;        # Get descriptive URL for user feedback&#xD;&#xA;&#x9;    $URL = $WebApp.URL&#xD;&#xA;&#xD;&#xA;        # Ensure user has not already set claims format of username&#xD;&#xA;&#x9;    $SuperUser = $SuperUser.Replace(&quot;i:0#.w|&quot;,&quot;&quot;)&#xD;&#xA;&#x9;    $SuperReader = $SuperReader.Replace(&quot;i:0#.w|&quot;,&quot;&quot;)&#xD;&#xA;&#xD;&#xA;&#x9;    if ($SuperUser -like &quot;&quot;)&#xD;&#xA;&#x9;    {&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Super User wasn't defined, resetting to SharePoint defaults...&quot;&#xD;&#xA;&#x9;&#x9;    $SuperUser = &quot;NT Authority\System&quot;&#xD;&#xA;&#x9;    }&#xD;&#xA;&#xD;&#xA;&#x9;    if ($SuperReader -like &quot;&quot;)&#xD;&#xA;&#x9;    {&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Super Reader wasn't defined, resetting to SharePoint defaults...&quot;&#xD;&#xA;&#x9;&#x9;    $SuperReader = &quot;NT Authority\Local Service&quot;&#xD;&#xA;&#x9;    }&#xD;&#xA;&#xD;&#xA;                # If web app was claims, update format of username accordingly, as long as they are not the default accounts&#xD;&#xA;&#x9;    if ($IsClaims -eq $true -and $SuperUser -notlike &quot;*System&quot; -and $SuperReader -notlike &quot;*Service&quot;)&#xD;&#xA;&#x9;    {&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Web application uses claims, ensuring user identities have correct prefix...&quot;&#xD;&#xA;&#x9;&#x9;    $SuperUser = (&quot;i:0#.w|&quot; + $SuperUser)&#xD;&#xA;&#x9;&#x9;    $SuperReader = (&quot;i:0#.w|&quot; + $SuperReader)&#xD;&#xA;&#x9;    }&#xD;&#xA;&#xD;&#xA;&#x9;    try &#xD;&#xA;&#x9;    { &#xD;&#xA;            # Update web app User Policy&#xD;&#xA;&#x9;&#x9;    $SUpolicy = $WebApp.Policies.Add($SuperUser,&quot;Super User&quot;) &#xD;&#xA;&#x9;&#x9;    $SUpolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl)) &#xD;&#xA;&#x9;&#x9;    $SRpolicy = $WebApp.Policies.Add($SuperReader,&quot;Super Reader&quot;) &#xD;&#xA;&#x9;&#x9;    $SRpolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead)) &#xD;&#xA;&#xD;&#xA;            # Update the actual web app object cache accounts&#xD;&#xA;&#x9;&#x9;    $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = [string]$SuperUser &#xD;&#xA;&#x9;&#x9;    $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = [string]$SuperReader&#xD;&#xA;&#xD;&#xA;            # Commit our changes&#xD;&#xA;&#x9;&#x9;    $WebApp.Update()&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Object cache accounts for $URL have been updated.&quot; &#xD;&#xA;&#x9;    } &#xD;&#xA;&#x9;    catch &#xD;&#xA;&#x9;    { &#xD;&#xA;&#x9;&#x9;    Write-Host &quot;Error adding the object cache accounts for $URL!&quot; -fore red &#xD;&#xA;&#x9;    } &#xD;&#xA;&#x9;}&#xD;&#xA;} " />
</CodeSnippets>