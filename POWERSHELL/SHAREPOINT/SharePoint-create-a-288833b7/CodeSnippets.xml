<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="Add-PSSnapin Microsoft.SharePoint.Powershell -ea 0&#xD;&#xA;&#xD;&#xA;# settings&#xD;&#xA;$webApplication = &quot;http://lrd02sha:20000/&quot;&#xD;&#xA;$excludeUrl = @(&quot;http://lrd02sha:20000&quot;)&#xD;&#xA;&#xD;&#xA;$targetDirectory = &quot;http://lrd02sha:20000&quot;&#xD;&#xA;$basePermissionLevel = &quot;Read Only Items&quot;&#xD;&#xA;$linksList = &quot;Workspaces&quot;&#xD;&#xA;# end settings&#xD;&#xA;&#xD;&#xA;# this function resets the unique role assignments of an item and breaks the role inheritance&#xD;&#xA;# afterwards we are going to add a single entry for every user with permissions on the target web assigned to the link item&#xD;&#xA;function AssignPermissions($web, $listItem) {&#xD;&#xA;    if ($listItem.HasUniqueRoleAssignments) {&#xD;&#xA;      $listItem.ResetRoleInheritance()&#xD;&#xA;    }&#xD;&#xA;    $listItem.BreakRoleInheritance($false)&#xD;&#xA;    &#xD;&#xA;    Get-SPUser -Web $web.Url | where { $_.Roles.Count -gt 0 -or $_.Groups.Count -gt 0 } | ForEach-Object {&#xD;&#xA;        $roleDefinition = $rootWeb.RoleDefinitions[$basePermissionLevel]&#xD;&#xA;        $roleAssignment = New-Object Microsoft.SharePoint.SPRoleAssignment($_.LoginName, $_.Email, $_.Name, $_.Notes)&#xD;&#xA;        $roleAssignment.RoleDefinitionBindings.Add($roleDefinition)&#xD;&#xA;        $listItem.RoleAssignments.Add($roleAssignment)&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $listItem.Update()&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# get the root web and list&#xD;&#xA;$rootWeb = Get-SPWeb $targetDirectory&#xD;&#xA;$list = $rootWeb.Lists[$linksList]&#xD;&#xA;&#xD;&#xA;# check if the Permissionssetting is available, if not, then create one&#xD;&#xA;if($rootWeb.RoleDefinitions[$basePermissionLevel] -eq $null)&#xD;&#xA;{&#xD;&#xA;    # Role Definition named &quot;Add Only&quot; does not yet exist&#xD;&#xA;    $spRoleDefinition = New-Object Microsoft.SharePoint.SPRoleDefinition&#xD;&#xA;    $spRoleDefinition.Name = $basePermissionLevel&#xD;&#xA;    $spRoleDefinition.BasePermissions = &quot;ViewListItems, Open, ViewPages&quot;&#xD;&#xA;    $rootWeb.RoleDefinitions.Add($spRoleDefinition)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# loop through all spsites in the specified web application and exclude the urls located under $excludeUrl&#xD;&#xA;Get-SPWebApplication $webApplication | Get-SPSite -Limit All | where { $excludeUrl -notcontains $_.Url } | Foreach-Object  {&#xD;&#xA;    # get the user of the web and verify in the links list of the directory if there is already an entry&#xD;&#xA;    $myWeb = Get-SPWeb $_.Url&#xD;&#xA;    $query=new-object Microsoft.SharePoint.SPQuery&#xD;&#xA;    $caml = '&lt;Where&gt;&#xD;&#xA;                &lt;BeginsWith&gt;&#xD;&#xA;                    &lt;FieldRef Name=&quot;URL&quot;/&gt;&#xD;&#xA;                        &lt;Value Type=&quot;URL&quot;&gt;{0}&lt;/Value&gt;&#xD;&#xA;                &lt;/BeginsWith&gt;&#xD;&#xA;             &lt;/Where&gt;' -f $myWeb.ServerRelativeUrl&#xD;&#xA;&#xD;&#xA;    $query.Query=$caml&#xD;&#xA;    $items = $list.GetItems($query);&#xD;&#xA;    &#xD;&#xA;    # if one or more items are returned, modify them accordingly. else create a new entry in the directory&#xD;&#xA;    if ($items.Count -gt 0) {&#xD;&#xA;        $items | ForEach-Object {&#xD;&#xA;            $listItem = $_&#xD;&#xA;            &#xD;&#xA;            # modify the exiting item url by specifying the url and title of the web&#xD;&#xA;            $listItem[&quot;URL&quot;] = '{0}, {1}' -f $myWeb.Url, $myWeb.Title&#xD;&#xA;            $listItem.Update()&#xD;&#xA;            &#xD;&#xA;            # re-assign the permissions to this item for security trimming&#xD;&#xA;            AssignPermissions $myWeb $listItem&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        # create a new item and assign the url and title of the current web&#xD;&#xA;        $listItem = $list.Items.Add()&#xD;&#xA;        $listItem[&quot;URL&quot;] = '{0}, {1}' -f $myWeb.Url, $myWeb.Title&#xD;&#xA;        $listItem.Update()&#xD;&#xA;        &#xD;&#xA;        # assign the permissions to this item for security trimming&#xD;&#xA;        AssignPermissions $myWeb $listItem&#xD;&#xA;    }&#xD;&#xA;}" />
  <Code Content="Add-PSSnapin Microsoft.SharePoint.Powershell -ea 0&#xD;&#xA;&#xD;&#xA;# settings&#xD;&#xA;$webApplication = &quot;http://lrd02sha:20000/&quot;&#xD;&#xA;$excludeUrl = @(&quot;http://lrd02sha:20000&quot;)&#xD;&#xA;&#xD;&#xA;$targetDirectory = &quot;http://lrd02sha:20000&quot;&#xD;&#xA;$basePermissionLevel = &quot;Read Only Items&quot;&#xD;&#xA;$linksList = &quot;Workspaces&quot;&#xD;&#xA;# end settings&#xD;&#xA;&#xD;&#xA;# this function resets the unique role assignments of an item and breaks the role inheritance&#xD;&#xA;# afterwards we are going to add a single entry for every user with permissions on the target web assigned to the link item&#xD;&#xA;function AssignPermissions($web, $listItem) {&#xD;&#xA;    if ($listItem.HasUniqueRoleAssignments) {&#xD;&#xA;      $listItem.ResetRoleInheritance()&#xD;&#xA;    }&#xD;&#xA;    $listItem.BreakRoleInheritance($false)&#xD;&#xA;    &#xD;&#xA;    Get-SPUser -Web $web.Url | where { $_.Roles.Count -gt 0 -or $_.Groups.Count -gt 0 } | ForEach-Object {&#xD;&#xA;        $roleDefinition = $rootWeb.RoleDefinitions[$basePermissionLevel]&#xD;&#xA;        $roleAssignment = New-Object Microsoft.SharePoint.SPRoleAssignment($_.LoginName, $_.Email, $_.Name, $_.Notes)&#xD;&#xA;        $roleAssignment.RoleDefinitionBindings.Add($roleDefinition)&#xD;&#xA;        $listItem.RoleAssignments.Add($roleAssignment)&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $listItem.Update()&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# get the root web and list&#xD;&#xA;$rootWeb = Get-SPWeb $targetDirectory&#xD;&#xA;$list = $rootWeb.Lists[$linksList]&#xD;&#xA;&#xD;&#xA;# check if the Permissionssetting is available, if not, then create one&#xD;&#xA;if($rootWeb.RoleDefinitions[$basePermissionLevel] -eq $null)&#xD;&#xA;{&#xD;&#xA;    # Role Definition named &quot;Add Only&quot; does not yet exist&#xD;&#xA;    $spRoleDefinition = New-Object Microsoft.SharePoint.SPRoleDefinition&#xD;&#xA;    $spRoleDefinition.Name = $basePermissionLevel&#xD;&#xA;    $spRoleDefinition.BasePermissions = &quot;ViewListItems, Open, ViewPages&quot;&#xD;&#xA;    $rootWeb.RoleDefinitions.Add($spRoleDefinition)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# loop through all spsites in the specified web application and exclude the urls located under $excludeUrl&#xD;&#xA;Get-SPWebApplication $webApplication | Get-SPSite -Limit All | where { $excludeUrl -notcontains $_.Url } | Foreach-Object  {&#xD;&#xA;    # get the user of the web and verify in the links list of the directory if there is already an entry&#xD;&#xA;    $myWeb = Get-SPWeb $_.Url&#xD;&#xA;    $query=new-object Microsoft.SharePoint.SPQuery&#xD;&#xA;    $caml = '&lt;Where&gt;&#xD;&#xA;                &lt;BeginsWith&gt;&#xD;&#xA;                    &lt;FieldRef Name=&quot;URL&quot;/&gt;&#xD;&#xA;                        &lt;Value Type=&quot;URL&quot;&gt;{0}&lt;/Value&gt;&#xD;&#xA;                &lt;/BeginsWith&gt;&#xD;&#xA;             &lt;/Where&gt;' -f $myWeb.ServerRelativeUrl&#xD;&#xA;&#xD;&#xA;    $query.Query=$caml&#xD;&#xA;    $items = $list.GetItems($query);&#xD;&#xA;    &#xD;&#xA;    # if one or more items are returned, modify them accordingly. else create a new entry in the directory&#xD;&#xA;    if ($items.Count -gt 0) {&#xD;&#xA;        $items | ForEach-Object {&#xD;&#xA;            $listItem = $_&#xD;&#xA;            &#xD;&#xA;            # modify the exiting item url by specifying the url and title of the web&#xD;&#xA;            $listItem[&quot;URL&quot;] = '{0}, {1}' -f $myWeb.Url, $myWeb.Title&#xD;&#xA;            $listItem.Update()&#xD;&#xA;            &#xD;&#xA;            # re-assign the permissions to this item for security trimming&#xD;&#xA;            AssignPermissions $myWeb $listItem&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        # create a new item and assign the url and title of the current web&#xD;&#xA;        $listItem = $list.Items.Add()&#xD;&#xA;        $listItem[&quot;URL&quot;] = '{0}, {1}' -f $myWeb.Url, $myWeb.Title&#xD;&#xA;        $listItem.Update()&#xD;&#xA;        &#xD;&#xA;        # assign the permissions to this item for security trimming&#xD;&#xA;        AssignPermissions $myWeb $listItem&#xD;&#xA;    }&#xD;&#xA;}" />
</CodeSnippets>