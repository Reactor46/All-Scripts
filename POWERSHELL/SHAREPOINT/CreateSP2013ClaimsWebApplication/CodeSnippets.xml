<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="$ver = $host | select version&#xD;&#xA;if($Ver.version.major -gt 1) {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;if(!(Get-PSSnapin Microsoft.SharePoint.PowerShell -ea 0))&#xD;&#xA;{&#xD;&#xA;Write-Progress -Activity &quot;Loading Modules&quot; -Status &quot;Loading Microsoft.SharePoint.PowerShell&quot;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell&#xD;&#xA;}&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Setting Variables&quot;&#xD;&#xA;$WebApplicationURL = &quot;http://Contoso.com&quot;&#xD;&#xA;$WebApplicationName = &quot;Contoso SharePoint Site&quot;&#xD;&#xA;$ContentDatabase = &quot;Contoso_ContentDB&quot;&#xD;&#xA;$ApplicationPoolDisplayName = &quot;SharePoint App Pool&quot;&#xD;&#xA;$ApplicationPoolIdentity = &quot;Contoso\SPAppPool&quot;&#xD;&#xA;$ApplicationPoolPassword = &quot;Pass@word1&quot;&#xD;&#xA;$PortalSuperReader = &quot;i:0#.w|Contoso\SuperReader&quot;&#xD;&#xA;$PortalSuperUser = &quot;i:0#.w|Contoso\SuperUser&quot;&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Loading Functions&quot;&#xD;&#xA;Function CreateClaimsWebApp($WebApplicationName, $WebApplicationURL, $ContentDatabase, $HTTPPort)&#xD;&#xA;{&#xD;&#xA;    if($AppPoolUsed -eq $True)&#xD;&#xA;    {&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Using Application Pool With Existing Web Applications&quot;&#xD;&#xA;        Set-Variable -Name WebApp -Value (New-SPWebApplication -ApplicationPool $ApplicationPoolDisplayName -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader -AuthenticationProvider (New-SPAuthenticationProvider)) -Scope Script&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Configuring Object Cache Accounts&quot;&#xD;&#xA;        SetObjectCache&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Using Application Pool With No Existing Web Applications&quot;&#xD;&#xA;        Set-Variable -Name WebApp -Value (New-SPWebApplication -ApplicationPool $ApplicationPoolDisplayName -ApplicationPoolAccount $AppPoolManagedAccount.Username -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader -AuthenticationProvider (New-SPAuthenticationProvider)) -Scope Script&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Configuring Object Cache Accounts&quot;&#xD;&#xA;        SetObjectCache&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;Function ValidateURL($WebApplicationURL)&#xD;&#xA;{&#xD;&#xA;    if(get-spwebapplication $WebApplicationURL -ErrorAction SilentlyContinue)&#xD;&#xA;    {&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Aborting Process Due To URL Conflict&quot;&#xD;&#xA;        Write-Host &quot;Aborting: Web Application $WebApplicationURL Already Exists&quot; -ForegroundColor Red&#xD;&#xA;        sleep 5&#xD;&#xA;        Set-Variable -Name CriticalError -Value $True&#xD;&#xA;    }&#xD;&#xA;    elseif($WebApplicationURL.StartsWith(&quot;http://&quot;))&#xD;&#xA;        {&#xD;&#xA;            Set-Variable HostHeader -Value ($WebApplicationURL.Substring(7)) -Scope Script&#xD;&#xA;            Set-Variable -Name HTTPPort -Value &quot;80&quot; -Scope Script&#xD;&#xA;        }&#xD;&#xA;        elseif($WebApplicationURL.StartsWith(&quot;https://&quot;))&#xD;&#xA;        {&#xD;&#xA;            Set-Variable HostHeader -Value ($WebApplicationURL.Substring(8)) -Scope Script&#xD;&#xA;            Set-Variable -Name HTTPPort -Value &quot;443&quot; -Scope Script&#xD;&#xA;        }&#xD;&#xA;}&#xD;&#xA;Function ValidateAppPool($AppPoolName, $WebApplicationURL)&#xD;&#xA;{&#xD;&#xA;    $CurrentErrorActionPreference = $ErrorActionPreference&#xD;&#xA;    $ErrorActionPreference = &quot;SilentlyContinue&quot;&#xD;&#xA;    $TestAppPool = Get-WebAppPoolState $AppPoolName&#xD;&#xA;    if(Get-SPServiceApplicationPool $AppPoolName)&#xD;&#xA;    {&#xD;&#xA;        $AppPools = Get-SPWebApplication | select ApplicationPool&#xD;&#xA;        if($AppPools)&#xD;&#xA;        {&#xD;&#xA;            foreach($Pool in $AppPools)&#xD;&#xA;            {&#xD;&#xA;                [Array]$Poolchild = $Poolchild += ($Pool.ApplicationPool.DisplayName)&#xD;&#xA;                if($Poolchild.Contains($ApplicationPoolDisplayName))&#xD;&#xA;                {&#xD;&#xA;                    Set-Variable -Name AppPoolUsed -Value $True -Scope Script&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    Set-Variable -Name AppPoolUsed -Value $False -Scope Script&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        Set-Variable -Name AppPool -Value (Get-SPServiceApplicationPool $AppPoolName) -scope Script&#xD;&#xA;        Set-Variable -Name AppPoolManagedAccount -Value (Get-SPManagedAccount | ? {$_.username -eq ($AppPool.ProcessAccountName)}) -scope Script&#xD;&#xA;    }&#xD;&#xA;    elseif($TestAppPool)&#xD;&#xA;    {&#xD;&#xA;        Write-Host &quot;Aborting: Application Pool $AppPoolName already exists on the server and is not a SharePoint Application Pool `n`rWeb Application `&quot;$WebApplicationURL`&quot; will not be created&quot; -ForegroundColor Red&#xD;&#xA;        Set-Variable -Name CriticalError -Value $True&#xD;&#xA;    }&#xD;&#xA;    elseif(!($TestAppPool))&#xD;&#xA;    {&#xD;&#xA;        validateManagedAccount $ApplicationPoolIdentity&#xD;&#xA;        if($ManagedAccountExists -eq $True)&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Creating New App Pool using Existing Managed Account&quot;&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (Get-SPManagedAccount $ApplicationPoolIdentity | select username) -scope &quot;Script&quot;&#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account $ApplicationPoolIdentity) -scope &quot;Script&quot;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Creating New Managed Account And App Pool&quot;&#xD;&#xA;            $AppPoolCredentials = New-Object System.Management.Automation.PSCredential $ApplicationPoolIdentity, (ConvertTo-SecureString $ApplicationPoolPassword -AsPlainText -Force)&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (New-SPManagedAccount -Credential $AppPoolCredentials) -scope &quot;Script&quot;&#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account (get-spmanagedaccount $ApplicationPoolIdentity)) -scope &quot;Script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    $ErrorActionPreference = $CurrentErrorActionPreference&#xD;&#xA;}&#xD;&#xA;Function ValidateManagedAccount($ApplicationPoolIdentity)&#xD;&#xA;{&#xD;&#xA;    if(Get-SPManagedAccount $ApplicationPoolIdentity -ErrorAction SilentlyContinue)&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name ManagedAccountExists -Value $True -Scope Script&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name ManagedAccountExists -Value $False -Scope Script&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function ClearScriptVariables&#xD;&#xA;{&#xD;&#xA;    $CurrentErrorActionPreference = $ErrorActionPreference&#xD;&#xA;    $ErrorActionPreference = &quot;SilentlyContinue&quot;&#xD;&#xA;    Remove-Variable $CriticalError -ErrorAction SilentlyContinue&#xD;&#xA;    $ErrorActionPreference = $CurrentErrorActionPreference&#xD;&#xA;}&#xD;&#xA;Function SetObjectCache&#xD;&#xA;{&#xD;&#xA;    $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = $PortalSuperUser&#xD;&#xA;    $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = $PortalSuperReader&#xD;&#xA;    $SuperUserPolicy = $WebApp.Policies.Add($PortalSuperUser, &quot;Portal Super User Account&quot;)&#xD;&#xA;    $SuperUserPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl))&#xD;&#xA;    $SuperReaderPolicy = $WebApp.Policies.Add($PortalSuperReader, &quot;Portal Super Reader Account&quot;)&#xD;&#xA;    $SuperReaderPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead))&#xD;&#xA;    $WebApp.Update()&#xD;&#xA;}&#xD;&#xA;ClearScriptVariables&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Validating Web Application URL Variables&quot;&#xD;&#xA;ValidateURL $WebApplicationURL&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Validating Application Pool Variables&quot;&#xD;&#xA;ValidateAppPool $ApplicationPoolDisplayName $WebApplicationURL&#xD;&#xA;if(!($CriticalError))&#xD;&#xA;{&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Creating Claims-Based Web Application&quot;&#xD;&#xA;CreateClaimsWebApp $WebApplicationName $WebApplicationURL $ContentDatabase $HTTPPort&#xD;&#xA;}&#xD;&#xA;" />
  <Code Content="$ver = $host | select version&#xD;&#xA;if($Ver.version.major -gt 1) {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;if(!(Get-PSSnapin Microsoft.SharePoint.PowerShell -ea 0))&#xD;&#xA;{&#xD;&#xA;Write-Progress -Activity &quot;Loading Modules&quot; -Status &quot;Loading Microsoft.SharePoint.PowerShell&quot;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell&#xD;&#xA;}&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Setting Variables&quot;&#xD;&#xA;$WebApplicationURL = &quot;http://Contoso.com&quot;&#xD;&#xA;$WebApplicationName = &quot;Contoso SharePoint Site&quot;&#xD;&#xA;$ContentDatabase = &quot;Contoso_ContentDB&quot;&#xD;&#xA;$ApplicationPoolDisplayName = &quot;SharePoint App Pool&quot;&#xD;&#xA;$ApplicationPoolIdentity = &quot;Contoso\SPAppPool&quot;&#xD;&#xA;$ApplicationPoolPassword = &quot;Pass@word1&quot;&#xD;&#xA;$PortalSuperReader = &quot;i:0#.w|Contoso\SuperReader&quot;&#xD;&#xA;$PortalSuperUser = &quot;i:0#.w|Contoso\SuperUser&quot;&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Loading Functions&quot;&#xD;&#xA;Function CreateClaimsWebApp($WebApplicationName, $WebApplicationURL, $ContentDatabase, $HTTPPort)&#xD;&#xA;{&#xD;&#xA;    if($AppPoolUsed -eq $True)&#xD;&#xA;    {&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Using Application Pool With Existing Web Applications&quot;&#xD;&#xA;        Set-Variable -Name WebApp -Value (New-SPWebApplication -ApplicationPool $ApplicationPoolDisplayName -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader -AuthenticationProvider (New-SPAuthenticationProvider)) -Scope Script&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Configuring Object Cache Accounts&quot;&#xD;&#xA;        SetObjectCache&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Using Application Pool With No Existing Web Applications&quot;&#xD;&#xA;        Set-Variable -Name WebApp -Value (New-SPWebApplication -ApplicationPool $ApplicationPoolDisplayName -ApplicationPoolAccount $AppPoolManagedAccount.Username -Name $WebApplicationName -url $WebApplicationURL -port $HTTPPort -DatabaseName $ContentDatabase -HostHeader $hostHeader -AuthenticationProvider (New-SPAuthenticationProvider)) -Scope Script&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Configuring Object Cache Accounts&quot;&#xD;&#xA;        SetObjectCache&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;Function ValidateURL($WebApplicationURL)&#xD;&#xA;{&#xD;&#xA;    if(get-spwebapplication $WebApplicationURL -ErrorAction SilentlyContinue)&#xD;&#xA;    {&#xD;&#xA;        Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Aborting Process Due To URL Conflict&quot;&#xD;&#xA;        Write-Host &quot;Aborting: Web Application $WebApplicationURL Already Exists&quot; -ForegroundColor Red&#xD;&#xA;        sleep 5&#xD;&#xA;        Set-Variable -Name CriticalError -Value $True&#xD;&#xA;    }&#xD;&#xA;    elseif($WebApplicationURL.StartsWith(&quot;http://&quot;))&#xD;&#xA;        {&#xD;&#xA;            Set-Variable HostHeader -Value ($WebApplicationURL.Substring(7)) -Scope Script&#xD;&#xA;            Set-Variable -Name HTTPPort -Value &quot;80&quot; -Scope Script&#xD;&#xA;        }&#xD;&#xA;        elseif($WebApplicationURL.StartsWith(&quot;https://&quot;))&#xD;&#xA;        {&#xD;&#xA;            Set-Variable HostHeader -Value ($WebApplicationURL.Substring(8)) -Scope Script&#xD;&#xA;            Set-Variable -Name HTTPPort -Value &quot;443&quot; -Scope Script&#xD;&#xA;        }&#xD;&#xA;}&#xD;&#xA;Function ValidateAppPool($AppPoolName, $WebApplicationURL)&#xD;&#xA;{&#xD;&#xA;    $CurrentErrorActionPreference = $ErrorActionPreference&#xD;&#xA;    $ErrorActionPreference = &quot;SilentlyContinue&quot;&#xD;&#xA;    $TestAppPool = Get-WebAppPoolState $AppPoolName&#xD;&#xA;    if(Get-SPServiceApplicationPool $AppPoolName)&#xD;&#xA;    {&#xD;&#xA;        $AppPools = Get-SPWebApplication | select ApplicationPool&#xD;&#xA;        if($AppPools)&#xD;&#xA;        {&#xD;&#xA;            foreach($Pool in $AppPools)&#xD;&#xA;            {&#xD;&#xA;                [Array]$Poolchild = $Poolchild += ($Pool.ApplicationPool.DisplayName)&#xD;&#xA;                if($Poolchild.Contains($ApplicationPoolDisplayName))&#xD;&#xA;                {&#xD;&#xA;                    Set-Variable -Name AppPoolUsed -Value $True -Scope Script&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    Set-Variable -Name AppPoolUsed -Value $False -Scope Script&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        Set-Variable -Name AppPool -Value (Get-SPServiceApplicationPool $AppPoolName) -scope Script&#xD;&#xA;        Set-Variable -Name AppPoolManagedAccount -Value (Get-SPManagedAccount | ? {$_.username -eq ($AppPool.ProcessAccountName)}) -scope Script&#xD;&#xA;    }&#xD;&#xA;    elseif($TestAppPool)&#xD;&#xA;    {&#xD;&#xA;        Write-Host &quot;Aborting: Application Pool $AppPoolName already exists on the server and is not a SharePoint Application Pool `n`rWeb Application `&quot;$WebApplicationURL`&quot; will not be created&quot; -ForegroundColor Red&#xD;&#xA;        Set-Variable -Name CriticalError -Value $True&#xD;&#xA;    }&#xD;&#xA;    elseif(!($TestAppPool))&#xD;&#xA;    {&#xD;&#xA;        validateManagedAccount $ApplicationPoolIdentity&#xD;&#xA;        if($ManagedAccountExists -eq $True)&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Creating New App Pool using Existing Managed Account&quot;&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (Get-SPManagedAccount $ApplicationPoolIdentity | select username) -scope &quot;Script&quot;&#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account $ApplicationPoolIdentity) -scope &quot;Script&quot;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            Write-Host &quot;Creating New Managed Account And App Pool&quot;&#xD;&#xA;            $AppPoolCredentials = New-Object System.Management.Automation.PSCredential $ApplicationPoolIdentity, (ConvertTo-SecureString $ApplicationPoolPassword -AsPlainText -Force)&#xD;&#xA;            Set-Variable -Name AppPoolManagedAccount -Value (New-SPManagedAccount -Credential $AppPoolCredentials) -scope &quot;Script&quot;&#xD;&#xA;            Set-Variable -Name AppPool -Value (New-SPServiceApplicationPool -Name $ApplicationPoolDisplayName -Account (get-spmanagedaccount $ApplicationPoolIdentity)) -scope &quot;Script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    $ErrorActionPreference = $CurrentErrorActionPreference&#xD;&#xA;}&#xD;&#xA;Function ValidateManagedAccount($ApplicationPoolIdentity)&#xD;&#xA;{&#xD;&#xA;    if(Get-SPManagedAccount $ApplicationPoolIdentity -ErrorAction SilentlyContinue)&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name ManagedAccountExists -Value $True -Scope Script&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name ManagedAccountExists -Value $False -Scope Script&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function ClearScriptVariables&#xD;&#xA;{&#xD;&#xA;    $CurrentErrorActionPreference = $ErrorActionPreference&#xD;&#xA;    $ErrorActionPreference = &quot;SilentlyContinue&quot;&#xD;&#xA;    Remove-Variable $CriticalError -ErrorAction SilentlyContinue&#xD;&#xA;    $ErrorActionPreference = $CurrentErrorActionPreference&#xD;&#xA;}&#xD;&#xA;Function SetObjectCache&#xD;&#xA;{&#xD;&#xA;    $WebApp.Properties[&quot;portalsuperuseraccount&quot;] = $PortalSuperUser&#xD;&#xA;    $WebApp.Properties[&quot;portalsuperreaderaccount&quot;] = $PortalSuperReader&#xD;&#xA;    $SuperUserPolicy = $WebApp.Policies.Add($PortalSuperUser, &quot;Portal Super User Account&quot;)&#xD;&#xA;    $SuperUserPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullControl))&#xD;&#xA;    $SuperReaderPolicy = $WebApp.Policies.Add($PortalSuperReader, &quot;Portal Super Reader Account&quot;)&#xD;&#xA;    $SuperReaderPolicy.PolicyRoleBindings.Add($WebApp.PolicyRoles.GetSpecialRole([Microsoft.SharePoint.Administration.SPPolicyRoleType]::FullRead))&#xD;&#xA;    $WebApp.Update()&#xD;&#xA;}&#xD;&#xA;ClearScriptVariables&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Validating Web Application URL Variables&quot;&#xD;&#xA;ValidateURL $WebApplicationURL&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Validating Application Pool Variables&quot;&#xD;&#xA;ValidateAppPool $ApplicationPoolDisplayName $WebApplicationURL&#xD;&#xA;if(!($CriticalError))&#xD;&#xA;{&#xD;&#xA;Write-Progress -Activity &quot;Creating Web Application&quot; -Status &quot;Creating Claims-Based Web Application&quot;&#xD;&#xA;CreateClaimsWebApp $WebApplicationName $WebApplicationURL $ContentDatabase $HTTPPort&#xD;&#xA;}&#xD;&#xA;" />
</CodeSnippets>