<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="$ver = $host | select version&#xD;&#xA;if($Ver.version.major -gt 1) {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;if(!(Get-PSSnapin Microsoft.SharePoint.PowerShell -ea 0))&#xD;&#xA;{&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#How to Use This Script&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;#Edit the varialbes in the variables section&#xD;&#xA;#Copy the following block of code for each library you will want to Extract&#xD;&#xA;#Paste the block of code at the bottom of the script.  Modify it to suit your needs&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;#Create a directory at the specified location.  In this example, a directory will be made beneath the root directory and will be named StyleLibrary&#xD;&#xA;#New-Item -Path ($Directory + &quot;\StyleLibrary&quot;) -ItemType Directory&#xD;&#xA;&#xD;&#xA;#Retrieve a list with the specified title, and assign it to a variable.  The variable name is not important, as long as the correct variable is passed to the ExportFiles Function&#xD;&#xA;#$StyleLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Style Library&quot;}&#xD;&#xA;&#xD;&#xA;#Export file from the list specified and to the subdirectory specified.&#xD;&#xA;#ExportFiles $StyleLibrary &quot;StyleLibrary&quot;&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Define Variables&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;$SiteURL = &quot;http://contoso.com&quot;&#xD;&#xA;&#xD;&#xA;$Directory = &quot;c:\ExportFiles\&quot;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Define Functions&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;Function TrimDirectory ($Directory)&#xD;&#xA;{&#xD;&#xA;    if($Directory.EndsWith(&quot;\&quot;))&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name Directory -Value ($Directory.Substring(0, ($Directory.Length -1))) -Scope Script&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function EnsureDirectory ($Directory)&#xD;&#xA;{&#xD;&#xA;    if(!(Test-Path $Directory))&#xD;&#xA;    {&#xD;&#xA;        TrimDirectory $Directory&#xD;&#xA;                &#xD;&#xA;        New-Item -Path $Directory -ItemType Directory&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function ExportFiles ($SPList, $GalleryName)&#xD;&#xA;{&#xD;&#xA;    EnsureDirectory ($Directory + &quot;\&quot; + $GalleryName)&#xD;&#xA;    &#xD;&#xA;    foreach ($file in $SPlist.rootfolder.files)&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        $DestinationFile = ($Directory + &quot;\$GalleryName\&quot; + $file.name)&#xD;&#xA;        &#xD;&#xA;        $FileBinary = $file.OpenBinary()&#xD;&#xA;&#xD;&#xA;        $FileStream = New-Object System.IO.FileStream($DestinationFile), Create&#xD;&#xA;&#xD;&#xA;        $Writer = New-Object System.IO.BinaryWriter($FileStream)&#xD;&#xA;&#xD;&#xA;        $Writer.write($FileBinary)&#xD;&#xA;&#xD;&#xA;        $Writer.close()&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    foreach($Folder in $SPList.Folders)&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        if($ParentFolderURL)&#xD;&#xA;        {&#xD;&#xA;            Remove-Variable ParentFolderURL&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        $i = 0&#xD;&#xA;    &#xD;&#xA;        $folderURL = $Folder.url.split(&quot;/&quot;)&#xD;&#xA;    &#xD;&#xA;        while($I -lt ($FolderURL.count -1))&#xD;&#xA;        {&#xD;&#xA;            $ParentFolderURL = &quot;$ParentFolderURL/&quot; + $FolderURL[$I]&#xD;&#xA;            $I++&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $DownloadDirectory = ($Directory + &quot;\$GalleryName\&quot; + $Folder.url.substring($SPList.RootFolder.Url.Length)) -replace &quot;/&quot;, &quot;\&quot;&#xD;&#xA;        &#xD;&#xA;        EnsureDirectory $DownloadDirectory&#xD;&#xA;        &#xD;&#xA;        foreach ($File in $Folder.Folder.Files)&#xD;&#xA;        {&#xD;&#xA;            $DestinationFile = ($Directory + &quot;\$GalleryName\&quot; + $Folder.url.Substring($SPList.Rootfolder.URL.Length) + &quot;\&quot; + $file.name) -replace &quot;/&quot;, &quot;\&quot;&#xD;&#xA;            &#xD;&#xA;            $FileBinary = $file.OpenBinary()&#xD;&#xA;&#xD;&#xA;            $FileStream = New-Object System.IO.FileStream($DestinationFile), Create&#xD;&#xA;&#xD;&#xA;            $Writer = New-Object System.IO.BinaryWriter($FileStream)&#xD;&#xA;&#xD;&#xA;            $Writer.write($FileBinary)&#xD;&#xA;&#xD;&#xA;            $Writer.close()&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Start Script&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;TrimDirectory $Directory&#xD;&#xA;&#xD;&#xA;EnsureDirectory $Directory&#xD;&#xA;&#xD;&#xA;$Site = Get-SPSite $SiteURL&#xD;&#xA;&#xD;&#xA;New-Item -Path ($Directory + &quot;\MasterPageGallery&quot;) -ItemType Directory&#xD;&#xA;$MasterPageGallery = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Master Page Gallery&quot;}&#xD;&#xA;ExportFiles $MasterPageGallery &quot;MasterPageGallery&quot;&#xD;&#xA;&#xD;&#xA;New-Item -Path ($Directory + &quot;\StyleLibrary&quot;) -ItemType Directory&#xD;&#xA;$StyleLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Style Library&quot;}&#xD;&#xA;ExportFiles $StyleLibrary &quot;StyleLibrary&quot;&#xD;&#xA;" />
  <Code Content="$ver = $host | select version&#xD;&#xA;if($Ver.version.major -gt 1) {$Host.Runspace.ThreadOptions = &quot;ReuseThread&quot;}&#xD;&#xA;if(!(Get-PSSnapin Microsoft.SharePoint.PowerShell -ea 0))&#xD;&#xA;{&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#How to Use This Script&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;#Edit the varialbes in the variables section&#xD;&#xA;#Copy the following block of code for each library you will want to Extract&#xD;&#xA;#Paste the block of code at the bottom of the script.  Modify it to suit your needs&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;#Create a directory at the specified location.  In this example, a directory will be made beneath the root directory and will be named StyleLibrary&#xD;&#xA;#New-Item -Path ($Directory + &quot;\StyleLibrary&quot;) -ItemType Directory&#xD;&#xA;&#xD;&#xA;#Retrieve a list with the specified title, and assign it to a variable.  The variable name is not important, as long as the correct variable is passed to the ExportFiles Function&#xD;&#xA;#$StyleLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Style Library&quot;}&#xD;&#xA;&#xD;&#xA;#Export file from the list specified and to the subdirectory specified.&#xD;&#xA;#ExportFiles $StyleLibrary &quot;StyleLibrary&quot;&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Define Variables&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;$SiteURL = &quot;http://contoso.com&quot;&#xD;&#xA;&#xD;&#xA;$Directory = &quot;c:\ExportFiles\&quot;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Define Functions&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;Function TrimDirectory ($Directory)&#xD;&#xA;{&#xD;&#xA;    if($Directory.EndsWith(&quot;\&quot;))&#xD;&#xA;    {&#xD;&#xA;        Set-Variable -Name Directory -Value ($Directory.Substring(0, ($Directory.Length -1))) -Scope Script&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function EnsureDirectory ($Directory)&#xD;&#xA;{&#xD;&#xA;    if(!(Test-Path $Directory))&#xD;&#xA;    {&#xD;&#xA;        TrimDirectory $Directory&#xD;&#xA;                &#xD;&#xA;        New-Item -Path $Directory -ItemType Directory&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function ExportFiles ($SPList, $GalleryName)&#xD;&#xA;{&#xD;&#xA;    EnsureDirectory ($Directory + &quot;\&quot; + $GalleryName)&#xD;&#xA;    &#xD;&#xA;    foreach ($file in $SPlist.rootfolder.files)&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        $DestinationFile = ($Directory + &quot;\$GalleryName\&quot; + $file.name)&#xD;&#xA;        &#xD;&#xA;        $FileBinary = $file.OpenBinary()&#xD;&#xA;&#xD;&#xA;        $FileStream = New-Object System.IO.FileStream($DestinationFile), Create&#xD;&#xA;&#xD;&#xA;        $Writer = New-Object System.IO.BinaryWriter($FileStream)&#xD;&#xA;&#xD;&#xA;        $Writer.write($FileBinary)&#xD;&#xA;&#xD;&#xA;        $Writer.close()&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    foreach($Folder in $SPList.Folders)&#xD;&#xA;    {&#xD;&#xA;        &#xD;&#xA;        if($ParentFolderURL)&#xD;&#xA;        {&#xD;&#xA;            Remove-Variable ParentFolderURL&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        $i = 0&#xD;&#xA;    &#xD;&#xA;        $folderURL = $Folder.url.split(&quot;/&quot;)&#xD;&#xA;    &#xD;&#xA;        while($I -lt ($FolderURL.count -1))&#xD;&#xA;        {&#xD;&#xA;            $ParentFolderURL = &quot;$ParentFolderURL/&quot; + $FolderURL[$I]&#xD;&#xA;            $I++&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        $DownloadDirectory = ($Directory + &quot;\$GalleryName\&quot; + $Folder.url.substring($SPList.RootFolder.Url.Length)) -replace &quot;/&quot;, &quot;\&quot;&#xD;&#xA;        &#xD;&#xA;        EnsureDirectory $DownloadDirectory&#xD;&#xA;        &#xD;&#xA;        foreach ($File in $Folder.Folder.Files)&#xD;&#xA;        {&#xD;&#xA;            $DestinationFile = ($Directory + &quot;\$GalleryName\&quot; + $Folder.url.Substring($SPList.Rootfolder.URL.Length) + &quot;\&quot; + $file.name) -replace &quot;/&quot;, &quot;\&quot;&#xD;&#xA;            &#xD;&#xA;            $FileBinary = $file.OpenBinary()&#xD;&#xA;&#xD;&#xA;            $FileStream = New-Object System.IO.FileStream($DestinationFile), Create&#xD;&#xA;&#xD;&#xA;            $Writer = New-Object System.IO.BinaryWriter($FileStream)&#xD;&#xA;&#xD;&#xA;            $Writer.write($FileBinary)&#xD;&#xA;&#xD;&#xA;            $Writer.close()&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;##&#xD;&#xA;#Start Script&#xD;&#xA;##&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;TrimDirectory $Directory&#xD;&#xA;&#xD;&#xA;EnsureDirectory $Directory&#xD;&#xA;&#xD;&#xA;$Site = Get-SPSite $SiteURL&#xD;&#xA;&#xD;&#xA;New-Item -Path ($Directory + &quot;\MasterPageGallery&quot;) -ItemType Directory&#xD;&#xA;$MasterPageGallery = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Master Page Gallery&quot;}&#xD;&#xA;ExportFiles $MasterPageGallery &quot;MasterPageGallery&quot;&#xD;&#xA;&#xD;&#xA;New-Item -Path ($Directory + &quot;\StyleLibrary&quot;) -ItemType Directory&#xD;&#xA;$StyleLibrary = $Site.RootWeb.Lists | ? {$_.title -eq &quot;Style Library&quot;}&#xD;&#xA;ExportFiles $StyleLibrary &quot;StyleLibrary&quot;&#xD;&#xA;" />
</CodeSnippets>