<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;##############################################################################&#xD;&#xA;This script creates enterprise search service application in the current &#xD;&#xA;SharePoint 2013 farm. &#xD;&#xA;&#xD;&#xA;Assumptions: 1. Index partition will be created as locally on the server. So &#xD;&#xA;run this script on server, which will host search admin component.&#xD;&#xA;2. The service account for application pool, has been registered under managed &#xD;&#xA;accounts in SP farm.&#xD;&#xA;3. Current logged-in user has required privileges to create search service &#xD;&#xA;application&#xD;&#xA;################################################################################&gt;&#xD;&#xA;&#xD;&#xA;#Specify Settings for the search service configuration.&#xD;&#xA;#Specify the directory to store search index data. This directory should not contain any data.&#xD;&#xA;$IndexLocation = &quot;D:\SearchIndex” &#xD;&#xA;&#xD;&#xA;#Specify the search application pool name. &#xD;&#xA;#You can have a new pool or specify any existing one, too.&#xD;&#xA;$SearchAppPoolName = &quot;SearchSvcAppPool&quot; &#xD;&#xA;&#xD;&#xA;#Specify the service account for application pool, in case you want to have a &#xD;&#xA;#n ew application pool. Else this value will not be  used.&#xD;&#xA;$SearchAppPoolAccountName = &quot;contoso\spsearchpool&quot; &#xD;&#xA;$SearchServerName = (Get-ChildItem env:computername).value &#xD;&#xA;&#xD;&#xA;#Specify the name for search service application and application proxy&#xD;&#xA;$SearchServiceName = &quot;Contoso Search Service Application&quot; &#xD;&#xA;$SearchServiceProxyName = &quot;Contoso Search Service Application Proxy&quot;&#xD;&#xA;&#xD;&#xA;#Specify the prefix for database names. Pls note that there will be 4 databases created &#xD;&#xA;# starting with this as prefix. Also they will not have any GUID's in their names. &#xD;&#xA;$DatabaseName = &quot;Contoso_SearchService_Dev&quot; &#xD;&#xA;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;Try{&#xD;&#xA;    Start-SPAssignment -Global&#xD;&#xA;&#xD;&#xA;    #Check if application pool already exist. If not, create a new one.&#xD;&#xA;    Write-Output &quot;Checking if Search Application Pool exists...&quot; &#xD;&#xA;    $SearchServiceAppPool = Get-SPServiceApplicationPool -Identity $SearchAppPoolName -ErrorAction SilentlyContinue&#xD;&#xA;    if ($SearchServiceAppPool -eq $null){ &#xD;&#xA;        Write-Output &quot;Creating Search Application Pool&quot;&#xD;&#xA;        $SearchServiceAppPool = New-SPServiceApplicationPool -Name $SearchAppPoolName -Account $SearchAppPoolAccountName -Verbose&#xD;&#xA;        if(-not $?){&#xD;&#xA;            throw &quot;Failed to create service application pool. Pls check if this account is added to managed accounts and this console is running in admin mode.&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Starts the Search Service Instance on the specified Server&#xD;&#xA;    Write-Output &quot;Start Search Service instance on this server...&quot; &#xD;&#xA;    Start-SPEnterpriseSearchServiceInstance $SearchServerName&#xD;&#xA;    Start-SPEnterpriseSearchQueryAndSiteSettingsServiceInstance $SearchServerName&#xD;&#xA;    $Instance = Get-SPEnterpriseSearchServiceInstance -Identity $SearchServerName&#xD;&#xA;    sleep 60&#xD;&#xA;    if($Instance.Status -ne &quot;Online&quot;){&#xD;&#xA;        Write-Output &quot;Waiting for 60 seconds for instance to come online...&quot;&#xD;&#xA;        sleep 60&#xD;&#xA;        for ($Count=1;$Count -lt 5;$Count++){&#xD;&#xA;            $Instance = Get-SPEnterpriseSearchServiceInstance -Identity $SearchServerName&#xD;&#xA;            if($Instance.Status -ne &quot;Online&quot;){&#xD;&#xA;                Write-Output &quot;Waiting for another 60 seconds...&quot;&#xD;&#xA;                sleep 60&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;                $Count = 6&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if($Count -eq 5){&#xD;&#xA;            throw &quot;Failed to start search service instance on server. Pls start manually and run script again&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Check if Search Service Application already exist. If not, create a new one.&#xD;&#xA;    Write-Output &quot;Checking if Search Service Application exists&quot; &#xD;&#xA;    $ServiceApplication = Get-SPEnterpriseSearchServiceApplication -Identity $SearchServiceName -ErrorAction SilentlyContinue&#xD;&#xA;    if ($ServiceApplication -eq $null){ &#xD;&#xA;        Write-Output &quot;Creating Search Service Application...&quot; &#xD;&#xA;        $ServiceApplication = New-SPEnterpriseSearchServiceApplication -Partitioned -Name $SearchServiceName -ApplicationPool $SearchServiceAppPool.Name -DatabaseName $DatabaseName -Verbose&#xD;&#xA;        if(-not $?){&#xD;&#xA;            throw &quot;Failed to create search service application. Pls check for errors manually.&quot;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Check if Search Service Application Proxy already exist. If not, create a new one.&#xD;&#xA;    Write-Output &quot;Checking if Search Service Application Proxy exists&quot; &#xD;&#xA;    $Proxy = Get-SPEnterpriseSearchServiceApplicationProxy -Identity $SearchServiceProxyName -ErrorAction SilentlyContinue&#xD;&#xA;    if ($Proxy -eq $null){ &#xD;&#xA;        Write-Output &quot;Creating Search Service Application Proxy&quot; &#xD;&#xA;        New-SPEnterpriseSearchServiceApplicationProxy -Partitioned -Name $SearchServiceProxyName -SearchApplication $ServiceApplication -Verbose&#xD;&#xA;        if(-not $?){&#xD;&#xA;            throw &quot;Failed to create search service application. Pls check for errors manually.&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Checks if index directory already exists. If yes, removes it and all sub-directories and files. If not, creates it.&#xD;&#xA;    Remove-Item -Recurse -Force -LiteralPath $IndexLocation -ErrorAction SilentlyContinue &#xD;&#xA;    New-Item -ItemType Directory -Path $IndexLocation -Force&#xD;&#xA;&#xD;&#xA;    # Clone the default Topology (which is empty) and create a new one and then activate it &#xD;&#xA;    Write-Output &quot;Configuring Search Component Topology....&quot; &#xD;&#xA;    $ClonedTopology = $ServiceApplication.ActiveTopology.Clone() &#xD;&#xA;    $SSI = Get-SPEnterpriseSearchServiceInstance -local &#xD;&#xA;    New-SPEnterpriseSearchAdminComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchContentProcessingComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchAnalyticsProcessingComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchCrawlComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchIndexComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI -RootDirectory $IndexLocation &#xD;&#xA;    New-SPEnterpriseSearchQueryProcessingComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    &#xD;&#xA;    #Sets new topology as active one&#xD;&#xA;    Write-Output &quot;Setting new search topology as active...&quot;&#xD;&#xA;    Set-SPEnterpriseSearchTopology -Identity $ClonedTopology&#xD;&#xA;&#xD;&#xA;    #Displays Current topology components to user&#xD;&#xA;    Write-Output &quot;&quot;&#xD;&#xA;    Write-Output &quot;Here are the current search components:&quot;&#xD;&#xA;    $ActiveToplogy = Get-SPEnterpriseSearchTopology -Active -SearchApplication $ServiceApplication&#xD;&#xA;    Get-SPEnterpriseSearchComponent -SearchTopology $ActiveToplogy    &#xD;&#xA;}&#xD;&#xA;Catch{&#xD;&#xA;    Write-Error &quot;Exception Type: $($_.Exception.GetType().FullName)&quot;&#xD;&#xA;    Write-Error &quot;Exception Message: $($_.Exception.Message)&quot;&#xD;&#xA;}&#xD;&#xA;finally{&#xD;&#xA;    Stop-SPAssignment -Global&#xD;&#xA;&#xD;&#xA;    Write-Output &quot;&quot;&#xD;&#xA;    Write-Output &quot;Script Execution finished&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;###############################################################################&#xD;&#xA;End of Script&#xD;&#xA;###############################################################################&gt;" />
  <Code Content="&lt;##############################################################################&#xD;&#xA;This script creates enterprise search service application in the current &#xD;&#xA;SharePoint 2013 farm. &#xD;&#xA;&#xD;&#xA;Assumptions: 1. Index partition will be created as locally on the server. So &#xD;&#xA;run this script on server, which will host search admin component.&#xD;&#xA;2. The service account for application pool, has been registered under managed &#xD;&#xA;accounts in SP farm.&#xD;&#xA;3. Current logged-in user has required privileges to create search service &#xD;&#xA;application&#xD;&#xA;################################################################################&gt;&#xD;&#xA;&#xD;&#xA;#Specify Settings for the search service configuration.&#xD;&#xA;#Specify the directory to store search index data. This directory should not contain any data.&#xD;&#xA;$IndexLocation = &quot;D:\SearchIndex” &#xD;&#xA;&#xD;&#xA;#Specify the search application pool name. &#xD;&#xA;#You can have a new pool or specify any existing one, too.&#xD;&#xA;$SearchAppPoolName = &quot;SearchSvcAppPool&quot; &#xD;&#xA;&#xD;&#xA;#Specify the service account for application pool, in case you want to have a &#xD;&#xA;#n ew application pool. Else this value will not be  used.&#xD;&#xA;$SearchAppPoolAccountName = &quot;contoso\spsearchpool&quot; &#xD;&#xA;$SearchServerName = (Get-ChildItem env:computername).value &#xD;&#xA;&#xD;&#xA;#Specify the name for search service application and application proxy&#xD;&#xA;$SearchServiceName = &quot;Contoso Search Service Application&quot; &#xD;&#xA;$SearchServiceProxyName = &quot;Contoso Search Service Application Proxy&quot;&#xD;&#xA;&#xD;&#xA;#Specify the prefix for database names. Pls note that there will be 4 databases created &#xD;&#xA;# starting with this as prefix. Also they will not have any GUID's in their names. &#xD;&#xA;$DatabaseName = &quot;Contoso_SearchService_Dev&quot; &#xD;&#xA;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;Try{&#xD;&#xA;    Start-SPAssignment -Global&#xD;&#xA;&#xD;&#xA;    #Check if application pool already exist. If not, create a new one.&#xD;&#xA;    Write-Output &quot;Checking if Search Application Pool exists...&quot; &#xD;&#xA;    $SearchServiceAppPool = Get-SPServiceApplicationPool -Identity $SearchAppPoolName -ErrorAction SilentlyContinue&#xD;&#xA;    if ($SearchServiceAppPool -eq $null){ &#xD;&#xA;        Write-Output &quot;Creating Search Application Pool&quot;&#xD;&#xA;        $SearchServiceAppPool = New-SPServiceApplicationPool -Name $SearchAppPoolName -Account $SearchAppPoolAccountName -Verbose&#xD;&#xA;        if(-not $?){&#xD;&#xA;            throw &quot;Failed to create service application pool. Pls check if this account is added to managed accounts and this console is running in admin mode.&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Starts the Search Service Instance on the specified Server&#xD;&#xA;    Write-Output &quot;Start Search Service instance on this server...&quot; &#xD;&#xA;    Start-SPEnterpriseSearchServiceInstance $SearchServerName&#xD;&#xA;    Start-SPEnterpriseSearchQueryAndSiteSettingsServiceInstance $SearchServerName&#xD;&#xA;    $Instance = Get-SPEnterpriseSearchServiceInstance -Identity $SearchServerName&#xD;&#xA;    sleep 60&#xD;&#xA;    if($Instance.Status -ne &quot;Online&quot;){&#xD;&#xA;        Write-Output &quot;Waiting for 60 seconds for instance to come online...&quot;&#xD;&#xA;        sleep 60&#xD;&#xA;        for ($Count=1;$Count -lt 5;$Count++){&#xD;&#xA;            $Instance = Get-SPEnterpriseSearchServiceInstance -Identity $SearchServerName&#xD;&#xA;            if($Instance.Status -ne &quot;Online&quot;){&#xD;&#xA;                Write-Output &quot;Waiting for another 60 seconds...&quot;&#xD;&#xA;                sleep 60&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;                $Count = 6&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if($Count -eq 5){&#xD;&#xA;            throw &quot;Failed to start search service instance on server. Pls start manually and run script again&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Check if Search Service Application already exist. If not, create a new one.&#xD;&#xA;    Write-Output &quot;Checking if Search Service Application exists&quot; &#xD;&#xA;    $ServiceApplication = Get-SPEnterpriseSearchServiceApplication -Identity $SearchServiceName -ErrorAction SilentlyContinue&#xD;&#xA;    if ($ServiceApplication -eq $null){ &#xD;&#xA;        Write-Output &quot;Creating Search Service Application...&quot; &#xD;&#xA;        $ServiceApplication = New-SPEnterpriseSearchServiceApplication -Partitioned -Name $SearchServiceName -ApplicationPool $SearchServiceAppPool.Name -DatabaseName $DatabaseName -Verbose&#xD;&#xA;        if(-not $?){&#xD;&#xA;            throw &quot;Failed to create search service application. Pls check for errors manually.&quot;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Check if Search Service Application Proxy already exist. If not, create a new one.&#xD;&#xA;    Write-Output &quot;Checking if Search Service Application Proxy exists&quot; &#xD;&#xA;    $Proxy = Get-SPEnterpriseSearchServiceApplicationProxy -Identity $SearchServiceProxyName -ErrorAction SilentlyContinue&#xD;&#xA;    if ($Proxy -eq $null){ &#xD;&#xA;        Write-Output &quot;Creating Search Service Application Proxy&quot; &#xD;&#xA;        New-SPEnterpriseSearchServiceApplicationProxy -Partitioned -Name $SearchServiceProxyName -SearchApplication $ServiceApplication -Verbose&#xD;&#xA;        if(-not $?){&#xD;&#xA;            throw &quot;Failed to create search service application. Pls check for errors manually.&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    #Checks if index directory already exists. If yes, removes it and all sub-directories and files. If not, creates it.&#xD;&#xA;    Remove-Item -Recurse -Force -LiteralPath $IndexLocation -ErrorAction SilentlyContinue &#xD;&#xA;    New-Item -ItemType Directory -Path $IndexLocation -Force&#xD;&#xA;&#xD;&#xA;    # Clone the default Topology (which is empty) and create a new one and then activate it &#xD;&#xA;    Write-Output &quot;Configuring Search Component Topology....&quot; &#xD;&#xA;    $ClonedTopology = $ServiceApplication.ActiveTopology.Clone() &#xD;&#xA;    $SSI = Get-SPEnterpriseSearchServiceInstance -local &#xD;&#xA;    New-SPEnterpriseSearchAdminComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchContentProcessingComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchAnalyticsProcessingComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchCrawlComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    New-SPEnterpriseSearchIndexComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI -RootDirectory $IndexLocation &#xD;&#xA;    New-SPEnterpriseSearchQueryProcessingComponent –SearchTopology $ClonedTopology -SearchServiceInstance $SSI &#xD;&#xA;    &#xD;&#xA;    #Sets new topology as active one&#xD;&#xA;    Write-Output &quot;Setting new search topology as active...&quot;&#xD;&#xA;    Set-SPEnterpriseSearchTopology -Identity $ClonedTopology&#xD;&#xA;&#xD;&#xA;    #Displays Current topology components to user&#xD;&#xA;    Write-Output &quot;&quot;&#xD;&#xA;    Write-Output &quot;Here are the current search components:&quot;&#xD;&#xA;    $ActiveToplogy = Get-SPEnterpriseSearchTopology -Active -SearchApplication $ServiceApplication&#xD;&#xA;    Get-SPEnterpriseSearchComponent -SearchTopology $ActiveToplogy    &#xD;&#xA;}&#xD;&#xA;Catch{&#xD;&#xA;    Write-Error &quot;Exception Type: $($_.Exception.GetType().FullName)&quot;&#xD;&#xA;    Write-Error &quot;Exception Message: $($_.Exception.Message)&quot;&#xD;&#xA;}&#xD;&#xA;finally{&#xD;&#xA;    Stop-SPAssignment -Global&#xD;&#xA;&#xD;&#xA;    Write-Output &quot;&quot;&#xD;&#xA;    Write-Output &quot;Script Execution finished&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&lt;###############################################################################&#xD;&#xA;End of Script&#xD;&#xA;###############################################################################&gt;" />
</CodeSnippets>