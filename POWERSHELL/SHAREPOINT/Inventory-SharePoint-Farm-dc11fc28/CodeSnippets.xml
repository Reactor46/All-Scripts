<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;#&#xD;&#xA;&#x9;.author&#xD;&#xA;&#x9;&#x9;James Hammonds, @jameswh3&#xD;&#xA;&#x9;&#x9;The web part inventory section is mostly borrowed from Joe Rodgers&#xD;&#xA;&#x9;.notes&#xD;&#xA;&#x9;&#x9;This script is a collection of functions that will inventory a SharePoint 2007, SharePoint 2010, or SharePoint 2013 (not yet tested, but everything should work) content.  The output is a collection of csv files that can then be ported to Excel, PowerPivot, Access, SQL Server (you get the idea) for futher analysis.  If you so desire, you can selectively inventory subsets of data.&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;.getStarted&#xD;&#xA;&#x9;&#x9;To run the full inventory, load this script in PowerShell, then enter: Run-FullInventory -DestinationFolder &quot;e:\temp&quot; -LogFilePrefix &quot;YourFarm_&quot;&#xD;&#xA;&#x9;&#x9;Just make sure that the destination folder (and drive) has enough space for the log files (gigs in some cases), and that your LogFilePrefix is appropriate&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;function Inventory-SPFarm {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[switch]$InventoryFarmSolutions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryFarmFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebTemplates,&#xD;&#xA;        [switch]$InventoryWebApplications,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentDatabases,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollections,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionAdmins,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebs,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryTimerJobs,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$LogFilePrefix,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;)&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;[System.Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SharePoint&quot;)&#xD;&#xA;&#x9;&#x9;$ContentService = [Microsoft.SharePoint.Administration.SPWebService]::ContentService;&#xD;&#xA;&#x9;&#x9;$getContentDBName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Name&quot;)&#xD;&#xA;&#x9;&#x9;$getContentDBServerName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Server&quot;) &#xD;&#xA;&#x9;&#x9;$farm = [Microsoft.SharePoint.Administration.SPFarm]::Local&#xD;&#xA;&#x9;&#x9;Write-Host &quot;Inventorying $($farm.Name)&quot;&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;Process {&#xD;&#xA;&#x9;&#x9;if ($InventoryFarmFeatures) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPFarmFeatures -farm $farm -logfilename ($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;FarmFeatures.csv&quot;)&#xD;&#xA;&#x9;&#x9;} #if inventoryfarmfeatures&#xD;&#xA;&#x9;&#x9;if ($InventoryFarmSolutions) {&#xD;&#xA;&#x9;&#x9;&#x9;#Inventory Farm Solutions&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPFarmSolutions -farm $farm -logfilename ($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;FarmSolutions.csv&quot;)&#xD;&#xA;&#x9;&#x9;} #if inventoryfarmsolutions&#xD;&#xA;&#x9;&#x9;if ($InventoryWebTemplates) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPWebTemplates -FarmVersion $farm.buildversion.major -lcid &quot;1033&quot; -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;} #if InventoryWebTemplates&#xD;&#xA;&#x9;&#x9;if ($InventoryTimerJobs) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPTimerJobs -logfilename ($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;TimerJobs.csv&quot;)&#xD;&#xA;&#x9;&#x9;} #if InventoryTimerJobs&#xD;&#xA;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebApplications -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollections -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionAdmins -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebPermissions -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;) { &#xD;&#xA;&#x9;&#x9;&#x9;Write-Host &quot;  Inventorying Web Applications in $($farm.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPWebApplications `&#xD;&#xA;                -ContentService $ContentService `&#xD;&#xA;                -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                -DestinationFolder $DestinationFolder `&#xD;&#xA;                -InventorySiteCollections:$InventorySiteCollections `&#xD;&#xA;                -InventorySiteCollectionAdmins:$InventorySiteCollectionAdmins `&#xD;&#xA;                -InventorySiteCollectionFeatures:$InventorySiteCollectionFeatures `&#xD;&#xA;                -InventoryWebPermissions:$InventoryWebPermissions `&#xD;&#xA;                -InventoryWebs:$InventoryWebs `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryWebWorkflowAssociations:$InventoryWebWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventorySiteContentTypes:$InventorySiteContentTypes `&#xD;&#xA;                -InventoryLists:$InventoryLists `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations `&#xD;&#xA;                -InventoryListFields:$InventoryListFields `&#xD;&#xA;                -InventoryListViews:$InventoryListViews `&#xD;&#xA;                -InventoryWebParts:$InventoryWebParts `&#xD;&#xA;                -InventoryWebFeatures:$InventoryWebFeatures `&#xD;&#xA;                -InventoryWebSize:$InventoryWebSize&#xD;&#xA;&#x9;&#x9;} #if inventorywebapplications or child items&#xD;&#xA;&#x9;}#PROCESS&#xD;&#xA;&#x9;End {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFarmSolutions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$farm,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$logfilename&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Solutions in $($farm.Name)&quot;&#xD;&#xA;&#x9;&#x9;$solutions = $farm.Solutions&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SolutionId&quot;,&quot;SolutionDisplayName&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($solution in $solutions) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$solution.ID+'&quot;,&quot;'+$solution.DisplayName+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append &#xD;&#xA;&#x9;&#x9;&#x9;} #foreach solution&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPTimerJobs {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$logfilename&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Timer Jobs in $($farm.Name)&quot;&#xD;&#xA;&#x9;&#x9;$jobs = $farm.timerservice.jobdefinitions&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;JobId&quot;,&quot;JobName&quot;,&quot;JobDisplayName&quot;,&quot;JobSchedule&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($job in $jobs) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$job.ID+'&quot;,&quot;'+$job.Name+'&quot;,&quot;'+$job.DisplayName+'&quot;,&quot;'+$job.Schedule+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append &#xD;&#xA;&#x9;&#x9;&#x9;} #foreach job&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFarmFeatures {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$farm,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$logfilename&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Farm Features in $($farm.Name)&quot; &#xD;&#xA;&#x9;&#x9;$featuredefs = $farm.FeatureDefinitions&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;FeatureId&quot;,&quot;FeatureDisplayName&quot;,&quot;FeatureScope&quot;,&quot;FeatureTypeName&quot;,&quot;SolutionId&quot;,&quot;FeatureTitle&quot;,&quot;ScriptRunDate&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($featuredef in $featuredefs) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#TODO***********************************************resolve TypeName to something more descriptive&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$featuredef.ID+'&quot;,&quot;'+$featuredef.DisplayName+'&quot;,&quot;'+$featuredef.Scope+'&quot;,&quot;'+$featuredef.TypeName+'&quot;,&quot;'+$featuredef.SolutionId+'&quot;,&quot;'+$featuredef.Title+'&quot;,&quot;'+$now+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File  $logfilename -append &#xD;&#xA;&#x9;&#x9;&#x9;}  #foreach featuredef&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPWebTemplates {&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;$FarmVersion=&quot;12&quot;,&#xD;&#xA;&#x9;&#x9;$lcid=&quot;1033&quot;,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$templateFiles=get-childitem &quot;C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\$farmVersion\TEMPLATE\$lcid\XML&quot; -filter &quot;webtemp*.xml&quot;&#xD;&#xA;&#x9;&#x9;$Area=&quot;WebTemplates&quot;&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Web Templates&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebTemplates.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;TemplateName&quot;,&quot;TemplateID&quot;,&quot;TemplateFileName&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($tf in $templateFiles) {&#xD;&#xA;&#x9;&#x9;&#x9;$fileName=$tf.Name&#xD;&#xA;            WRITE-HOST &quot;Processing $($tf.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;[xml]$xml=(get-content $tf.fullname)&#xD;&#xA;&#x9;&#x9;&#x9;$templates=$xml.Templates.template&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($t in $templates) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;write-host &quot;  $($t.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$t.Name+'&quot;,&quot;'+$t.id+'&quot;,&quot;'+$fileName+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPWebApplications  {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$ContentService,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollections,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionAdmins,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebs,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN { &#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;[Microsoft.SharePoint.Administration.SPWebApplicationCollection]$waColl = $ContentService.WebApplications;&#xD;&#xA;&#x9;&#x9;$webApps=$waColl | where-object {$_.IsAdministrationWebApplication -eq $FALSE}&#xD;&#xA;&#x9;&#x9;#set up logfile&#xD;&#xA;        $logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebApplications.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;WebAppUrl&quot;,&quot;WebAppName&quot;,&quot;Farm&quot;,&quot;ScriptRunDate&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Web App&quot;&#xD;&#xA;&#x9;&#x9;foreach ($wa in $webApps) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;    Inventorying Web Application $($wa.alternateurls[0].IncomingUrl)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$wa.Url&#xD;&#xA;                #$wa | get-member | out-gridview&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row = '&quot;'+$wa.alternateurls[0].IncomingUrl+'&quot;,&quot;'+$wa.Name+'&quot;,&quot;'+$($wa.farm.Name)+'&quot;,&quot;'+$now+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollections -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionAdmins -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebPermissions -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteCollections `&#xD;&#xA;                        -WebApp $wa `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;                        -InventorySiteCollectionAdmins:$InventorySiteCollectionAdmins `&#xD;&#xA;                        -InventorySiteCollectionFeatures:$InventorySiteCollectionFeatures `&#xD;&#xA;                        -InventoryWebPermissions:$InventoryWebPermissions `&#xD;&#xA;                        -InventoryWebs:$InventoryWebs `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryWebWorkflowAssociations:$InventoryWebWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventorySiteContentTypes:$InventorySiteContentTypes `&#xD;&#xA;                        -InventoryWebFeatures:$InventoryWebFeatures `&#xD;&#xA;                        -InventoryLists:$InventoryLists `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations `&#xD;&#xA;                        -InventoryListFields:$InventoryListFields `&#xD;&#xA;                        -InventoryListViews:$InventoryListViews `&#xD;&#xA;                        -InventoryWebParts:$InventoryWebParts  `&#xD;&#xA;                        -InventoryWebSize:$InventoryWebSize&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;} #foreach webapp&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END{} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPSiteCollections {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$WebApp,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionAdmins,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebs,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN { &#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;$getContentDBName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Name&quot;)&#xD;&#xA;&#x9;&#x9;$getContentDBServerName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Server&quot;)&#xD;&#xA;&#x9;&#x9;#set up log file&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteCollections.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Site&quot;,&quot;ContentDB&quot;,&quot;ContentDbServer&quot;,&quot;ScriptRunDate&quot;,&quot;LastSiteContentModified&quot;,&quot;SiteGUID&quot;,&quot;Storage&quot;,&quot;Visits&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Collection&quot;&#xD;&#xA;&#x9;&#x9;$sites=$wa.Sites&#xD;&#xA;&#x9;&#x9;Write-Host &quot;      Inventorying Site Collections in $($wa.alternateurls[0].IncomingUrl)&quot;&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($site in $sites) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=$site.Url&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;        Inventorying $($site.url)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$contentDb='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$contentDb = $getContentDBName.Invoke($site.ContentDatabase,&quot;instance,public&quot;, $null, $null, $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$contentDbServer = $getContentDBServerName.Invoke($site.ContentDatabase,&quot;instance,public&quot;, $null, $null, $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;'+$contentDb+'&quot;,&quot;'+$contentDbServer+'&quot;,&quot;'+$now+'&quot;,&quot;'+$site.LastContentModifiedDate+'&quot;,&quot;'+$site.Id+'&quot;,&quot;'+$site.usage.storage+'&quot;,&quot;'+$site.usage.visits+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventorySiteCollectionAdmins) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteCollectionAdmins -Site $site -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventorySiteCollectionAdmins&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventorySiteCollectionFeatures) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteCollectionFeatures -Site $site -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventorySiteCollectionFeatures&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebPermissions -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteContentTypes -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPWebs `&#xD;&#xA;                        -Site $site `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryWebWorkflowAssociations:$InventoryWebWorkflowAssociations `&#xD;&#xA;                        -InventoryWebPermissions:$InventoryWebPermissions `&#xD;&#xA;                        -InventoryWebFeatures:$InventoryWebFeatures `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventorySiteContentTypes:$InventorySiteContentTypes `&#xD;&#xA;                        -InventoryLists:$InventoryLists `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations `&#xD;&#xA;                        -InventoryListFields:$InventoryListFields `&#xD;&#xA;                        -InventoryListViews:$InventoryListViews `&#xD;&#xA;                        -InventoryWebParts:$InventoryWebParts `&#xD;&#xA;                        -InventoryWebSize:$InventoryWebSize&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventorySiteCollectionFeatures&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$site.Dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach site&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPSiteCollectionAdmins {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$site,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Collection Admins&quot;&#xD;&#xA;&#x9;&#x9;Write-Host &quot;          Inventorying Site Collection Admins in $($Site.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteCollectionAdmins.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Site&quot;,&quot;SiteAdmin&quot;,&quot;SiteID&quot;,&quot;ScriptRunDate&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$siteAdmins=$site.RootWeb.SiteAdministrators&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($siteAdmin in $siteAdmins) { &#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$site.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;'+$siteAdmin.LoginName+'&quot;,&quot;'+$site.ID+'&quot;,&quot;'+$now+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach site admin&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$site.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;function Inventory-SPSiteCollectionFeatures {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$Site,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Collection Features&quot;&#xD;&#xA;&#x9;&#x9;Write-Host &quot;          Inventorying Site Collection Features in $($Site.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteCollectionFeatures.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SiteCollection&quot;,&quot;WebUrl&quot;,&quot;ScriptRunDate&quot;,&quot;FeatureID&quot;,&quot;SearchedScope&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$features=$site.Features&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($feature in $features) { &#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$site.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;NA&quot;,&quot;'+$now+'&quot;,&quot;'+$feature.DefinitionId+'&quot;,&quot;Site&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach site admin&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$site.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;  &#xD;&#xA;function Inventory-SPWebs {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$Site,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Web&quot;&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;          Inventorying Webs in $($Site.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;Webs.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SiteCollection&quot;,&quot;WebTemplate&quot;,&quot;WebTemplateID&quot;,&quot;WebUrl&quot;,&quot;WebTheme&quot;,&quot;WebIsRoot&quot;,&quot;WebLastItemModifiedDate&quot;,&quot;ScriptRunDate&quot;,&quot;WebGUID&quot;,&quot;SiteGUID&quot;,&quot;ParentWebGUID&quot;,&quot;WebSize&quot;,&quot;UIVersion&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$webs=$Site.AllWebs&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($web in $webs) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;            Inventorying Web $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$websize=$null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$web.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebSize) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$websize=(Get-SPWebSize -web $web -includesubwebs $false)/1MB&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if inventorywebsize&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;'+$web.WebTemplate+'&quot;,&quot;'+$web.WebTemplateId+'&quot;,&quot;'+$web.Url+'&quot;,&quot;'+$web.Theme+'&quot;,&quot;'+$web.IsRootWeb+'&quot;,&quot;'+$web.LastItemModifiedDate+'&quot;,&quot;'+$now+'&quot;,&quot;'+$web.ID+'&quot;,&quot;'+$site.Id+'&quot;,&quot;'+$web.parentweb.id+'&quot;,&quot;'+$websize+'&quot;,&quot;'+$web.UIVersion+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebWorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-WorkflowAssociations -spobject $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebFeatures) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteFeatures -web $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebFeatures&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventorySiteContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#todo look for wf associations at site content type level?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;              Inventorying Content Types in Web $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-ContentTypes -SPObject $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder -InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListcontentTypes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPLists `&#xD;&#xA;                        -web $web `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;                        -InventoryListFields:$InventoryListFields `&#xD;&#xA;                        -InventoryListViews:$InventoryListViews `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryLists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebParts) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPFolders `&#xD;&#xA;                        -folder $web.rootfolder `&#xD;&#xA;                        -fileprocessfunction &quot;Inventory-Webparts&quot; `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebPermissions) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPWebUniquePermissions -web $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPWebUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;)&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Groups&quot;&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying Groups in $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;$groups=$web.sitegroups&#xD;&#xA;&#x9;&#x9;$users=$web.users&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebUniquePermissions.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Location&quot;,&quot;Url&quot;,&quot;GUID&quot;,&quot;ParentID&quot;,&quot;GroupName&quot;,&quot;UserName&quot;,&quot;Roles&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;if ($web.HasUniquePerm) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=$web.Url&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($group in $groups) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$groupName=$group.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#$group&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$roles=$group.roles&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist=$null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach ($role in $roles) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist+=($role.Name + &quot;;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} #foreach role&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach ($member in $group.users) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$userName=$member.loginname&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+&quot;Web&quot;+'&quot;,&quot;'+$web.url+'&quot;,&quot;'+$web.id+'&quot;,&quot;'+$web.parentwebid+'&quot;,&quot;'+$groupName+'&quot;,&quot;'+$userName+'&quot;,&quot;'+$rolelist+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} #foreach groupmember&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach group&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($user in $users) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$groupName=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$userName=$user.loginname&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist=$null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$roles=$user.roles&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach ($role in $roles) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist+=($role.Name + &quot;;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} #foreach role&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+&quot;Web&quot;+'&quot;,&quot;'+$web.url+'&quot;,&quot;'+$web.id+'&quot;,&quot;'+$web.parentwebid+'&quot;,&quot;'+$groupName+'&quot;,&quot;'+$userName+'&quot;,&quot;'+$rolelist+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach user&#xD;&#xA;&#x9;&#x9;} #if web has unique permissions&#xD;&#xA;&#x9;&#x9;Inventory-SPListUniquePermissions -web $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPListUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;List Unique Permissions&quot;&#xD;&#xA;&#x9;&#x9;$lists=$web.lists&#xD;&#xA;&#x9;&#x9;$Location=$web.url&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying List, Item, and Folder Unique Permissions in $($web.url)&quot;&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($list in $lists) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;                if ($list.HasUniqueRoleAssignments) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;$Url = ($list.parentweb.url+$list.url)&#xD;&#xA;                    $Id=$list.id&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;$parentId=$list.parentweb.id&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;$parentWebID=$list.parentweb.id&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;Record-RoleDefinitionBindings `&#xD;&#xA;                        -SPObject $list `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;                        -Location $Area `&#xD;&#xA;                        -Url $Url `&#xD;&#xA;                        -Id $Id `&#xD;&#xA;                        -parentId $parentId `&#xD;&#xA;                        -parentWebId $parentWebId&#xD;&#xA;    &#x9;&#x9;&#x9;} #if unique permissions&#xD;&#xA;            } #try&#xD;&#xA;            catch {&#xD;&#xA;                Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;            } #catch&#xD;&#xA;            finally {&#xD;&#xA;            &#xD;&#xA;            } #finally&#xD;&#xA;        } #foreach list&#xD;&#xA;&#x9;&#x9;Inventory-SPItemUniquePermissions -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;Inventory-SPFolderUniquePermissions -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPItemUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Item Unique Permissions&quot;&#xD;&#xA;&#x9;&#x9;$items=$list.items&#xD;&#xA;&#x9;&#x9;$Location=$list.url&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($items in $items) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($item.HasUniqueRoleAssignments) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Url=($item.parentlist.parentweb.url +&quot;/&quot;+$item.url)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Id=$item.UniqueId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$parentId=$item.parentlist.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$parentWebID=$item.parentlist.parentweb.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Record-RoleDefinitionBindings `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-SPObject $item `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-LogFilePrefix $LogFilePrefix `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-Location $Area `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-Url $Url `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-Id $Id `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-parentId $parentId `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-parentWebId $parentWebId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if unique permissions&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;            catch {&#xD;&#xA;                Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;            } #catch&#xD;&#xA;&#x9;&#x9;} #foreach item&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFolderUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Location=&quot;Folder&quot;&#xD;&#xA;&#x9;&#x9;$folders=$list.folders&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($folder in $folders) {&#xD;&#xA;&#x9;&#x9;&#x9;if ($folder.HasUniqueRoleAssignments) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Url=($folder.parentlist.parentweb.url +&quot;/&quot;+$folder.url)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Id=$folder.UniqueId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$parentId=$folder.parentlist.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$parentWebID=$folder.parentlist.parentweb.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-RoleDefinitionBindings `&#xD;&#xA;                    -SPObject $folder `&#xD;&#xA;                    -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                    -DestinationFolder $DestinationFolder `&#xD;&#xA;                    -Location $Location `&#xD;&#xA;                    -Url $Url `&#xD;&#xA;                    -Id $Id `&#xD;&#xA;                    -parentId $parentId `&#xD;&#xA;                    -parentWebId $parentWebId&#xD;&#xA;&#x9;&#x9;&#x9;} #if unique permissions&#xD;&#xA;&#x9;&#x9;} #foreach folder&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Record-RoleDefinitionBindings {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;        [Parameter(Mandatory=$true)]$SPObject, #can be list,folder,item so it is not strongly typed&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$Location,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$Url,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$Id,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$parentId,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$parentWebId&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;RoleAssignments.csv&quot;)&#xD;&#xA;&#x9;&#x9;$roleAssignment=$SPObject.roleassignments&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Location&quot;,&quot;Url&quot;,&quot;GUID&quot;,&quot;ParentID&quot;,&quot;ParentWebID&quot;,&quot;Member&quot;,&quot;Role&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($roleAssignment in $roleAssignment) {&#xD;&#xA;&#x9;&#x9;&#x9;$member=$roleAssignment.Member&#xD;&#xA;&#x9;&#x9;&#x9;$RoleDefinition=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$roleDefinitionBindings=$roleAssignment.RoleDefinitionBindings&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($roleDefinitionBinding in $roleDefinitionBindings) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$RoleDefinition+=($roleDefinitionBinding.Name + &quot;;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach RoleDefinitionBinding&#xD;&#xA;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;$row='&quot;'+$Location+'&quot;,&quot;'+$Url+'&quot;,&quot;'+$Id+'&quot;,&quot;'+$parentId+'&quot;,&quot;'+$parentWebId+'&quot;,&quot;'+$Member+'&quot;,&quot;'+$RoleDefinition+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;} #foreach RoleAssignment&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPLists {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Lists&quot;&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying Lists in $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;Lists.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;#todo get systemlistproperty if possible&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;ListName&quot;,&quot;RootFolder&quot;,&quot;WebUrl&quot;,&quot;ItemCount&quot;,&quot;ListTemplate&quot;,&quot;ListLastModified&quot;,&quot;EmailAlias&quot;,&quot;EnableVersioning&quot;,&quot;EnableMinorVersions&quot;,&quot;MajorVersionLimit&quot;,&quot;MajorWithMinorVersionsLimit&quot;,ListID&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row |  out-file $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$lists=$web.lists&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($list in $lists) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;write-host &quot;                Inventorying $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisListTitle=$list.title&#xD;&#xA;                $Location=($web.Url+$list.RootFolder)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisListTitle = [regex]::replace($thisListTitle, $Pattern, '')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$thisListTitle+'&quot;,&quot;'+$list.RootFolder+'&quot;,&quot;'+$web.Url+'&quot;,&quot;'+$list.ItemCount+'&quot;,&quot;'+$list.BaseTemplate+'&quot;,&quot;'+$list.LastItemModifiedDate+'&quot;,&quot;'+$list.EmailAlias+'&quot;,&quot;'+$list.EnableVersioning+'&quot;,&quot;'+$list.EnableMinorVersions+'&quot;,&quot;'+$list.MajorVersionLimit+'&quot;,&quot;'+$list.MajorWithMinorVersionsLimit+'&quot;,&quot;'+$list.id+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryListWorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-WorkflowAssociations -spobject $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryListFields) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPListFields -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListFields&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryListViews) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPListViews -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListViews&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;write-host &quot;                  Inventorying Content Types in $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-ContentTypes -SPObject $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder -InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListcontentTypes&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;#$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPListFields {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;ListFields&quot;&#xD;&#xA;        $Location=($list.parentweb.Url+$list.RootFolder)&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;                  Inventorying fields in $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ListFields.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;FieldName&quot;,&quot;ListDefaultUrl&quot;,&quot;ViewUrl&quot;,&quot;WebUrl&quot;,&quot;FieldType&quot;,&quot;ListID&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$fields=$list.fields&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($field in $fields) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisFieldTitle=$field.Title&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisFieldTitle=[regex]::replace($thisFieldTitle, $Pattern, '')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$thisFieldTitle+'&quot;,&quot;'+$list.DefaultViewUrl+'&quot;,&quot;'+$list.DefaultViewUrl+'&quot;,&quot;'+$list.parentweb.Url+'&quot;,&quot;'+$field.TypeAsString+'&quot;,&quot;'+$list.id+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPListViews {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;ListViews&quot;&#xD;&#xA;        $Location=($web.Url+$list.RootFolder)&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;                  Inventorying views in $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ListViews.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;ViewName&quot;,&quot;ListDefaultUrl&quot;,&quot;ViewUrl&quot;,&quot;WebUrl&quot;,&quot;ViewRowlimit&quot;,&quot;ViewPaged&quot;,&quot;ViewType&quot;,&quot;ListID&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$views=$list.views&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($view in $views) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$viewType=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[xml]$viewprop=$view.propertiesXml&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$viewType=$viewprop.View.Type&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisViewTitle=$view.Title&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisViewTitle=[regex]::replace($thisViewTitle, $Pattern, '')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$thisViewTitle+'&quot;,&quot;'+$list.DefaultViewUrl+'&quot;,&quot;'+$view.Url+'&quot;,&quot;'+$web.Url+'&quot;,&quot;'+$view.RowLimit+'&quot;,&quot;'+$view.Paged+'&quot;,&quot;'+$viewType+'&quot;,&quot;'+$list.id+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;function Inventory-SPSiteFeatures {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Features&quot;&#xD;&#xA;&#x9;&#x9;$Location=$web.url&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying Site Features in $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteFeatures.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SiteCollection&quot;,&quot;WebUrl&quot;,&quot;ScriptRunDate&quot;,&quot;FeatureID&quot;,&quot;SearchedScope&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$features=$web.Features&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($feature in $features) { &#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$web.site.Url+'&quot;,&quot;'+$web.url+'&quot;,&quot;'+$now+'&quot;,&quot;'+$feature.DefinitionId+'&quot;,&quot;Web&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach site admin&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;function Record-Error($Location, $Area, $Err, $LogFilePrefix, $DestinationFolder) {&#xD;&#xA;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ErrorFile.txt&quot;)&#xD;&#xA;    write-host &quot;error recorded&quot; -f red&#xD;&#xA;&#x9;$row=&quot;Location:&quot;+$Location&#xD;&#xA;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;$row=&quot;Area:&quot;+$Area&#xD;&#xA;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;$row=&quot;Err:&quot;+$Err&#xD;&#xA;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFolders {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;    param(&#xD;&#xA;    [Parameter(Mandatory=$true)][Microsoft.SharePoint.SPFolder] $folder,&#xD;&#xA;&#x9;[Parameter(Mandatory=$true)]$fileprocessfunction,&#xD;&#xA;    [Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;    [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;    ) #Param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$subfolders=$folder.SubFolders&#xD;&#xA;&#x9;&#x9;$files=$folder.Files&#xD;&#xA;        #$processFiles = (Get-command -name “Inventory-WebParts“ -CommandType Function).ScriptBlock&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;#Write-Host &quot;                  Checking Folder $($folder.Name)&quot;&#xD;&#xA;&#x9;&#x9;foreach($subFolder in $subfolders) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPFolders `&#xD;&#xA;                -folder $subFolder `&#xD;&#xA;                -fileprocessfunction $fileprocessfunction `&#xD;&#xA;                -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;foreach($file in $files) {&#xD;&#xA;            #Write-Host &quot;                    Invoking $fileprocessfunction for $($file.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&amp;$fileprocessfunction -file $file -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;} #foreach file&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-WebParts {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;    param(&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][Microsoft.SharePoint.SPFile] $file,&#xD;&#xA;        [Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$assembly = [System.Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SharePoint&quot;)&#xD;&#xA;        $limitedSPWebPartManager = $assembly.GetType(&quot;Microsoft.SharePoint.WebPartPages.SPLimitedWebPartManager&quot;);&#xD;&#xA;        $spWebPartManager = $assembly.GetType(&quot;Microsoft.SharePoint.WebPartPages.SPWebPartManager&quot;);&#xD;&#xA;        if($file.Name.EndsWith(&quot;.aspx&quot;) -and $file.Exists) {&#xD;&#xA;&#x9;&#x9;&#x9;$limitedWPM = $file.GetLimitedWebPartManager([System.Web.UI.WebControls.WebParts.PersonalizationScope]::Shared)&#xD;&#xA;&#x9;&#x9;&#x9;if( $limitedWPM -ne $null){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebParts.csv&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row = '&quot;WebPartTitle&quot;,&quot;WebPartClosed&quot;,&quot;WebUrl&quot;,&quot;PageUrl&quot;,&quot;BrowseableObject&quot;,&quot;InWPZone&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$webparts=$limitedWPM.WebParts&#xD;&#xA;&#x9;&#x9;&#x9;} #if limited web part manager is not null&#xD;&#xA;&#x9;&#x9;} # if aspx and exists&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;        if( $limitedWPM -ne $null){&#xD;&#xA;    &#x9;&#x9;foreach ($webpart in $webparts) {&#xD;&#xA;                #write-host &quot;Checking $($webpart.title)&quot;&#xD;&#xA;    &#x9;&#x9;&#x9;$bindingFlags = [System.Reflection.BindingFlags]::GetField -bor  [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::NonPublic&#xD;&#xA;    &#x9;&#x9;&#x9;$wpManager = $limitedSPWebPartManager.InvokeMember(&quot;m_manager&quot;, $bindingFlags, $null, $limitedWPM, $null)&#xD;&#xA;    &#x9;&#x9;&#x9;$bindingFlags = [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::InvokeMethod -bor [System.Reflection.BindingFlags]::NonPublic&#xD;&#xA;    &#x9;&#x9;&#x9;$isOnPage = $spWebPartManager.InvokeMember(&quot;IsWebPartOnPage&quot;, $bindingFlags, $null, $wpManager, $webpart)&#xD;&#xA;    &#x9;&#x9;&#x9;try {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;if ($webpart.GetType().AssemblyQualifiedName.StartsWith(&quot;Microsoft.SharePoint.WebPartPages.ErrorWebPart&quot;, [System.StringComparison]::InvariantCultureIgnoreCase)) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;# Broken/Missing Web Part&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = &quot;missing&quot;;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = &quot;Error&quot;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if error web part&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;elseif (!$webpart.GetType().AssemblyQualifiedName.EndsWith(&quot;Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot;,  [System.StringComparison]::InvariantCultureIgnoreCase)) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;# Non-Microsoft assembly&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = $webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = $webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if microsoft assembly&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;elseif ($webpart.IsClosed) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#Closed Web Part&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = $webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = $webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #web part closed&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;elseif (!$isOnPage) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#Web Part Not in WP Manager&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = $webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = $webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if not on page&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;if($assemblyQualifiedName) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle=$webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#TODO************************************************************************************&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#fix relative URL to get the web URL&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle= [regex]::replace($webPartTitle, '&quot;', '')&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row = '&quot;'+$webPartTitle+'&quot;,&quot;'+$webpart.IsClosed+'&quot;,&quot;'+$file.ParentFolder.ParentWeb.Url+'&quot;,&quot;'+$file.Url+'&quot;,&quot;'+$assemblyQualifiedName+'&quot;,&quot;'+$isOnPage+'&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if assemblyqualified name&#xD;&#xA;                    else {&#xD;&#xA;                        if ($webpart.GetType().AssemblyQualifiedName) {&#xD;&#xA;                            $assemblyQualifiedName=$webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $assemblyQualifiedName=&quot;Not Identified&quot;&#xD;&#xA;                        }&#xD;&#xA;                        $webPartTitle=$webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle= [regex]::replace($webPartTitle, '&quot;', '')&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row = '&quot;'+$webPartTitle+'&quot;,&quot;'+$webpart.IsClosed+'&quot;,&quot;'+$file.ParentFolder.ParentWeb.Url+'&quot;,&quot;'+$file.Url+'&quot;,&quot;'+$assemblyQualifiedName+'&quot;,&quot;'+$isOnPage+'&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;                    } #else assemblyqualifiedname&#xD;&#xA;    &#x9;&#x9;&#x9;} #try&#xD;&#xA;    &#x9;&#x9;&#x9;catch {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;#write-host &quot;err&quot;$error[0]&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;# Need to catch this error &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;# The field/property: &quot;ViewId&quot; for type: &quot;Microsoft.SharePoint.Portal.WebControls.CategoryWebPart&quot; differs only &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;# in case from the field/property: &quot;ViewID&quot;. Failed to use non CLS compliant type.&#xD;&#xA;    &#x9;&#x9;&#x9;} #catch&#xD;&#xA;    &#x9;&#x9;&#x9;$assemblyQualifiedName = $null&#xD;&#xA;    &#x9;&#x9;} #foreach webpart&#xD;&#xA;        } #if limitedwpm is not null&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;if ($limitedWPM) {&#xD;&#xA;&#x9;&#x9;&#x9;$limitedWPM.Dispose()&#xD;&#xA;&#x9;&#x9;} #if limitedwpm&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-SPWebSize {&#xD;&#xA;    param (&#xD;&#xA;        $web, &#xD;&#xA;        $indludesubwebs&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;write-host &quot;              Calculating Web Size for $($web.Url)&quot;&#xD;&#xA;        [long]$total = 0;&#xD;&#xA;&#x9;&#x9;$folders=$web.Folders&#xD;&#xA;&#x9;} #begin&#xD;&#xA;    PROCESS {&#xD;&#xA;        foreach ($folder in $folders) {&#xD;&#xA;            $total += Get-SPFolderSize($folder)&#xD;&#xA;        } #foreach folder&#xD;&#xA;        if ($indludesubwebs) {&#xD;&#xA;    &#x9;&#x9;$webs=$web.Webs&#xD;&#xA;            foreach ($subweb in $webs) {&#xD;&#xA;                $total += (Get-SPWebSize -web $subweb -includesubwebs $includesubwebs)&#xD;&#xA;                #$subweb.Dispose()&#xD;&#xA;            }&#xD;&#xA;        } #if includesubwebs&#xD;&#xA;    } #process&#xD;&#xA;    END {&#xD;&#xA;        return $total&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-SPFolderSize {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;    param (&#xD;&#xA;        $folder&#xD;&#xA;    )&#xD;&#xA;    [long]$folderSize = 0&#xD;&#xA;    foreach ($file in $folder.Files) {&#xD;&#xA;        $folderSize += $file.Length; #bytes&#xD;&#xA;    }&#xD;&#xA;    foreach ($subfolder in $folder.SubFolders) {&#xD;&#xA;        $folderSize += Get-SPFolderSize -folder $subfolder&#xD;&#xA;    }    return $folderSize&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-ContentTypes {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;        [Parameter(Mandatory=$true)]$SPObject, #can be site,web or list so it is not strongly typed&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Content Types&quot;&#xD;&#xA;&#x9;&#x9;$Location=$null&#xD;&#xA;&#x9;&#x9;if ($SPObject.Url) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=$SPObject.Url&#xD;&#xA;&#x9;&#x9;} elseif ($SPObject.rootfolder) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=($SPObject.parentweb.Url+$SPObject.RootFolder)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ContentTypes.csv&quot;)&#xD;&#xA;&#x9;&#x9;$contentTypes=$SPObject.ContentTypes&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Location&quot;,&quot;ContentTypeName&quot;,&quot;ContentTypeGUID&quot;,&quot;ParentID&quot;,&quot;ParentWebID&quot;,&quot;Hidden&quot;,&quot;Group&quot;,&quot;Scope&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$objectType=$SPObject.gettype()&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($contentType in $contentTypes) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#Write-Host &quot;                    Logging $($contentType.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$objectType+'&quot;,&quot;'+($contentType.Name)+'&quot;,&quot;'+($contentType.id)+'&quot;,&quot;'+($contentType.parent.id)+'&quot;,&quot;'+($contentType.parentweb.id)+'&quot;,&quot;'+($contentType.Hiddden)+'&quot;,&quot;'+($contentType.Group)+'&quot;,&quot;'+($contentType.Scope)+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryContentTypeWorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-WorkflowAssociations -spobject $contentType -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach content type&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-WorkflowAssociations {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;        [Parameter(Mandatory=$true)]$SPObject, #can be web,content type, or list so it is not strongly typed&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WorkflowAssociations.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;ObjectType&quot;,&quot;WorkflowAssociationName&quot;,&quot;WorkflowAssociationID&quot;,&quot;ParentAssociationId&quot;,&quot;ParentContentType&quot;,&quot;ParentListId&quot;,&quot;ParentSiteId&quot;,&quot;ParentWebId&quot;,&quot;BaseTemplate&quot;,&quot;Enabled&quot;,&quot;RunningInstances&quot;,&quot;WFAParentWebUrl&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$workflowAssociations=$SPObject.WorkflowAssociations&#xD;&#xA;&#x9;&#x9;$objectType=$SPObject.gettype()&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;if ($WorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($wfa in $WorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;                    Logging $($wfa.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$objectType+'&quot;,&quot;'+$wfa.Name+'&quot;,&quot;'+$wfa.id+'&quot;,&quot;'+$wfa.ParentAssociationId+'&quot;,&quot;'+$wfa.ParentContentType+'&quot;,&quot;'+$wfa.ParentList.Id+'&quot;,&quot;'+$wfa.ParentSite.Id+'&quot;,&quot;'+$wfa.ParentWeb.Id+'&quot;,&quot;'+$wfa.BaseTemplate+'&quot;,&quot;'+$wfa.Enabled+'&quot;,&quot;'+$wfa.RunningInstances+'&quot;,&quot;'+$wfa.parentweb.url+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach workflow associations&#xD;&#xA;&#x9;&#x9;} #if WorkflowAssociations&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Run-FullInventory {&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;$LogFilePrefix=&quot;Test_&quot;,&#xD;&#xA;&#x9;&#x9;$DestinationFolder=&quot;d:\temp&quot;,&#xD;&#xA;        [switch]$ClearPriorLogs&#xD;&#xA;&#x9;)&#xD;&#xA;    if ($ClearPriorLogs) {&#xD;&#xA;        get-childitem &quot;$DestinationFolder&quot; -filter ($LogFilePrefix+&quot;*.csv&quot;) | % {remove-item $_.fullname}&#xD;&#xA;&#x9;&#x9;get-childitem &quot;$DestinationFolder&quot; -filter ($LogFilePrefix+&quot;*.txt&quot;) | % {remove-item $_.fullname}&#xD;&#xA;    }&#xD;&#xA;&#x9;inventory-spfarm `&#xD;&#xA;&#x9;&#x9;-LogFilePrefix $LogFilePrefix `&#xD;&#xA;&#x9;&#x9;-DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;-InventoryFarmSolutions `&#xD;&#xA;&#x9;&#x9;-InventoryFarmFeatures `&#xD;&#xA;&#x9;&#x9;-InventoryWebTemplates `&#xD;&#xA;&#x9;&#x9;-InventoryTimerJobs `&#xD;&#xA;&#x9;&#x9;-InventoryWebApplications `&#xD;&#xA;&#x9;&#x9;-InventorySiteCollections `&#xD;&#xA;&#x9;&#x9;-InventorySiteCollectionAdmins `&#xD;&#xA;&#x9;&#x9;-InventorySiteCollectionFeatures `&#xD;&#xA;&#x9;&#x9;-InventoryWebPermissions `&#xD;&#xA;&#x9;&#x9;-InventoryWebs `&#xD;&#xA;&#x9;&#x9;-InventorySiteContentTypes `&#xD;&#xA;&#x9;&#x9;-InventoryWebFeatures `&#xD;&#xA;&#x9;&#x9;-InventoryLists `&#xD;&#xA;&#x9;&#x9;-InventoryWebWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;-InventoryListContentTypes `&#xD;&#xA;        -InventoryListWorkflowAssociations `&#xD;&#xA;        -InventoryContentTypeWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;-InventoryContentDatabases `&#xD;&#xA;&#x9;&#x9;-InventoryListFields `&#xD;&#xA;&#x9;&#x9;-InventoryListViews `&#xD;&#xA;&#x9;&#x9;-InventoryWebParts&#xD;&#xA;}" />
  <Code Content="&lt;#&#xD;&#xA;&#x9;.author&#xD;&#xA;&#x9;&#x9;James Hammonds, @jameswh3&#xD;&#xA;&#x9;&#x9;The web part inventory section is mostly borrowed from Joe Rodgers&#xD;&#xA;&#x9;.notes&#xD;&#xA;&#x9;&#x9;This script is a collection of functions that will inventory a SharePoint 2007, SharePoint 2010, or SharePoint 2013 (not yet tested, but everything should work) content.  The output is a collection of csv files that can then be ported to Excel, PowerPivot, Access, SQL Server (you get the idea) for futher analysis.  If you so desire, you can selectively inventory subsets of data.&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;.getStarted&#xD;&#xA;&#x9;&#x9;To run the full inventory, load this script in PowerShell, then enter: Run-FullInventory -DestinationFolder &quot;e:\temp&quot; -LogFilePrefix &quot;YourFarm_&quot;&#xD;&#xA;&#x9;&#x9;Just make sure that the destination folder (and drive) has enough space for the log files (gigs in some cases), and that your LogFilePrefix is appropriate&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;function Inventory-SPFarm {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[switch]$InventoryFarmSolutions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryFarmFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebTemplates,&#xD;&#xA;        [switch]$InventoryWebApplications,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentDatabases,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollections,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionAdmins,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebs,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryTimerJobs,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$LogFilePrefix,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;)&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;[System.Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SharePoint&quot;)&#xD;&#xA;&#x9;&#x9;$ContentService = [Microsoft.SharePoint.Administration.SPWebService]::ContentService;&#xD;&#xA;&#x9;&#x9;$getContentDBName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Name&quot;)&#xD;&#xA;&#x9;&#x9;$getContentDBServerName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Server&quot;) &#xD;&#xA;&#x9;&#x9;$farm = [Microsoft.SharePoint.Administration.SPFarm]::Local&#xD;&#xA;&#x9;&#x9;Write-Host &quot;Inventorying $($farm.Name)&quot;&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;Process {&#xD;&#xA;&#x9;&#x9;if ($InventoryFarmFeatures) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPFarmFeatures -farm $farm -logfilename ($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;FarmFeatures.csv&quot;)&#xD;&#xA;&#x9;&#x9;} #if inventoryfarmfeatures&#xD;&#xA;&#x9;&#x9;if ($InventoryFarmSolutions) {&#xD;&#xA;&#x9;&#x9;&#x9;#Inventory Farm Solutions&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPFarmSolutions -farm $farm -logfilename ($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;FarmSolutions.csv&quot;)&#xD;&#xA;&#x9;&#x9;} #if inventoryfarmsolutions&#xD;&#xA;&#x9;&#x9;if ($InventoryWebTemplates) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPWebTemplates -FarmVersion $farm.buildversion.major -lcid &quot;1033&quot; -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;} #if InventoryWebTemplates&#xD;&#xA;&#x9;&#x9;if ($InventoryTimerJobs) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPTimerJobs -logfilename ($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;TimerJobs.csv&quot;)&#xD;&#xA;&#x9;&#x9;} #if InventoryTimerJobs&#xD;&#xA;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebApplications -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollections -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionAdmins -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebPermissions -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventorySiteContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;) { &#xD;&#xA;&#x9;&#x9;&#x9;Write-Host &quot;  Inventorying Web Applications in $($farm.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPWebApplications `&#xD;&#xA;                -ContentService $ContentService `&#xD;&#xA;                -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                -DestinationFolder $DestinationFolder `&#xD;&#xA;                -InventorySiteCollections:$InventorySiteCollections `&#xD;&#xA;                -InventorySiteCollectionAdmins:$InventorySiteCollectionAdmins `&#xD;&#xA;                -InventorySiteCollectionFeatures:$InventorySiteCollectionFeatures `&#xD;&#xA;                -InventoryWebPermissions:$InventoryWebPermissions `&#xD;&#xA;                -InventoryWebs:$InventoryWebs `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryWebWorkflowAssociations:$InventoryWebWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventorySiteContentTypes:$InventorySiteContentTypes `&#xD;&#xA;                -InventoryLists:$InventoryLists `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations `&#xD;&#xA;                -InventoryListFields:$InventoryListFields `&#xD;&#xA;                -InventoryListViews:$InventoryListViews `&#xD;&#xA;                -InventoryWebParts:$InventoryWebParts `&#xD;&#xA;                -InventoryWebFeatures:$InventoryWebFeatures `&#xD;&#xA;                -InventoryWebSize:$InventoryWebSize&#xD;&#xA;&#x9;&#x9;} #if inventorywebapplications or child items&#xD;&#xA;&#x9;}#PROCESS&#xD;&#xA;&#x9;End {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFarmSolutions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$farm,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$logfilename&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Solutions in $($farm.Name)&quot;&#xD;&#xA;&#x9;&#x9;$solutions = $farm.Solutions&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SolutionId&quot;,&quot;SolutionDisplayName&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($solution in $solutions) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$solution.ID+'&quot;,&quot;'+$solution.DisplayName+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append &#xD;&#xA;&#x9;&#x9;&#x9;} #foreach solution&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPTimerJobs {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$logfilename&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Timer Jobs in $($farm.Name)&quot;&#xD;&#xA;&#x9;&#x9;$jobs = $farm.timerservice.jobdefinitions&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;JobId&quot;,&quot;JobName&quot;,&quot;JobDisplayName&quot;,&quot;JobSchedule&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($job in $jobs) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$job.ID+'&quot;,&quot;'+$job.Name+'&quot;,&quot;'+$job.DisplayName+'&quot;,&quot;'+$job.Schedule+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append &#xD;&#xA;&#x9;&#x9;&#x9;} #foreach job&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFarmFeatures {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$farm,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$logfilename&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Farm Features in $($farm.Name)&quot; &#xD;&#xA;&#x9;&#x9;$featuredefs = $farm.FeatureDefinitions&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;FeatureId&quot;,&quot;FeatureDisplayName&quot;,&quot;FeatureScope&quot;,&quot;FeatureTypeName&quot;,&quot;SolutionId&quot;,&quot;FeatureTitle&quot;,&quot;ScriptRunDate&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($featuredef in $featuredefs) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#TODO***********************************************resolve TypeName to something more descriptive&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$featuredef.ID+'&quot;,&quot;'+$featuredef.DisplayName+'&quot;,&quot;'+$featuredef.Scope+'&quot;,&quot;'+$featuredef.TypeName+'&quot;,&quot;'+$featuredef.SolutionId+'&quot;,&quot;'+$featuredef.Title+'&quot;,&quot;'+$now+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File  $logfilename -append &#xD;&#xA;&#x9;&#x9;&#x9;}  #foreach featuredef&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END {} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPWebTemplates {&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;$FarmVersion=&quot;12&quot;,&#xD;&#xA;&#x9;&#x9;$lcid=&quot;1033&quot;,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$templateFiles=get-childitem &quot;C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\$farmVersion\TEMPLATE\$lcid\XML&quot; -filter &quot;webtemp*.xml&quot;&#xD;&#xA;&#x9;&#x9;$Area=&quot;WebTemplates&quot;&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;  Inventorying Web Templates&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebTemplates.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;TemplateName&quot;,&quot;TemplateID&quot;,&quot;TemplateFileName&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($tf in $templateFiles) {&#xD;&#xA;&#x9;&#x9;&#x9;$fileName=$tf.Name&#xD;&#xA;            WRITE-HOST &quot;Processing $($tf.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;[xml]$xml=(get-content $tf.fullname)&#xD;&#xA;&#x9;&#x9;&#x9;$templates=$xml.Templates.template&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($t in $templates) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;write-host &quot;  $($t.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$t.Name+'&quot;,&quot;'+$t.id+'&quot;,&quot;'+$fileName+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPWebApplications  {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$ContentService,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollections,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionAdmins,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebs,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN { &#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;[Microsoft.SharePoint.Administration.SPWebApplicationCollection]$waColl = $ContentService.WebApplications;&#xD;&#xA;&#x9;&#x9;$webApps=$waColl | where-object {$_.IsAdministrationWebApplication -eq $FALSE}&#xD;&#xA;&#x9;&#x9;#set up logfile&#xD;&#xA;        $logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebApplications.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;WebAppUrl&quot;,&quot;WebAppName&quot;,&quot;Farm&quot;,&quot;ScriptRunDate&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #BEGIN&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Web App&quot;&#xD;&#xA;&#x9;&#x9;foreach ($wa in $webApps) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;    Inventorying Web Application $($wa.alternateurls[0].IncomingUrl)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$wa.Url&#xD;&#xA;                #$wa | get-member | out-gridview&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row = '&quot;'+$wa.alternateurls[0].IncomingUrl+'&quot;,&quot;'+$wa.Name+'&quot;,&quot;'+$($wa.farm.Name)+'&quot;,&quot;'+$now+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollections -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionAdmins -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteCollectionFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebPermissions -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;) { &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteCollections `&#xD;&#xA;                        -WebApp $wa `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;                        -InventorySiteCollectionAdmins:$InventorySiteCollectionAdmins `&#xD;&#xA;                        -InventorySiteCollectionFeatures:$InventorySiteCollectionFeatures `&#xD;&#xA;                        -InventoryWebPermissions:$InventoryWebPermissions `&#xD;&#xA;                        -InventoryWebs:$InventoryWebs `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryWebWorkflowAssociations:$InventoryWebWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventorySiteContentTypes:$InventorySiteContentTypes `&#xD;&#xA;                        -InventoryWebFeatures:$InventoryWebFeatures `&#xD;&#xA;                        -InventoryLists:$InventoryLists `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations `&#xD;&#xA;                        -InventoryListFields:$InventoryListFields `&#xD;&#xA;                        -InventoryListViews:$InventoryListViews `&#xD;&#xA;                        -InventoryWebParts:$InventoryWebParts  `&#xD;&#xA;                        -InventoryWebSize:$InventoryWebSize&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;} #foreach webapp&#xD;&#xA;&#x9;} #PROCESS&#xD;&#xA;&#x9;END{} #END&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPSiteCollections {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$WebApp,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionAdmins,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteCollectionFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebs,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN { &#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;$getContentDBName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Name&quot;)&#xD;&#xA;&#x9;&#x9;$getContentDBServerName = [Microsoft.SharePoint.Administration.SPContentDatabase].getmethod(&quot;get_Server&quot;)&#xD;&#xA;&#x9;&#x9;#set up log file&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteCollections.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Site&quot;,&quot;ContentDB&quot;,&quot;ContentDbServer&quot;,&quot;ScriptRunDate&quot;,&quot;LastSiteContentModified&quot;,&quot;SiteGUID&quot;,&quot;Storage&quot;,&quot;Visits&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Collection&quot;&#xD;&#xA;&#x9;&#x9;$sites=$wa.Sites&#xD;&#xA;&#x9;&#x9;Write-Host &quot;      Inventorying Site Collections in $($wa.alternateurls[0].IncomingUrl)&quot;&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($site in $sites) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=$site.Url&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;        Inventorying $($site.url)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$contentDb='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$contentDb = $getContentDBName.Invoke($site.ContentDatabase,&quot;instance,public&quot;, $null, $null, $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$contentDbServer = $getContentDBServerName.Invoke($site.ContentDatabase,&quot;instance,public&quot;, $null, $null, $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;'+$contentDb+'&quot;,&quot;'+$contentDbServer+'&quot;,&quot;'+$now+'&quot;,&quot;'+$site.LastContentModifiedDate+'&quot;,&quot;'+$site.Id+'&quot;,&quot;'+$site.usage.storage+'&quot;,&quot;'+$site.usage.visits+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventorySiteCollectionAdmins) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteCollectionAdmins -Site $site -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventorySiteCollectionAdmins&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventorySiteCollectionFeatures) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteCollectionFeatures -Site $site -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventorySiteCollectionFeatures&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebFeatures -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebPermissions -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebs -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventorySiteContentTypes -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPWebs `&#xD;&#xA;                        -Site $site `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryWebWorkflowAssociations:$InventoryWebWorkflowAssociations `&#xD;&#xA;                        -InventoryWebPermissions:$InventoryWebPermissions `&#xD;&#xA;                        -InventoryWebFeatures:$InventoryWebFeatures `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventorySiteContentTypes:$InventorySiteContentTypes `&#xD;&#xA;                        -InventoryLists:$InventoryLists `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations `&#xD;&#xA;                        -InventoryListFields:$InventoryListFields `&#xD;&#xA;                        -InventoryListViews:$InventoryListViews `&#xD;&#xA;                        -InventoryWebParts:$InventoryWebParts `&#xD;&#xA;                        -InventoryWebSize:$InventoryWebSize&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventorySiteCollectionFeatures&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$site.Dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach site&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPSiteCollectionAdmins {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$site,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Collection Admins&quot;&#xD;&#xA;&#x9;&#x9;Write-Host &quot;          Inventorying Site Collection Admins in $($Site.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteCollectionAdmins.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Site&quot;,&quot;SiteAdmin&quot;,&quot;SiteID&quot;,&quot;ScriptRunDate&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$siteAdmins=$site.RootWeb.SiteAdministrators&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($siteAdmin in $siteAdmins) { &#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$site.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;'+$siteAdmin.LoginName+'&quot;,&quot;'+$site.ID+'&quot;,&quot;'+$now+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach site admin&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$site.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;function Inventory-SPSiteCollectionFeatures {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$Site,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Collection Features&quot;&#xD;&#xA;&#x9;&#x9;Write-Host &quot;          Inventorying Site Collection Features in $($Site.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteCollectionFeatures.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SiteCollection&quot;,&quot;WebUrl&quot;,&quot;ScriptRunDate&quot;,&quot;FeatureID&quot;,&quot;SearchedScope&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$features=$site.Features&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($feature in $features) { &#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$site.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;NA&quot;,&quot;'+$now+'&quot;,&quot;'+$feature.DefinitionId+'&quot;,&quot;Site&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach site admin&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$site.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;  &#xD;&#xA;function Inventory-SPWebs {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$Site,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebSize,&#xD;&#xA;&#x9;&#x9;[switch]$InventorySiteContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebPermissions,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebFeatures,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryLists,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryWebParts&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Web&quot;&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;          Inventorying Webs in $($Site.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;Webs.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SiteCollection&quot;,&quot;WebTemplate&quot;,&quot;WebTemplateID&quot;,&quot;WebUrl&quot;,&quot;WebTheme&quot;,&quot;WebIsRoot&quot;,&quot;WebLastItemModifiedDate&quot;,&quot;ScriptRunDate&quot;,&quot;WebGUID&quot;,&quot;SiteGUID&quot;,&quot;ParentWebGUID&quot;,&quot;WebSize&quot;,&quot;UIVersion&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$webs=$Site.AllWebs&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($web in $webs) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;            Inventorying Web $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$websize=$null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Location=$web.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebSize) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$websize=(Get-SPWebSize -web $web -includesubwebs $false)/1MB&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if inventorywebsize&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$site.Url+'&quot;,&quot;'+$web.WebTemplate+'&quot;,&quot;'+$web.WebTemplateId+'&quot;,&quot;'+$web.Url+'&quot;,&quot;'+$web.Theme+'&quot;,&quot;'+$web.IsRootWeb+'&quot;,&quot;'+$web.LastItemModifiedDate+'&quot;,&quot;'+$now+'&quot;,&quot;'+$web.ID+'&quot;,&quot;'+$site.Id+'&quot;,&quot;'+$web.parentweb.id+'&quot;,&quot;'+$websize+'&quot;,&quot;'+$web.UIVersion+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebWorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-WorkflowAssociations -spobject $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebFeatures) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPSiteFeatures -web $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebFeatures&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventorySiteContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#todo look for wf associations at site content type level?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;              Inventorying Content Types in Web $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-ContentTypes -SPObject $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder -InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListcontentTypes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryLists -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListWorkflowAssociations -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListFields -or &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListViews -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPLists `&#xD;&#xA;                        -web $web `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListWorkflowAssociations:$InventoryListWorkflowAssociations `&#xD;&#xA;                        -InventoryListFields:$InventoryListFields `&#xD;&#xA;                        -InventoryListViews:$InventoryListViews `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryListContentTypes:$InventoryListContentTypes `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryLists&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebParts) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPFolders `&#xD;&#xA;                        -folder $web.rootfolder `&#xD;&#xA;                        -fileprocessfunction &quot;Inventory-Webparts&quot; `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryWebPermissions) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPWebUniquePermissions -web $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryWebParts&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPWebUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;)&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Groups&quot;&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying Groups in $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;$groups=$web.sitegroups&#xD;&#xA;&#x9;&#x9;$users=$web.users&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebUniquePermissions.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Location&quot;,&quot;Url&quot;,&quot;GUID&quot;,&quot;ParentID&quot;,&quot;GroupName&quot;,&quot;UserName&quot;,&quot;Roles&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;if ($web.HasUniquePerm) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=$web.Url&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($group in $groups) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$groupName=$group.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#$group&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$roles=$group.roles&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist=$null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach ($role in $roles) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist+=($role.Name + &quot;;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} #foreach role&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach ($member in $group.users) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$userName=$member.loginname&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+&quot;Web&quot;+'&quot;,&quot;'+$web.url+'&quot;,&quot;'+$web.id+'&quot;,&quot;'+$web.parentwebid+'&quot;,&quot;'+$groupName+'&quot;,&quot;'+$userName+'&quot;,&quot;'+$rolelist+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} #foreach groupmember&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach group&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($user in $users) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$groupName=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$userName=$user.loginname&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist=$null&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$roles=$user.roles&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foreach ($role in $roles) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$rolelist+=($role.Name + &quot;;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} #foreach role&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+&quot;Web&quot;+'&quot;,&quot;'+$web.url+'&quot;,&quot;'+$web.id+'&quot;,&quot;'+$web.parentwebid+'&quot;,&quot;'+$groupName+'&quot;,&quot;'+$userName+'&quot;,&quot;'+$rolelist+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach user&#xD;&#xA;&#x9;&#x9;} #if web has unique permissions&#xD;&#xA;&#x9;&#x9;Inventory-SPListUniquePermissions -web $web -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPListUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;List Unique Permissions&quot;&#xD;&#xA;&#x9;&#x9;$lists=$web.lists&#xD;&#xA;&#x9;&#x9;$Location=$web.url&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying List, Item, and Folder Unique Permissions in $($web.url)&quot;&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($list in $lists) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;                if ($list.HasUniqueRoleAssignments) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;$Url = ($list.parentweb.url+$list.url)&#xD;&#xA;                    $Id=$list.id&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;$parentId=$list.parentweb.id&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;$parentWebID=$list.parentweb.id&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;Record-RoleDefinitionBindings `&#xD;&#xA;                        -SPObject $list `&#xD;&#xA;                        -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                        -DestinationFolder $DestinationFolder `&#xD;&#xA;                        -Location $Area `&#xD;&#xA;                        -Url $Url `&#xD;&#xA;                        -Id $Id `&#xD;&#xA;                        -parentId $parentId `&#xD;&#xA;                        -parentWebId $parentWebId&#xD;&#xA;    &#x9;&#x9;&#x9;} #if unique permissions&#xD;&#xA;            } #try&#xD;&#xA;            catch {&#xD;&#xA;                Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;            } #catch&#xD;&#xA;            finally {&#xD;&#xA;            &#xD;&#xA;            } #finally&#xD;&#xA;        } #foreach list&#xD;&#xA;&#x9;&#x9;Inventory-SPItemUniquePermissions -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;Inventory-SPFolderUniquePermissions -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPItemUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Item Unique Permissions&quot;&#xD;&#xA;&#x9;&#x9;$items=$list.items&#xD;&#xA;&#x9;&#x9;$Location=$list.url&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($items in $items) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($item.HasUniqueRoleAssignments) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Url=($item.parentlist.parentweb.url +&quot;/&quot;+$item.url)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Id=$item.UniqueId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$parentId=$item.parentlist.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$parentWebID=$item.parentlist.parentweb.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Record-RoleDefinitionBindings `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-SPObject $item `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-LogFilePrefix $LogFilePrefix `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-Location $Area `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-Url $Url `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-Id $Id `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-parentId $parentId `&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-parentWebId $parentWebId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if unique permissions&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;            catch {&#xD;&#xA;                Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;            } #catch&#xD;&#xA;&#x9;&#x9;} #foreach item&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFolderUniquePermissions {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Location=&quot;Folder&quot;&#xD;&#xA;&#x9;&#x9;$folders=$list.folders&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($folder in $folders) {&#xD;&#xA;&#x9;&#x9;&#x9;if ($folder.HasUniqueRoleAssignments) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Url=($folder.parentlist.parentweb.url +&quot;/&quot;+$folder.url)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Id=$folder.UniqueId&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$parentId=$folder.parentlist.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$parentWebID=$folder.parentlist.parentweb.id&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-RoleDefinitionBindings `&#xD;&#xA;                    -SPObject $folder `&#xD;&#xA;                    -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                    -DestinationFolder $DestinationFolder `&#xD;&#xA;                    -Location $Location `&#xD;&#xA;                    -Url $Url `&#xD;&#xA;                    -Id $Id `&#xD;&#xA;                    -parentId $parentId `&#xD;&#xA;                    -parentWebId $parentWebId&#xD;&#xA;&#x9;&#x9;&#x9;} #if unique permissions&#xD;&#xA;&#x9;&#x9;} #foreach folder&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Record-RoleDefinitionBindings {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;        [Parameter(Mandatory=$true)]$SPObject, #can be list,folder,item so it is not strongly typed&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$Location,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$Url,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$Id,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$parentId,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][string]$parentWebId&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;RoleAssignments.csv&quot;)&#xD;&#xA;&#x9;&#x9;$roleAssignment=$SPObject.roleassignments&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Location&quot;,&quot;Url&quot;,&quot;GUID&quot;,&quot;ParentID&quot;,&quot;ParentWebID&quot;,&quot;Member&quot;,&quot;Role&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($roleAssignment in $roleAssignment) {&#xD;&#xA;&#x9;&#x9;&#x9;$member=$roleAssignment.Member&#xD;&#xA;&#x9;&#x9;&#x9;$RoleDefinition=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$roleDefinitionBindings=$roleAssignment.RoleDefinitionBindings&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($roleDefinitionBinding in $roleDefinitionBindings) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$RoleDefinition+=($roleDefinitionBinding.Name + &quot;;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach RoleDefinitionBinding&#xD;&#xA;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;$row='&quot;'+$Location+'&quot;,&quot;'+$Url+'&quot;,&quot;'+$Id+'&quot;,&quot;'+$parentId+'&quot;,&quot;'+$parentWebId+'&quot;,&quot;'+$Member+'&quot;,&quot;'+$RoleDefinition+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;} #foreach RoleAssignment&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPLists {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListWorkflowAssociations,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListFields,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListViews,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryListContentTypes,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Lists&quot;&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying Lists in $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;Lists.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;#todo get systemlistproperty if possible&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;ListName&quot;,&quot;RootFolder&quot;,&quot;WebUrl&quot;,&quot;ItemCount&quot;,&quot;ListTemplate&quot;,&quot;ListLastModified&quot;,&quot;EmailAlias&quot;,&quot;EnableVersioning&quot;,&quot;EnableMinorVersions&quot;,&quot;MajorVersionLimit&quot;,&quot;MajorWithMinorVersionsLimit&quot;,ListID&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row |  out-file $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$lists=$web.lists&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($list in $lists) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;write-host &quot;                Inventorying $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisListTitle=$list.title&#xD;&#xA;                $Location=($web.Url+$list.RootFolder)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisListTitle = [regex]::replace($thisListTitle, $Pattern, '')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$thisListTitle+'&quot;,&quot;'+$list.RootFolder+'&quot;,&quot;'+$web.Url+'&quot;,&quot;'+$list.ItemCount+'&quot;,&quot;'+$list.BaseTemplate+'&quot;,&quot;'+$list.LastItemModifiedDate+'&quot;,&quot;'+$list.EmailAlias+'&quot;,&quot;'+$list.EnableVersioning+'&quot;,&quot;'+$list.EnableMinorVersions+'&quot;,&quot;'+$list.MajorVersionLimit+'&quot;,&quot;'+$list.MajorWithMinorVersionsLimit+'&quot;,&quot;'+$list.id+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryListWorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-WorkflowAssociations -spobject $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryListFields) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPListFields -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListFields&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryListViews) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-SPListViews -list $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListViews&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryListContentTypes -or&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;write-host &quot;                  Inventorying Content Types in $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-ContentTypes -SPObject $list -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder -InventoryContentTypeWorkflowAssociations:$InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryListcontentTypes&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;#$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPListFields {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;ListFields&quot;&#xD;&#xA;        $Location=($list.parentweb.Url+$list.RootFolder)&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;                  Inventorying fields in $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ListFields.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;FieldName&quot;,&quot;ListDefaultUrl&quot;,&quot;ViewUrl&quot;,&quot;WebUrl&quot;,&quot;FieldType&quot;,&quot;ListID&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$fields=$list.fields&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($field in $fields) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisFieldTitle=$field.Title&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisFieldTitle=[regex]::replace($thisFieldTitle, $Pattern, '')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$thisFieldTitle+'&quot;,&quot;'+$list.DefaultViewUrl+'&quot;,&quot;'+$list.DefaultViewUrl+'&quot;,&quot;'+$list.parentweb.Url+'&quot;,&quot;'+$field.TypeAsString+'&quot;,&quot;'+$list.id+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA;function Inventory-SPListViews {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$list,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;ListViews&quot;&#xD;&#xA;        $Location=($web.Url+$list.RootFolder)&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;Write-Host &quot;                  Inventorying views in $($list.title)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ListViews.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;ViewName&quot;,&quot;ListDefaultUrl&quot;,&quot;ViewUrl&quot;,&quot;WebUrl&quot;,&quot;ViewRowlimit&quot;,&quot;ViewPaged&quot;,&quot;ViewType&quot;,&quot;ListID&quot;' &#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$views=$list.views&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($view in $views) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$viewType=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[xml]$viewprop=$view.propertiesXml&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$viewType=$viewprop.View.Type&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisViewTitle=$view.Title&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$thisViewTitle=[regex]::replace($thisViewTitle, $Pattern, '')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$thisViewTitle+'&quot;,&quot;'+$list.DefaultViewUrl+'&quot;,&quot;'+$view.Url+'&quot;,&quot;'+$web.Url+'&quot;,&quot;'+$view.RowLimit+'&quot;,&quot;'+$view.Paged+'&quot;,&quot;'+$viewType+'&quot;,&quot;'+$list.id+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;} #catch&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#$web.dispose()&#xD;&#xA;&#x9;&#x9;&#x9;} #finally&#xD;&#xA;&#x9;&#x9;} #foreach web&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;function Inventory-SPSiteFeatures {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$web,&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;&#x9;) #param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;        $now=get-date&#xD;&#xA;&#x9;&#x9;$Area=&quot;Site Features&quot;&#xD;&#xA;&#x9;&#x9;$Location=$web.url&#xD;&#xA;&#x9;&#x9;Write-Host &quot;              Inventorying Site Features in $($web.url)&quot;&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;SiteFeatures.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;SiteCollection&quot;,&quot;WebUrl&quot;,&quot;ScriptRunDate&quot;,&quot;FeatureID&quot;,&quot;SearchedScope&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$features=$web.Features&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($feature in $features) { &#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$web.site.Url+'&quot;,&quot;'+$web.url+'&quot;,&quot;'+$now+'&quot;,&quot;'+$feature.DefinitionId+'&quot;,&quot;Web&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;finally {&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach site admin&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;&#x9;} #end&#xD;&#xA; }&#xD;&#xA; &#xD;&#xA;function Record-Error($Location, $Area, $Err, $LogFilePrefix, $DestinationFolder) {&#xD;&#xA;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ErrorFile.txt&quot;)&#xD;&#xA;    write-host &quot;error recorded&quot; -f red&#xD;&#xA;&#x9;$row=&quot;Location:&quot;+$Location&#xD;&#xA;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;$row=&quot;Area:&quot;+$Area&#xD;&#xA;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;$row=&quot;Err:&quot;+$Err&#xD;&#xA;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-SPFolders {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;    param(&#xD;&#xA;    [Parameter(Mandatory=$true)][Microsoft.SharePoint.SPFolder] $folder,&#xD;&#xA;&#x9;[Parameter(Mandatory=$true)]$fileprocessfunction,&#xD;&#xA;    [Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;    [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;    ) #Param&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$subfolders=$folder.SubFolders&#xD;&#xA;&#x9;&#x9;$files=$folder.Files&#xD;&#xA;        #$processFiles = (Get-command -name “Inventory-WebParts“ -CommandType Function).ScriptBlock&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;#Write-Host &quot;                  Checking Folder $($folder.Name)&quot;&#xD;&#xA;&#x9;&#x9;foreach($subFolder in $subfolders) {&#xD;&#xA;&#x9;&#x9;&#x9;Inventory-SPFolders `&#xD;&#xA;                -folder $subFolder `&#xD;&#xA;                -fileprocessfunction $fileprocessfunction `&#xD;&#xA;                -LogFilePrefix $LogFilePrefix `&#xD;&#xA;                -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;foreach($file in $files) {&#xD;&#xA;            #Write-Host &quot;                    Invoking $fileprocessfunction for $($file.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&amp;$fileprocessfunction -file $file -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;} #foreach file&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-WebParts {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;    param(&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)][Microsoft.SharePoint.SPFile] $file,&#xD;&#xA;        [Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$assembly = [System.Reflection.Assembly]::LoadWithPartialName(&quot;Microsoft.SharePoint&quot;)&#xD;&#xA;        $limitedSPWebPartManager = $assembly.GetType(&quot;Microsoft.SharePoint.WebPartPages.SPLimitedWebPartManager&quot;);&#xD;&#xA;        $spWebPartManager = $assembly.GetType(&quot;Microsoft.SharePoint.WebPartPages.SPWebPartManager&quot;);&#xD;&#xA;        if($file.Name.EndsWith(&quot;.aspx&quot;) -and $file.Exists) {&#xD;&#xA;&#x9;&#x9;&#x9;$limitedWPM = $file.GetLimitedWebPartManager([System.Web.UI.WebControls.WebParts.PersonalizationScope]::Shared)&#xD;&#xA;&#x9;&#x9;&#x9;if( $limitedWPM -ne $null){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WebParts.csv&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row = '&quot;WebPartTitle&quot;,&quot;WebPartClosed&quot;,&quot;WebUrl&quot;,&quot;PageUrl&quot;,&quot;BrowseableObject&quot;,&quot;InWPZone&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$webparts=$limitedWPM.WebParts&#xD;&#xA;&#x9;&#x9;&#x9;} #if limited web part manager is not null&#xD;&#xA;&#x9;&#x9;} # if aspx and exists&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;        if( $limitedWPM -ne $null){&#xD;&#xA;    &#x9;&#x9;foreach ($webpart in $webparts) {&#xD;&#xA;                #write-host &quot;Checking $($webpart.title)&quot;&#xD;&#xA;    &#x9;&#x9;&#x9;$bindingFlags = [System.Reflection.BindingFlags]::GetField -bor  [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::NonPublic&#xD;&#xA;    &#x9;&#x9;&#x9;$wpManager = $limitedSPWebPartManager.InvokeMember(&quot;m_manager&quot;, $bindingFlags, $null, $limitedWPM, $null)&#xD;&#xA;    &#x9;&#x9;&#x9;$bindingFlags = [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::InvokeMethod -bor [System.Reflection.BindingFlags]::NonPublic&#xD;&#xA;    &#x9;&#x9;&#x9;$isOnPage = $spWebPartManager.InvokeMember(&quot;IsWebPartOnPage&quot;, $bindingFlags, $null, $wpManager, $webpart)&#xD;&#xA;    &#x9;&#x9;&#x9;try {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;if ($webpart.GetType().AssemblyQualifiedName.StartsWith(&quot;Microsoft.SharePoint.WebPartPages.ErrorWebPart&quot;, [System.StringComparison]::InvariantCultureIgnoreCase)) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;# Broken/Missing Web Part&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = &quot;missing&quot;;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = &quot;Error&quot;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if error web part&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;elseif (!$webpart.GetType().AssemblyQualifiedName.EndsWith(&quot;Culture=neutral, PublicKeyToken=71e9bce111e9429c&quot;,  [System.StringComparison]::InvariantCultureIgnoreCase)) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;# Non-Microsoft assembly&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = $webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = $webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if microsoft assembly&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;elseif ($webpart.IsClosed) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#Closed Web Part&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = $webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = $webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #web part closed&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;elseif (!$isOnPage) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#Web Part Not in WP Manager&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$assemblyQualifiedName = $webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle = $webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if not on page&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;if($assemblyQualifiedName) {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle=$webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#TODO************************************************************************************&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;#fix relative URL to get the web URL&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle= [regex]::replace($webPartTitle, '&quot;', '')&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row = '&quot;'+$webPartTitle+'&quot;,&quot;'+$webpart.IsClosed+'&quot;,&quot;'+$file.ParentFolder.ParentWeb.Url+'&quot;,&quot;'+$file.Url+'&quot;,&quot;'+$assemblyQualifiedName+'&quot;,&quot;'+$isOnPage+'&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;} #if assemblyqualified name&#xD;&#xA;                    else {&#xD;&#xA;                        if ($webpart.GetType().AssemblyQualifiedName) {&#xD;&#xA;                            $assemblyQualifiedName=$webpart.GetType().AssemblyQualifiedName;&#xD;&#xA;                        }&#xD;&#xA;                        else {&#xD;&#xA;                            $assemblyQualifiedName=&quot;Not Identified&quot;&#xD;&#xA;                        }&#xD;&#xA;                        $webPartTitle=$webpart.Title&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$Pattern = '&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$webPartTitle= [regex]::replace($webPartTitle, '&quot;', '')&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row = '&quot;'+$webPartTitle+'&quot;,&quot;'+$webpart.IsClosed+'&quot;,&quot;'+$file.ParentFolder.ParentWeb.Url+'&quot;,&quot;'+$file.Url+'&quot;,&quot;'+$assemblyQualifiedName+'&quot;,&quot;'+$isOnPage+'&quot;'&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;                    } #else assemblyqualifiedname&#xD;&#xA;    &#x9;&#x9;&#x9;} #try&#xD;&#xA;    &#x9;&#x9;&#x9;catch {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;#write-host &quot;err&quot;$error[0]&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;# Need to catch this error &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;# The field/property: &quot;ViewId&quot; for type: &quot;Microsoft.SharePoint.Portal.WebControls.CategoryWebPart&quot; differs only &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;# in case from the field/property: &quot;ViewID&quot;. Failed to use non CLS compliant type.&#xD;&#xA;    &#x9;&#x9;&#x9;} #catch&#xD;&#xA;    &#x9;&#x9;&#x9;$assemblyQualifiedName = $null&#xD;&#xA;    &#x9;&#x9;} #foreach webpart&#xD;&#xA;        } #if limitedwpm is not null&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {&#xD;&#xA;&#x9;&#x9;if ($limitedWPM) {&#xD;&#xA;&#x9;&#x9;&#x9;$limitedWPM.Dispose()&#xD;&#xA;&#x9;&#x9;} #if limitedwpm&#xD;&#xA;&#x9;} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-SPWebSize {&#xD;&#xA;    param (&#xD;&#xA;        $web, &#xD;&#xA;        $indludesubwebs&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;write-host &quot;              Calculating Web Size for $($web.Url)&quot;&#xD;&#xA;        [long]$total = 0;&#xD;&#xA;&#x9;&#x9;$folders=$web.Folders&#xD;&#xA;&#x9;} #begin&#xD;&#xA;    PROCESS {&#xD;&#xA;        foreach ($folder in $folders) {&#xD;&#xA;            $total += Get-SPFolderSize($folder)&#xD;&#xA;        } #foreach folder&#xD;&#xA;        if ($indludesubwebs) {&#xD;&#xA;    &#x9;&#x9;$webs=$web.Webs&#xD;&#xA;            foreach ($subweb in $webs) {&#xD;&#xA;                $total += (Get-SPWebSize -web $subweb -includesubwebs $includesubwebs)&#xD;&#xA;                #$subweb.Dispose()&#xD;&#xA;            }&#xD;&#xA;        } #if includesubwebs&#xD;&#xA;    } #process&#xD;&#xA;    END {&#xD;&#xA;        return $total&#xD;&#xA;&#x9;&#x9;$web.dispose()&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-SPFolderSize {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;    param (&#xD;&#xA;        $folder&#xD;&#xA;    )&#xD;&#xA;    [long]$folderSize = 0&#xD;&#xA;    foreach ($file in $folder.Files) {&#xD;&#xA;        $folderSize += $file.Length; #bytes&#xD;&#xA;    }&#xD;&#xA;    foreach ($subfolder in $folder.SubFolders) {&#xD;&#xA;        $folderSize += Get-SPFolderSize -folder $subfolder&#xD;&#xA;    }    return $folderSize&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-ContentTypes {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;        [Parameter(Mandatory=$true)]$SPObject, #can be site,web or list so it is not strongly typed&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder,&#xD;&#xA;&#x9;&#x9;[switch]$InventoryContentTypeWorkflowAssociations&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$Area=&quot;Content Types&quot;&#xD;&#xA;&#x9;&#x9;$Location=$null&#xD;&#xA;&#x9;&#x9;if ($SPObject.Url) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=$SPObject.Url&#xD;&#xA;&#x9;&#x9;} elseif ($SPObject.rootfolder) {&#xD;&#xA;&#x9;&#x9;&#x9;$Location=($SPObject.parentweb.Url+$SPObject.RootFolder)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;ContentTypes.csv&quot;)&#xD;&#xA;&#x9;&#x9;$contentTypes=$SPObject.ContentTypes&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;Location&quot;,&quot;ContentTypeName&quot;,&quot;ContentTypeGUID&quot;,&quot;ParentID&quot;,&quot;ParentWebID&quot;,&quot;Hidden&quot;,&quot;Group&quot;,&quot;Scope&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$objectType=$SPObject.gettype()&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;foreach ($contentType in $contentTypes) {&#xD;&#xA;&#x9;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#Write-Host &quot;                    Logging $($contentType.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$objectType+'&quot;,&quot;'+($contentType.Name)+'&quot;,&quot;'+($contentType.id)+'&quot;,&quot;'+($contentType.parent.id)+'&quot;,&quot;'+($contentType.parentweb.id)+'&quot;,&quot;'+($contentType.Hiddden)+'&quot;,&quot;'+($contentType.Group)+'&quot;,&quot;'+($contentType.Scope)+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($InventoryContentTypeWorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Inventory-WorkflowAssociations -spobject $contentType -LogFilePrefix $LogFilePrefix -DestinationFolder $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} #if InventoryContentTypeWorkflowAssociations&#xD;&#xA;&#x9;&#x9;&#x9;} #try&#xD;&#xA;&#x9;&#x9;&#x9;catch {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Record-Error $Location $Area $error[0] $LogFilePrefix $DestinationFolder&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} #foreach content type&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Inventory-WorkflowAssociations {&#xD;&#xA;&#x9;[cmdletbinding()]&#xD;&#xA;&#x9;param (&#xD;&#xA;        [Parameter(Mandatory=$true)]$SPObject, #can be web,content type, or list so it is not strongly typed&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory=$true)]$LogFilePrefix,&#xD;&#xA;        [Parameter(Mandatory=$true)][string]$DestinationFolder&#xD;&#xA;    )&#xD;&#xA;&#x9;BEGIN {&#xD;&#xA;&#x9;&#x9;$logfilename=($DestinationFolder + &quot;\&quot; + $LogFilePrefix + &quot;WorkflowAssociations.csv&quot;)&#xD;&#xA;&#x9;&#x9;if (-not (test-path $logfilename)) {&#xD;&#xA;&#x9;&#x9;&#x9;$row = '&quot;ObjectType&quot;,&quot;WorkflowAssociationName&quot;,&quot;WorkflowAssociationID&quot;,&quot;ParentAssociationId&quot;,&quot;ParentContentType&quot;,&quot;ParentListId&quot;,&quot;ParentSiteId&quot;,&quot;ParentWebId&quot;,&quot;BaseTemplate&quot;,&quot;Enabled&quot;,&quot;RunningInstances&quot;,&quot;WFAParentWebUrl&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;$row | Out-File $logfilename&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$workflowAssociations=$SPObject.WorkflowAssociations&#xD;&#xA;&#x9;&#x9;$objectType=$SPObject.gettype()&#xD;&#xA;&#x9;} #begin&#xD;&#xA;&#x9;PROCESS {&#xD;&#xA;&#x9;&#x9;if ($WorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($wfa in $WorkflowAssociations) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-Host &quot;                    Logging $($wfa.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row=''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row='&quot;'+$objectType+'&quot;,&quot;'+$wfa.Name+'&quot;,&quot;'+$wfa.id+'&quot;,&quot;'+$wfa.ParentAssociationId+'&quot;,&quot;'+$wfa.ParentContentType+'&quot;,&quot;'+$wfa.ParentList.Id+'&quot;,&quot;'+$wfa.ParentSite.Id+'&quot;,&quot;'+$wfa.ParentWeb.Id+'&quot;,&quot;'+$wfa.BaseTemplate+'&quot;,&quot;'+$wfa.Enabled+'&quot;,&quot;'+$wfa.RunningInstances+'&quot;,&quot;'+$wfa.parentweb.url+'&quot;'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$row | Out-File $logfilename -append&#xD;&#xA;&#x9;&#x9;&#x9;} #foreach workflow associations&#xD;&#xA;&#x9;&#x9;} #if WorkflowAssociations&#xD;&#xA;&#x9;} #process&#xD;&#xA;&#x9;END {} #end&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Run-FullInventory {&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;$LogFilePrefix=&quot;Test_&quot;,&#xD;&#xA;&#x9;&#x9;$DestinationFolder=&quot;d:\temp&quot;,&#xD;&#xA;        [switch]$ClearPriorLogs&#xD;&#xA;&#x9;)&#xD;&#xA;    if ($ClearPriorLogs) {&#xD;&#xA;        get-childitem &quot;$DestinationFolder&quot; -filter ($LogFilePrefix+&quot;*.csv&quot;) | % {remove-item $_.fullname}&#xD;&#xA;&#x9;&#x9;get-childitem &quot;$DestinationFolder&quot; -filter ($LogFilePrefix+&quot;*.txt&quot;) | % {remove-item $_.fullname}&#xD;&#xA;    }&#xD;&#xA;&#x9;inventory-spfarm `&#xD;&#xA;&#x9;&#x9;-LogFilePrefix $LogFilePrefix `&#xD;&#xA;&#x9;&#x9;-DestinationFolder $DestinationFolder `&#xD;&#xA;&#x9;&#x9;-InventoryFarmSolutions `&#xD;&#xA;&#x9;&#x9;-InventoryFarmFeatures `&#xD;&#xA;&#x9;&#x9;-InventoryWebTemplates `&#xD;&#xA;&#x9;&#x9;-InventoryTimerJobs `&#xD;&#xA;&#x9;&#x9;-InventoryWebApplications `&#xD;&#xA;&#x9;&#x9;-InventorySiteCollections `&#xD;&#xA;&#x9;&#x9;-InventorySiteCollectionAdmins `&#xD;&#xA;&#x9;&#x9;-InventorySiteCollectionFeatures `&#xD;&#xA;&#x9;&#x9;-InventoryWebPermissions `&#xD;&#xA;&#x9;&#x9;-InventoryWebs `&#xD;&#xA;&#x9;&#x9;-InventorySiteContentTypes `&#xD;&#xA;&#x9;&#x9;-InventoryWebFeatures `&#xD;&#xA;&#x9;&#x9;-InventoryLists `&#xD;&#xA;&#x9;&#x9;-InventoryWebWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;-InventoryListContentTypes `&#xD;&#xA;        -InventoryListWorkflowAssociations `&#xD;&#xA;        -InventoryContentTypeWorkflowAssociations `&#xD;&#xA;&#x9;&#x9;-InventoryContentDatabases `&#xD;&#xA;&#x9;&#x9;-InventoryListFields `&#xD;&#xA;&#x9;&#x9;-InventoryListViews `&#xD;&#xA;&#x9;&#x9;-InventoryWebParts&#xD;&#xA;}" />
</CodeSnippets>