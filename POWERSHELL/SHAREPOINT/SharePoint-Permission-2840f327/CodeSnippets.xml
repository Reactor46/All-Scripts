<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;#Function to retrieve Permission data&#xD;&#xA;Function Get-PermissionInfo([String]$UserID, [Microsoft.SharePoint.SPSecurableObject]$Object)&#xD;&#xA;{&#xD;&#xA;&#x9;#Object Array to hold Permission data&#xD;&#xA;    $PermissionDataCollection = @()&#xD;&#xA;&#xD;&#xA;&#x9;#Determine the given Object type and Get URL of it&#xD;&#xA;    switch($Object.GetType().FullName)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;&quot;Microsoft.SharePoint.SPWeb&quot;  { $ObjectType = &quot;Site&quot; ; $ObjectURL = $Object.URL }&#xD;&#xA;&#x9;&#x9;&quot;Microsoft.SharePoint.SPListItem&quot; &#xD;&#xA;&#x9;&#x9;{ &#xD;&#xA;&#x9;&#x9;&#x9;if($Object.Folder -ne $null)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9; &#x9;$ObjectType = &quot;Folder&quot; ; $ObjectURL = &quot;$($Object.Web.Url)/$($Object.Url)&quot; &#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$ObjectType = &quot;List Item&quot;; $ObjectURL = &quot;$($Object.Web.Url)/$($Object.Url)&quot; &#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;#Microsoft.SharePoint.SPList, Microsoft.SharePoint.SPDocumentLibrary, &quot;Microsoft.SharePoint.SPPictureLibrary&quot;,etc&#xD;&#xA;&#x9;&#x9;default { $ObjectType = &quot;List/Library&quot;; $ObjectURL = &quot;$($Object.ParentWeb.Url)/$($Object.RootFolder.URL)&quot; }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;#Get Permissions of the user on given object - Such as: Web, List, Folder, ListItem&#xD;&#xA;&#x9;$UserPermissionInfo = $Object.GetUserEffectivePermissionInfo($UserID)&#xD;&#xA;&#x9;#Iterate through each permission and get the details&#xD;&#xA;&#x9;foreach($UserRoleAssignment in $UserPermissionInfo.RoleAssignments)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;#Get all permission levels assigned to User account directly or via SharePOint Group&#xD;&#xA;&#x9;&#x9;$UserPermissions=@()&#xD;&#xA;        foreach ($UserRoleDefinition in $UserRoleAssignment.RoleDefinitionBindings)&#xD;&#xA;        {&#xD;&#xA;&#x9;&#x9;&#x9;#Exclude &quot;Limited Accesses&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if($UserRoleDefinition.Name -ne &quot;Limited Access&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;        &#x9;&#x9;$UserPermissions += $UserRoleDefinition.Name&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;        }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;#Determine Permissions granted directly or through SharePoint Group&#xD;&#xA;&#x9;&#x9;if($UserPermissions)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if($UserRoleAssignment.Member -is [Microsoft.SharePoint.SPGroup])   &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; $PermissionType = &quot;Member of SharePoint Group: &quot; + $UserRoleAssignment.Member.Name&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$PermissionType = &quot;Direct Permission&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;$UserPermissions = $UserPermissions -join &quot;;&quot; &#x9;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;#Create an object to hold storage data&#xD;&#xA;&#x9;        $PermissionData = New-Object PSObject&#xD;&#xA;&#x9;        $PermissionData | Add-Member -type NoteProperty -name &quot;Object&quot; -value $ObjectType&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionData | Add-Member -type NoteProperty -name &quot;Title&quot; -value $Object.Title&#xD;&#xA;&#x9;        $PermissionData | Add-Member -type NoteProperty -name &quot;URL&quot; -value $ObjectURL&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionData | Add-Member -type NoteProperty -name &quot;Permission Type&quot; -value $PermissionType&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionData | Add-Member -type NoteProperty -name &quot;Permissions&quot; -value $UserPermissions&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionDataCollection += $PermissionData&#xD;&#xA;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;&#x9;Return $PermissionDataCollection&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Function to Generate Permission Report&#xD;&#xA;Function Generate-PermissionReport($UserID, $WebAppURL, $ReportPath)&#xD;&#xA;{&#xD;&#xA;    #Output Report location, delete the file, If already exist!&#xD;&#xA;    if (Test-Path $ReportPath)&#xD;&#xA;     {&#xD;&#xA;        Remove-Item $ReportPath&#xD;&#xA;     }&#xD;&#xA;&#x9; &#xD;&#xA;&#x9;  #Write Output Report CSV File Headers&#xD;&#xA;&#x9; &quot;Object, Title, URL, Permission Type, Permissions&quot; | out-file $ReportPath&#xD;&#xA;&#xD;&#xA;&#x9;###Check Whether the Search Users is a Farm Administrator ###&#xD;&#xA;&#x9;Write-host &quot;Scanning Farm Administrators...&quot; &#xD;&#xA;  &#x9;#Get the SharePoint Central Administration site&#xD;&#xA;  &#x9;$AdminWebApp = Get-SPwebapplication -includecentraladministration | where {$_.IsAdministrationWebApplication}&#xD;&#xA;    $AdminSite = Get-SPWeb $AdminWebApp.Url&#xD;&#xA;    $AdminGroupName = $AdminSite.AssociatedOwnerGroup&#xD;&#xA;    $FarmAdminGroup = $AdminSite.SiteGroups[$AdminGroupName]&#xD;&#xA; &#xD;&#xA;&#x9;#enumerate in farm adminidtrators groups&#xD;&#xA;    foreach ($user in $FarmAdminGroup.users)&#xD;&#xA;    {&#xD;&#xA;    &#x9;if($user.LoginName.Endswith($UserID,1)) #1 to Ignore Case&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&quot;Farm, $($AdminSite.Title), $($AdminWebApp.URL), Farm Administrators Group, Farm Administrator&quot; | Out-File $ReportPath -Append&#xD;&#xA;    &#x9;}     &#xD;&#xA;    }&#xD;&#xA; &#xD;&#xA;&#x9;### Check Web Application User Policies ###&#xD;&#xA;&#x9;Write-host &quot;Scanning Web Application Policies...&quot; &#xD;&#xA; &#x9;$WebApp = Get-SPWebApplication $WebAppURL&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;foreach ($Policy in $WebApp.Policies)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;    &#x9;#Check if the search users is member of the group&#xD;&#xA;&#x9;  &#x9;&#x9;if($Policy.UserName.EndsWith($UserID,1))&#xD;&#xA;&#x9;     &#x9;{&#xD;&#xA;&#x9;    &#x9;&#x9;#Write-Host $Policy.UserName&#xD;&#xA;&#x9;     &#x9;&#x9;$PolicyRoles=@()&#xD;&#xA;&#x9;&#x9;&#x9;    foreach($Role in $Policy.PolicyRoleBindings)&#xD;&#xA;&#x9;&#x9;&#x9;    {&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;$PolicyRoles+= $Role.Name +&quot;;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;#Send Data to CSV File&#xD;&#xA;&#x9;    &#x9;&quot;Web Application, $($WebApp.Name), $($WebApp.URL), Web Application Policy, $($PolicyRoles)&quot; | Out-File $ReportPath -Append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;#Convert UserID Into Claims format - If WebApp is claims based! Domain\User to i:0#.w|Domain\User&#xD;&#xA;    if($WebApp.UseClaimsAuthentication)&#xD;&#xA;    {&#xD;&#xA;        $ClaimsUserID = (New-SPClaimsPrincipal -identity $UserID -identitytype 1).ToEncodedString()&#xD;&#xA;    }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;#Get all Site collections of given web app&#xD;&#xA;&#x9;$SiteCollections = Get-SPSite -WebApplication $WebAppURL -Limit All&#xD;&#xA;&#xD;&#xA;&#x9;#Loop through all site collections &#xD;&#xA;    foreach($Site in $SiteCollections)&#xD;&#xA;    {&#xD;&#xA;    &#x9;Write-host &quot;Scanning Site Collection:&quot; $site.Url&#xD;&#xA;&#x9;&#x9;###Check Whether the User is a Site Collection Administrator&#xD;&#xA;   &#x9;&#x9;foreach($SiteCollAdmin in $Site.RootWeb.SiteAdministrators)&#xD;&#xA;        {&#xD;&#xA;    &#x9;&#x9;if($SiteCollAdmin.LoginName.EndsWith($ClaimsUserID,1))&#xD;&#xA;   &#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&quot;Site Collection, $($Site.RootWeb.Title), $($Site.RootWeb.Url), Site Collection Administrators Group, Site Collection Administrator&quot; | Out-File $ReportPath -Append&#xD;&#xA;   &#x9;&#x9;&#x9;}     &#xD;&#xA;  &#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;#Get all webs&#xD;&#xA;&#x9;&#x9;$WebsCollection = $Site.AllWebs&#xD;&#xA;&#x9;&#x9;#Loop throuh each Site (web)&#xD;&#xA;&#x9;&#x9;foreach($Web in $WebsCollection)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;   &#x9;&#x9;&#x9;if($Web.HasUniqueRoleAssignments -eq $True)&#xD;&#xA;&#x9;            {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Write-host &quot;Scanning Site:&quot; $Web.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get Permissions of the user on Web&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$WebPermissions = Get-PermissionInfo $ClaimsUserID $Web&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Export Web permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$WebPermissions |  Export-csv $ReportPath  -notypeinformation -Append &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#Check Lists with Unique Permissions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-host &quot;Scanning Lists on $($web.url)...&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;foreach($List in $web.Lists)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;            &#x9;&#x9;if($List.HasUniqueRoleAssignments -eq $True -and ($List.Hidden -eq $false))&#xD;&#xA;                &#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Get Permissions of the user on list&#xD;&#xA;                        $ListPermissions = Get-PermissionInfo $ClaimsUserID $List&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Export Web permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$ListPermissions |  Export-csv $ReportPath -notypeinformation -Append &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Check Folders with Unique Permissions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$UniqueFolders = $List.Folders | where { $_.HasUniqueRoleAssignments -eq $True }                    &#xD;&#xA;                    #Get Folder permissions&#xD;&#xA;                    foreach($folder in $UniqueFolders)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    {&#xD;&#xA;                        $FolderPermissions = Get-PermissionInfo $ClaimsUserID $folder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Export Folder permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$FolderPermissions |  Export-csv $ReportPath -notypeinformation -Append&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;                    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Check List Items with Unique Permissions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$UniqueItems = $List.Items | where { $_.HasUniqueRoleAssignments -eq $True }&#xD;&#xA;                    #Get Item level permissions&#xD;&#xA;                    foreach($item in $UniqueItems)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    {&#xD;&#xA;                        $ItemPermissions = Get-PermissionInfo $ClaimsUserID $Item&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Export List Items permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$ItemPermissions |  Export-csv $ReportPath -notypeinformation -Append &#x9;&#x9;&#x9;&#xD;&#xA;                    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;Write-Host Permission Report Generated successfully!&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Input Variables&#xD;&#xA;$WebAppURL = &quot;http://intranet.crescent.com&quot;&#xD;&#xA;$Userid =&quot;Crescent\Salaudeen&quot; &#xD;&#xA;$ReportPath = &quot;D:\Reports\PermissionRpt.csv&quot;&#xD;&#xA;&#xD;&#xA;#Call the function to generate user access report&#xD;&#xA;Generate-PermissionReport $Userid $WebAppURL $ReportPath" />
  <Code Content="Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;#Function to retrieve Permission data&#xD;&#xA;Function Get-PermissionInfo([String]$UserID, [Microsoft.SharePoint.SPSecurableObject]$Object)&#xD;&#xA;{&#xD;&#xA;&#x9;#Object Array to hold Permission data&#xD;&#xA;    $PermissionDataCollection = @()&#xD;&#xA;&#xD;&#xA;&#x9;#Determine the given Object type and Get URL of it&#xD;&#xA;    switch($Object.GetType().FullName)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;&quot;Microsoft.SharePoint.SPWeb&quot;  { $ObjectType = &quot;Site&quot; ; $ObjectURL = $Object.URL }&#xD;&#xA;&#x9;&#x9;&quot;Microsoft.SharePoint.SPListItem&quot; &#xD;&#xA;&#x9;&#x9;{ &#xD;&#xA;&#x9;&#x9;&#x9;if($Object.Folder -ne $null)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9; &#x9;$ObjectType = &quot;Folder&quot; ; $ObjectURL = &quot;$($Object.Web.Url)/$($Object.Url)&quot; &#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$ObjectType = &quot;List Item&quot;; $ObjectURL = &quot;$($Object.Web.Url)/$($Object.Url)&quot; &#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;#Microsoft.SharePoint.SPList, Microsoft.SharePoint.SPDocumentLibrary, &quot;Microsoft.SharePoint.SPPictureLibrary&quot;,etc&#xD;&#xA;&#x9;&#x9;default { $ObjectType = &quot;List/Library&quot;; $ObjectURL = &quot;$($Object.ParentWeb.Url)/$($Object.RootFolder.URL)&quot; }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;#Get Permissions of the user on given object - Such as: Web, List, Folder, ListItem&#xD;&#xA;&#x9;$UserPermissionInfo = $Object.GetUserEffectivePermissionInfo($UserID)&#xD;&#xA;&#x9;#Iterate through each permission and get the details&#xD;&#xA;&#x9;foreach($UserRoleAssignment in $UserPermissionInfo.RoleAssignments)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;#Get all permission levels assigned to User account directly or via SharePOint Group&#xD;&#xA;&#x9;&#x9;$UserPermissions=@()&#xD;&#xA;        foreach ($UserRoleDefinition in $UserRoleAssignment.RoleDefinitionBindings)&#xD;&#xA;        {&#xD;&#xA;&#x9;&#x9;&#x9;#Exclude &quot;Limited Accesses&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if($UserRoleDefinition.Name -ne &quot;Limited Access&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;        &#x9;&#x9;$UserPermissions += $UserRoleDefinition.Name&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;        }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;#Determine Permissions granted directly or through SharePoint Group&#xD;&#xA;&#x9;&#x9;if($UserPermissions)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if($UserRoleAssignment.Member -is [Microsoft.SharePoint.SPGroup])   &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; $PermissionType = &quot;Member of SharePoint Group: &quot; + $UserRoleAssignment.Member.Name&#x9;&#x9;&#x9;&#x9; &#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$PermissionType = &quot;Direct Permission&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;$UserPermissions = $UserPermissions -join &quot;;&quot; &#x9;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;#Create an object to hold storage data&#xD;&#xA;&#x9;        $PermissionData = New-Object PSObject&#xD;&#xA;&#x9;        $PermissionData | Add-Member -type NoteProperty -name &quot;Object&quot; -value $ObjectType&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionData | Add-Member -type NoteProperty -name &quot;Title&quot; -value $Object.Title&#xD;&#xA;&#x9;        $PermissionData | Add-Member -type NoteProperty -name &quot;URL&quot; -value $ObjectURL&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionData | Add-Member -type NoteProperty -name &quot;Permission Type&quot; -value $PermissionType&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionData | Add-Member -type NoteProperty -name &quot;Permissions&quot; -value $UserPermissions&#xD;&#xA;&#x9;&#x9;&#x9;$PermissionDataCollection += $PermissionData&#xD;&#xA;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;&#x9;Return $PermissionDataCollection&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Function to Generate Permission Report&#xD;&#xA;Function Generate-PermissionReport($UserID, $WebAppURL, $ReportPath)&#xD;&#xA;{&#xD;&#xA;    #Output Report location, delete the file, If already exist!&#xD;&#xA;    if (Test-Path $ReportPath)&#xD;&#xA;     {&#xD;&#xA;        Remove-Item $ReportPath&#xD;&#xA;     }&#xD;&#xA;&#x9; &#xD;&#xA;&#x9;  #Write Output Report CSV File Headers&#xD;&#xA;&#x9; &quot;Object, Title, URL, Permission Type, Permissions&quot; | out-file $ReportPath&#xD;&#xA;&#xD;&#xA;&#x9;###Check Whether the Search Users is a Farm Administrator ###&#xD;&#xA;&#x9;Write-host &quot;Scanning Farm Administrators...&quot; &#xD;&#xA;  &#x9;#Get the SharePoint Central Administration site&#xD;&#xA;  &#x9;$AdminWebApp = Get-SPwebapplication -includecentraladministration | where {$_.IsAdministrationWebApplication}&#xD;&#xA;    $AdminSite = Get-SPWeb $AdminWebApp.Url&#xD;&#xA;    $AdminGroupName = $AdminSite.AssociatedOwnerGroup&#xD;&#xA;    $FarmAdminGroup = $AdminSite.SiteGroups[$AdminGroupName]&#xD;&#xA; &#xD;&#xA;&#x9;#enumerate in farm adminidtrators groups&#xD;&#xA;    foreach ($user in $FarmAdminGroup.users)&#xD;&#xA;    {&#xD;&#xA;    &#x9;if($user.LoginName.Endswith($UserID,1)) #1 to Ignore Case&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&quot;Farm, $($AdminSite.Title), $($AdminWebApp.URL), Farm Administrators Group, Farm Administrator&quot; | Out-File $ReportPath -Append&#xD;&#xA;    &#x9;}     &#xD;&#xA;    }&#xD;&#xA; &#xD;&#xA;&#x9;### Check Web Application User Policies ###&#xD;&#xA;&#x9;Write-host &quot;Scanning Web Application Policies...&quot; &#xD;&#xA; &#x9;$WebApp = Get-SPWebApplication $WebAppURL&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;foreach ($Policy in $WebApp.Policies)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;    &#x9;#Check if the search users is member of the group&#xD;&#xA;&#x9;  &#x9;&#x9;if($Policy.UserName.EndsWith($UserID,1))&#xD;&#xA;&#x9;     &#x9;{&#xD;&#xA;&#x9;    &#x9;&#x9;#Write-Host $Policy.UserName&#xD;&#xA;&#x9;     &#x9;&#x9;$PolicyRoles=@()&#xD;&#xA;&#x9;&#x9;&#x9;    foreach($Role in $Policy.PolicyRoleBindings)&#xD;&#xA;&#x9;&#x9;&#x9;    {&#xD;&#xA;&#x9;&#x9;&#x9;    &#x9;$PolicyRoles+= $Role.Name +&quot;;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;    }&#xD;&#xA;&#x9;&#x9;&#x9;#Send Data to CSV File&#xD;&#xA;&#x9;    &#x9;&quot;Web Application, $($WebApp.Name), $($WebApp.URL), Web Application Policy, $($PolicyRoles)&quot; | Out-File $ReportPath -Append&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;#Convert UserID Into Claims format - If WebApp is claims based! Domain\User to i:0#.w|Domain\User&#xD;&#xA;    if($WebApp.UseClaimsAuthentication)&#xD;&#xA;    {&#xD;&#xA;        $ClaimsUserID = (New-SPClaimsPrincipal -identity $UserID -identitytype 1).ToEncodedString()&#xD;&#xA;    }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;#Get all Site collections of given web app&#xD;&#xA;&#x9;$SiteCollections = Get-SPSite -WebApplication $WebAppURL -Limit All&#xD;&#xA;&#xD;&#xA;&#x9;#Loop through all site collections &#xD;&#xA;    foreach($Site in $SiteCollections)&#xD;&#xA;    {&#xD;&#xA;    &#x9;Write-host &quot;Scanning Site Collection:&quot; $site.Url&#xD;&#xA;&#x9;&#x9;###Check Whether the User is a Site Collection Administrator&#xD;&#xA;   &#x9;&#x9;foreach($SiteCollAdmin in $Site.RootWeb.SiteAdministrators)&#xD;&#xA;        {&#xD;&#xA;    &#x9;&#x9;if($SiteCollAdmin.LoginName.EndsWith($ClaimsUserID,1))&#xD;&#xA;   &#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&quot;Site Collection, $($Site.RootWeb.Title), $($Site.RootWeb.Url), Site Collection Administrators Group, Site Collection Administrator&quot; | Out-File $ReportPath -Append&#xD;&#xA;   &#x9;&#x9;&#x9;}     &#xD;&#xA;  &#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;#Get all webs&#xD;&#xA;&#x9;&#x9;$WebsCollection = $Site.AllWebs&#xD;&#xA;&#x9;&#x9;#Loop throuh each Site (web)&#xD;&#xA;&#x9;&#x9;foreach($Web in $WebsCollection)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;   &#x9;&#x9;&#x9;if($Web.HasUniqueRoleAssignments -eq $True)&#xD;&#xA;&#x9;            {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Write-host &quot;Scanning Site:&quot; $Web.Url&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Get Permissions of the user on Web&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$WebPermissions = Get-PermissionInfo $ClaimsUserID $Web&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Export Web permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$WebPermissions |  Export-csv $ReportPath  -notypeinformation -Append &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;#Check Lists with Unique Permissions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Write-host &quot;Scanning Lists on $($web.url)...&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;foreach($List in $web.Lists)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;            &#x9;&#x9;if($List.HasUniqueRoleAssignments -eq $True -and ($List.Hidden -eq $false))&#xD;&#xA;                &#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Get Permissions of the user on list&#xD;&#xA;                        $ListPermissions = Get-PermissionInfo $ClaimsUserID $List&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Export Web permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$ListPermissions |  Export-csv $ReportPath -notypeinformation -Append &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Check Folders with Unique Permissions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$UniqueFolders = $List.Folders | where { $_.HasUniqueRoleAssignments -eq $True }                    &#xD;&#xA;                    #Get Folder permissions&#xD;&#xA;                    foreach($folder in $UniqueFolders)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    {&#xD;&#xA;                        $FolderPermissions = Get-PermissionInfo $ClaimsUserID $folder&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Export Folder permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$FolderPermissions |  Export-csv $ReportPath -notypeinformation -Append&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;                    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;#Check List Items with Unique Permissions&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$UniqueItems = $List.Items | where { $_.HasUniqueRoleAssignments -eq $True }&#xD;&#xA;                    #Get Item level permissions&#xD;&#xA;                    foreach($item in $UniqueItems)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;    {&#xD;&#xA;                        $ItemPermissions = Get-PermissionInfo $ClaimsUserID $Item&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;#Export List Items permission data to CSV file - Append&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$ItemPermissions |  Export-csv $ReportPath -notypeinformation -Append &#x9;&#x9;&#x9;&#xD;&#xA;                    }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;Write-Host Permission Report Generated successfully!&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Input Variables&#xD;&#xA;$WebAppURL = &quot;http://intranet.crescent.com&quot;&#xD;&#xA;$Userid =&quot;Crescent\Salaudeen&quot; &#xD;&#xA;$ReportPath = &quot;D:\Reports\PermissionRpt.csv&quot;&#xD;&#xA;&#xD;&#xA;#Call the function to generate user access report&#xD;&#xA;Generate-PermissionReport $Userid $WebAppURL $ReportPath" />
</CodeSnippets>