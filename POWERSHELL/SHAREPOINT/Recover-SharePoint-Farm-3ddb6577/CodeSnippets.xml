<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="#------------------------------------------------------------------------------------------&#xD;&#xA;# Name:&#x9;&#x9;&#x9;Recover-SPManagedAccounts&#xD;&#xA;# Description:&#x9;This script will retrieve the Farm Account credentials and show the &#xD;&#xA;#&#x9;&#x9;&#x9;&#x9;passwords for all of the SharePoint Managed Accounts&#xD;&#xA;# Usage:&#x9;&#x9;Run the script on a SP Server with an account that has Local Admin Rights&#xD;&#xA;# By:&#x9;&#x9;&#x9;Ivan Josipovic, Softlanding.ca&#xD;&#xA;#------------------------------------------------------------------------------------------&#xD;&#xA;&#xD;&#xA;#Checks if the Current PowerShell Session is running as the Administrator&#xD;&#xA;if(([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] &quot;Administrator&quot;) -eq $false){&#xD;&#xA;&#x9;Throw &quot;This Script must be ran as Administrator&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#This section retrives the Farm Account UserName/Password from the Security Token Service Application Pool&#xD;&#xA;$Farm_user = C:\Windows\System32\cmd.exe /q /c $env:windir\system32\inetsrv\appcmd.exe list apppool &quot;SecurityTokenServiceApplicationPool&quot; /text:ProcessModel.UserName;&#xD;&#xA;$Farm_pass = C:\Windows\System32\cmd.exe /q /c $env:windir\system32\inetsrv\appcmd.exe list apppool &quot;SecurityTokenServiceApplicationPool&quot; /text:ProcessModel.Password;&#xD;&#xA;$Credential = New-Object System.Management.Automation.PsCredential($Farm_user, (ConvertTo-SecureString $Farm_pass -AsPlainText -Force));&#xD;&#xA;&#xD;&#xA;# This line contains the script which returns the account passwords, script is from http://sharepointlonghorn.com/Lists/Posts/Post.aspx?ID=11&#xD;&#xA;$GetManagedAccountPasswords = &quot;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell -EA 0;&#xD;&#xA;function Bindings(){&#xD;&#xA;&#x9;return [System.Reflection.BindingFlags]::CreateInstance -bor&#xD;&#xA;&#x9;[System.Reflection.BindingFlags]::GetField -bor&#xD;&#xA;&#x9;[System.Reflection.BindingFlags]::Instance -bor&#xD;&#xA;&#x9;[System.Reflection.BindingFlags]::NonPublic;&#xD;&#xA;}&#xD;&#xA;function GetFieldValue([object]`$o, [string]`$fieldName){&#xD;&#xA;&#x9;`$bindings = Bindings;&#xD;&#xA;&#x9;return `$o.GetType().GetField(`$fieldName, `$bindings).GetValue(`$o);&#xD;&#xA;}&#xD;&#xA;function ConvertTo-UnsecureString([System.Security.SecureString]`$string){ &#xD;&#xA;&#x9;`$intptr = [System.IntPtr]::Zero;&#xD;&#xA;&#x9;`$unmanagedString = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode(`$string);&#xD;&#xA;&#x9;`$unsecureString = [System.Runtime.InteropServices.Marshal]::PtrToStringUni(`$unmanagedString);&#xD;&#xA;&#x9;[System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode(`$unmanagedString);&#xD;&#xA;&#x9;return `$unsecureString;&#xD;&#xA;}&#xD;&#xA;Get-SPManagedAccount | select UserName, @{Name='Password'; Expression={ConvertTo-UnsecureString (GetFieldValue `$_ 'm_Password').SecureStringValue}}&quot;;&#xD;&#xA;&#xD;&#xA;#Writes the Script to the Public Folder (C:\Users\Public), this is required as we cant run the script inline as its too long.&#xD;&#xA;Set-Content -Path &quot;$($env:public.TrimEnd(&quot;\&quot;))\GetManagedAccountPasswords&quot; -Value $GetManagedAccountPasswords;&#xD;&#xA;&#xD;&#xA;#The Script which will be ran in the new PowerShell Window running as the Farm Account, it also removes the script above which we wrote to the file system&#xD;&#xA;$Script = &quot;&#xD;&#xA;`$Script = Get-Content `&quot;$($env:public.TrimEnd(&quot;\&quot;))\GetManagedAccountPasswords`&quot;;&#xD;&#xA;PowerShell.exe -Command `$Script;&#xD;&#xA;Remove-Item `&quot;$($env:public.TrimEnd(&quot;\&quot;))\GetManagedAccountPasswords`&quot;;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell -EA 0;&quot;&#xD;&#xA;&#xD;&#xA;#Runs PowerShell as the Farm Account and loads the Script above&#xD;&#xA;Start-Process -FilePath powershell.exe -Credential $Credential -ArgumentList &quot;-noexit -command $Script&quot; -WorkingDirectory C:\" />
  <Code Content="#------------------------------------------------------------------------------------------&#xD;&#xA;# Name:&#x9;&#x9;&#x9;Recover-SPManagedAccounts&#xD;&#xA;# Description:&#x9;This script will retrieve the Farm Account credentials and show the &#xD;&#xA;#&#x9;&#x9;&#x9;&#x9;passwords for all of the SharePoint Managed Accounts&#xD;&#xA;# Usage:&#x9;&#x9;Run the script on a SP Server with an account that has Local Admin Rights&#xD;&#xA;# By:&#x9;&#x9;&#x9;Ivan Josipovic, Softlanding.ca&#xD;&#xA;#------------------------------------------------------------------------------------------&#xD;&#xA;&#xD;&#xA;#Checks if the Current PowerShell Session is running as the Administrator&#xD;&#xA;if(([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] &quot;Administrator&quot;) -eq $false){&#xD;&#xA;&#x9;Throw &quot;This Script must be ran as Administrator&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#This section retrives the Farm Account UserName/Password from the Security Token Service Application Pool&#xD;&#xA;$Farm_user = C:\Windows\System32\cmd.exe /q /c $env:windir\system32\inetsrv\appcmd.exe list apppool &quot;SecurityTokenServiceApplicationPool&quot; /text:ProcessModel.UserName;&#xD;&#xA;$Farm_pass = C:\Windows\System32\cmd.exe /q /c $env:windir\system32\inetsrv\appcmd.exe list apppool &quot;SecurityTokenServiceApplicationPool&quot; /text:ProcessModel.Password;&#xD;&#xA;$Credential = New-Object System.Management.Automation.PsCredential($Farm_user, (ConvertTo-SecureString $Farm_pass -AsPlainText -Force));&#xD;&#xA;&#xD;&#xA;# This line contains the script which returns the account passwords, script is from http://sharepointlonghorn.com/Lists/Posts/Post.aspx?ID=11&#xD;&#xA;$GetManagedAccountPasswords = &quot;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell -EA 0;&#xD;&#xA;function Bindings(){&#xD;&#xA;&#x9;return [System.Reflection.BindingFlags]::CreateInstance -bor&#xD;&#xA;&#x9;[System.Reflection.BindingFlags]::GetField -bor&#xD;&#xA;&#x9;[System.Reflection.BindingFlags]::Instance -bor&#xD;&#xA;&#x9;[System.Reflection.BindingFlags]::NonPublic;&#xD;&#xA;}&#xD;&#xA;function GetFieldValue([object]`$o, [string]`$fieldName){&#xD;&#xA;&#x9;`$bindings = Bindings;&#xD;&#xA;&#x9;return `$o.GetType().GetField(`$fieldName, `$bindings).GetValue(`$o);&#xD;&#xA;}&#xD;&#xA;function ConvertTo-UnsecureString([System.Security.SecureString]`$string){ &#xD;&#xA;&#x9;`$intptr = [System.IntPtr]::Zero;&#xD;&#xA;&#x9;`$unmanagedString = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode(`$string);&#xD;&#xA;&#x9;`$unsecureString = [System.Runtime.InteropServices.Marshal]::PtrToStringUni(`$unmanagedString);&#xD;&#xA;&#x9;[System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode(`$unmanagedString);&#xD;&#xA;&#x9;return `$unsecureString;&#xD;&#xA;}&#xD;&#xA;Get-SPManagedAccount | select UserName, @{Name='Password'; Expression={ConvertTo-UnsecureString (GetFieldValue `$_ 'm_Password').SecureStringValue}}&quot;;&#xD;&#xA;&#xD;&#xA;#Writes the Script to the Public Folder (C:\Users\Public), this is required as we cant run the script inline as its too long.&#xD;&#xA;Set-Content -Path &quot;$($env:public.TrimEnd(&quot;\&quot;))\GetManagedAccountPasswords&quot; -Value $GetManagedAccountPasswords;&#xD;&#xA;&#xD;&#xA;#The Script which will be ran in the new PowerShell Window running as the Farm Account, it also removes the script above which we wrote to the file system&#xD;&#xA;$Script = &quot;&#xD;&#xA;`$Script = Get-Content `&quot;$($env:public.TrimEnd(&quot;\&quot;))\GetManagedAccountPasswords`&quot;;&#xD;&#xA;PowerShell.exe -Command `$Script;&#xD;&#xA;Remove-Item `&quot;$($env:public.TrimEnd(&quot;\&quot;))\GetManagedAccountPasswords`&quot;;&#xD;&#xA;Add-PSSnapin Microsoft.SharePoint.PowerShell -EA 0;&quot;&#xD;&#xA;&#xD;&#xA;#Runs PowerShell as the Farm Account and loads the Script above&#xD;&#xA;Start-Process -FilePath powershell.exe -Credential $Credential -ArgumentList &quot;-noexit -command $Script&quot; -WorkingDirectory C:\" />
</CodeSnippets>